// Generated by purs version 0.14.4
"use strict";
var Control_Applicative_Indexed = require("../Control.Applicative.Indexed/index.js");
var Control_Apply_Indexed = require("../Control.Apply.Indexed/index.js");
var Control_Bind_Indexed = require("../Control.Bind.Indexed/index.js");
var Data_Functor_Indexed = require("../Data.Functor.Indexed/index.js");
var iwhenM = function (dictIxMonad) {
    return function (mb) {
        return function (m) {
            return Control_Bind_Indexed.ibind(dictIxMonad.IxBind1())(mb)(function (b) {
                return Control_Applicative_Indexed.iwhen(dictIxMonad.IxApplicative0())(b)(m);
            });
        };
    };
};
var iunlessM = function (dictIxMonad) {
    return function (mb) {
        return function (m) {
            return Control_Bind_Indexed.ibind(dictIxMonad.IxBind1())(mb)(function (b) {
                return Control_Applicative_Indexed.iunless(dictIxMonad.IxApplicative0())(b)(m);
            });
        };
    };
};
var iap = function (dictIxMonad) {
    return function (f) {
        return function (a) {
            return Control_Bind_Indexed.ibind(dictIxMonad.IxBind1())(f)(function (f$prime) {
                return Control_Bind_Indexed.ibind(dictIxMonad.IxBind1())(a)(function (a$prime) {
                    return Control_Applicative_Indexed.ipure(dictIxMonad.IxApplicative0())(f$prime(a$prime));
                });
            });
        };
    };
};
module.exports = {
    iap: iap,
    iwhenM: iwhenM,
    iunlessM: iunlessM,
    ipure: Control_Applicative_Indexed.ipure,
    iunless: Control_Applicative_Indexed.iunless,
    iwhen: Control_Applicative_Indexed.iwhen,
    iapply: Control_Apply_Indexed.iapply,
    iapplyFirst: Control_Apply_Indexed.iapplyFirst,
    iapplySecond: Control_Apply_Indexed.iapplySecond,
    composeiKleisli: Control_Bind_Indexed.composeiKleisli,
    composeiKleisliFlipped: Control_Bind_Indexed.composeiKleisliFlipped,
    ibind: Control_Bind_Indexed.ibind,
    ibindFlipped: Control_Bind_Indexed.ibindFlipped,
    imap: Data_Functor_Indexed.imap,
    ivoid: Data_Functor_Indexed.ivoid,
    ivoidLeft: Data_Functor_Indexed.ivoidLeft,
    ivoidRight: Data_Functor_Indexed.ivoidRight
};
