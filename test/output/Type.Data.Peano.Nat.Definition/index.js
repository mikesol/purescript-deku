// Generated by purs version 0.14.4
"use strict";
var Data_Show = require("../Data.Show/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var NProxy = (function () {
    function NProxy() {

    };
    NProxy.value = new NProxy();
    return NProxy;
})();
var reflectNat = function (dict) {
    return dict.reflectNat;
};
var showNProxy = function (dictIsNat) {
    return {
        show: (function () {
            var $22 = Data_Show.show(Data_Show.showInt);
            var $23 = reflectNat(dictIsNat);
            return function ($24) {
                return $22($23($24));
            };
        })()
    };
};
var showNat = function (dictIsNat) {
    var $25 = Data_Show.show(Data_Show.showInt);
    var $26 = reflectNat(dictIsNat);
    return function ($27) {
        return $25($26($27));
    };
};
var productZ$prime = {};
var productSucc = function (dictProductNat) {
    return function (dictSumNat) {
        return {};
    };
};
var product1$prime = {};
var predOfSucc = {};
var pred = function (v) {
    return Data_Unit.unit;
};
var powNat = function (dictExponentiationNat) {
    return function (v) {
        return function (v1) {
            return Data_Unit.unit;
        };
    };
};
var plusNat = function (dictSumNat) {
    return function (v) {
        return function (v1) {
            return Data_Unit.unit;
        };
    };
};
var mulNat = function (dictProductNat) {
    return function (v) {
        return function (v1) {
            return Data_Unit.unit;
        };
    };
};
var isZeroZ = {};
var isZeroSucc = {};
var isNatZ = {
    reflectNat: function (v) {
        return 0;
    }
};
var isNatSucc = function (dictIsNat) {
    return {
        reflectNat: function (v) {
            return 1 + reflectNat(dictIsNat)(Data_Unit.unit) | 0;
        }
    };
};
var exponentiationZ = {};
var exponentiationSucc = function (dictExponentiationNat) {
    return function (dictProductNat) {
        return {};
    };
};
var compareZ$prime = {};
var compareZ = {};
var compareSucc = function (dictCompareNat) {
    return {};
};
var compareSame = {};
var addZ$prime = {};
var addZ = {};
var addSucc = function (dictSumNat) {
    return {};
};
module.exports = {
    reflectNat: reflectNat,
    NProxy: NProxy,
    showNat: showNat,
    plusNat: plusNat,
    mulNat: mulNat,
    powNat: powNat,
    pred: pred,
    isNatZ: isNatZ,
    isNatSucc: isNatSucc,
    showNProxy: showNProxy,
    addZ: addZ,
    "addZ'": addZ$prime,
    addSucc: addSucc,
    "productZ'": productZ$prime,
    "product1'": product1$prime,
    productSucc: productSucc,
    exponentiationZ: exponentiationZ,
    exponentiationSucc: exponentiationSucc,
    compareSame: compareSame,
    compareZ: compareZ,
    "compareZ'": compareZ$prime,
    compareSucc: compareSucc,
    isZeroZ: isZeroZ,
    isZeroSucc: isZeroSucc,
    predOfSucc: predOfSucc
};
