// Generated by purs version 0.14.4
"use strict";
var Data_Eq = require("../Data.Eq/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var First = function (x) {
    return x;
};
var showFirst = function (dictShow) {
    return {
        show: function (v) {
            return "(First " + (Data_Show.show(dictShow)(v) + ")");
        }
    };
};
var semigroupFirst = {
    append: function (x) {
        return function (v) {
            return x;
        };
    }
};
var ordFirst = function (dictOrd) {
    return dictOrd;
};
var functorFirst = {
    map: function (f) {
        return function (m) {
            return f(m);
        };
    }
};
var eqFirst = function (dictEq) {
    return dictEq;
};
var eq1First = {
    eq1: function (dictEq) {
        return Data_Eq.eq(eqFirst(dictEq));
    }
};
var ord1First = {
    compare1: function (dictOrd) {
        return Data_Ord.compare(ordFirst(dictOrd));
    },
    Eq10: function () {
        return eq1First;
    }
};
var boundedFirst = function (dictBounded) {
    return dictBounded;
};
var applyFirst = {
    apply: function (v) {
        return function (v1) {
            return v(v1);
        };
    },
    Functor0: function () {
        return functorFirst;
    }
};
var bindFirst = {
    bind: function (v) {
        return function (f) {
            return f(v);
        };
    },
    Apply0: function () {
        return applyFirst;
    }
};
var applicativeFirst = {
    pure: First,
    Apply0: function () {
        return applyFirst;
    }
};
var monadFirst = {
    Applicative0: function () {
        return applicativeFirst;
    },
    Bind1: function () {
        return bindFirst;
    }
};
module.exports = {
    First: First,
    eqFirst: eqFirst,
    eq1First: eq1First,
    ordFirst: ordFirst,
    ord1First: ord1First,
    boundedFirst: boundedFirst,
    showFirst: showFirst,
    functorFirst: functorFirst,
    applyFirst: applyFirst,
    applicativeFirst: applicativeFirst,
    bindFirst: bindFirst,
    monadFirst: monadFirst,
    semigroupFirst: semigroupFirst
};
