-- | This module contains reexports of all the attributes.
-- This module has been automatically generated by running `spago run -p codegen`.
-- Any changes may be overwritten.
module Deku.DOM.Attributes
  ( module Combinators
  , tabindex
  , tabindex_
  , nonce
  , nonce_
  , slot
  , slot_
  , id
  , id_
  , klass
  , klass_
  , popovertargetaction
  , popovertargetaction_
  , popovertargetactionHide
  , popovertargetactionShow
  , popovertargetactionToggle
  , popovertarget
  , popovertarget_
  , popover
  , popover_
  , popoverManual
  , popoverAuto
  , draggable
  , draggable_
  , draggableFalse
  , draggableTrue
  , enterkeyhint
  , enterkeyhint_
  , enterkeyhintSend
  , enterkeyhintSearch
  , enterkeyhintPrevious
  , enterkeyhintNext
  , enterkeyhintGo
  , enterkeyhintDone
  , enterkeyhintEnter
  , inputmode
  , inputmode_
  , inputmodeSearch
  , inputmodeDecimal
  , inputmodeNumeric
  , inputmodeEmail
  , inputmodeUrl
  , inputmodeTel
  , inputmodeText
  , inputmodeNone
  , autocapitalize
  , autocapitalize_
  , autocapitalizeCharacters
  , autocapitalizeWords
  , autocapitalizeSentences
  , autocapitalizeOn
  , autocapitalizeNone
  , autocapitalizeOff
  , writingsuggestions
  , writingsuggestions_
  , writingsuggestionsFalse
  , writingsuggestionsTrue
  , spellcheck
  , spellcheck_
  , spellcheckFalse
  , spellcheckTrue
  , contenteditable
  , contenteditable_
  , contenteditablePlaintextOnly
  , contenteditableFalse
  , contenteditableTrue
  , accesskey
  , accesskey_
  , autofocus
  , autofocus_
  , hidden
  , hidden_
  , hiddenUntilFound
  , hiddenHidden
  , itemprop
  , itemprop_
  , itemref
  , itemref_
  , itemid
  , itemid_
  , itemtype
  , itemtype_
  , itemscope
  , itemscope_
  , is
  , is_
  , title
  , title_
  , style
  , style_
  , dir
  , dir_
  , dirAuto
  , dirRtl
  , dirLtr
  , translate
  , translate_
  , translateNo
  , translateYes
  , lang
  , lang_
  , target
  , target_
  , href
  , href_
  , urn
  , urn_
  , rev
  , rev_
  , methods
  , methods_
  , charset
  , charset_
  , fetchpriority
  , fetchpriority_
  , fetchpriorityAuto
  , fetchpriorityLow
  , fetchpriorityHigh
  , disabled
  , disabled_
  , color
  , color_
  , blocking
  , blocking_
  , as
  , as_
  , sizes
  , sizes_
  , imagesizes
  , imagesizes_
  , imagesrcset
  , imagesrcset_
  , referrerpolicy
  , referrerpolicy_
  , xtype
  , xtype_
  , xtypeButton
  , xtypeReset
  , xtypeSubmit
  , xtypeImage
  , xtypeFile
  , xtypeRadio
  , xtypeCheckbox
  , xtypeColor
  , xtypeRange
  , xtypeNumber
  , xtypeDatetimeLocal
  , xtypeTime
  , xtypeWeek
  , xtypeMonth
  , xtypeDate
  , xtypePassword
  , xtypeEmail
  , xtypeUrl
  , xtypeTel
  , xtypeSearch
  , xtypeText
  , xtypeHidden
  , xtypeUpperI
  , xtypeLowerI
  , xtypeUpperA
  , xtypeLowerA
  , xtype1
  , hreflang
  , hreflang_
  , integrity
  , integrity_
  , media
  , media_
  , crossorigin
  , crossorigin_
  , crossoriginUseCredentials
  , crossoriginAnonymous
  , rel
  , rel_
  , relPrev
  , relNext
  , relTermsOfService
  , relTag
  , relStylesheet
  , relSearch
  , relPrivacyPolicy
  , relPreload
  , relPrefetch
  , relPreconnect
  , relPingback
  , relOpener
  , relNoreferrer
  , relNoopener
  , relNofollow
  , relModulepreload
  , relManifest
  , relLicense
  , relIcon
  , relHelp
  , relExternal
  , relExpect
  , relDnsPrefetch
  , relCanonical
  , relBookmark
  , relAuthor
  , relAlternate
  , scheme
  , scheme_
  , httpEquiv
  , httpEquiv_
  , httpEquivContentSecurityPolicy
  , httpEquivXUaCompatible
  , httpEquivSetCookie
  , httpEquivRefresh
  , httpEquivDefaultStyle
  , httpEquivContentType
  , httpEquivContentLanguage
  , name
  , name_
  , nameColorScheme
  , nameThemeColor
  , nameReferrer
  , nameKeywords
  , nameGenerator
  , nameDescription
  , nameAuthor
  , nameApplicationName
  , content
  , content_
  , cite
  , cite_
  , compact
  , compact_
  , start
  , start_
  , reversed
  , reversed_
  , value
  , value_
  , datetime
  , datetime_
  , shape
  , shape_
  , shapeRectangleState
  , shapePolygonState
  , shapeDefaultState
  , shapeCircleState
  , coords
  , coords_
  , ping
  , ping_
  , download
  , download_
  , nohref
  , nohref_
  , alt
  , alt_
  , height
  , height_
  , width
  , width_
  , src
  , src_
  , srcset
  , srcset_
  , vspace
  , vspace_
  , hspace
  , hspace_
  , border
  , border_
  , align
  , align_
  , lowsrc
  , lowsrc_
  , longdesc
  , longdesc_
  , usemap
  , usemap_
  , ismap
  , ismap_
  , loading
  , loading_
  , loadingEager
  , loadingLazy
  , decoding
  , decoding_
  , decodingAuto
  , decodingAsync
  , decodingSync
  , scrolling
  , scrolling_
  , marginwidth
  , marginwidth_
  , marginheight
  , marginheight_
  , framespacing
  , framespacing_
  , frameborder
  , frameborder_
  , allowtransparency
  , allowtransparency_
  , allowfullscreen
  , allowfullscreen_
  , allow
  , allow_
  , sandbox
  , sandbox_
  , sandboxAllowTopNavigationToCustomProtocols
  , sandboxAllowDownloads
  , sandboxAllowPresentation
  , sandboxAllowOrientationLock
  , sandboxAllowModals
  , sandboxAllowPopupsToEscapeSandbox
  , sandboxAllowScripts
  , sandboxAllowPointerLock
  , sandboxAllowForms
  , sandboxAllowSameOrigin
  , sandboxAllowTopNavigationByUserActivation
  , sandboxAllowTopNavigation
  , sandboxAllowPopups
  , srcdoc
  , srcdoc_
  , typemustmatch
  , typemustmatch_
  , standby
  , standby_
  , declare
  , declare_
  , codetype
  , codetype_
  , codebase
  , codebase_
  , code
  , code_
  , classid
  , classid_
  , archive
  , archive_
  , autocomplete
  , autocomplete_
  , autocompleteImpp
  , autocompleteEmail
  , autocompleteTelExtension
  , autocompleteTelLocalSuffix
  , autocompleteTelLocalPrefix
  , autocompleteTelLocal
  , autocompleteTelAreaCode
  , autocompleteTelNational
  , autocompleteTelCountryCode
  , autocompleteTel
  , autocompletePhoto
  , autocompleteUrl
  , autocompleteSex
  , autocompleteBdayYear
  , autocompleteBdayMonth
  , autocompleteBdayDay
  , autocompleteBday
  , autocompleteLanguage
  , autocompleteTransactionAmount
  , autocompleteTransactionCurrency
  , autocompleteCcType
  , autocompleteCcCsc
  , autocompleteCcExpYear
  , autocompleteCcExpMonth
  , autocompleteCcExp
  , autocompleteCcNumber
  , autocompleteCcFamilyName
  , autocompleteCcAdditionalName
  , autocompleteCcGivenName
  , autocompleteCcName
  , autocompletePostalCode
  , autocompleteCountryName
  , autocompleteCountry
  , autocompleteAddressLevel1
  , autocompleteAddressLevel2
  , autocompleteAddressLevel3
  , autocompleteAddressLevel4
  , autocompleteAddressLine3
  , autocompleteAddressLine2
  , autocompleteAddressLine1
  , autocompleteStreetAddress
  , autocompleteOrganization
  , autocompleteOneTimeCode
  , autocompleteCurrentPassword
  , autocompleteNewPassword
  , autocompleteUsername
  , autocompleteOrganizationTitle
  , autocompleteNickname
  , autocompleteHonorificSuffix
  , autocompleteFamilyName
  , autocompleteAdditionalName
  , autocompleteGivenName
  , autocompleteHonorificPrefix
  , autocompleteName
  , autocompleteOn
  , autocompleteOff
  , autocompletePager
  , autocompleteFax
  , autocompleteMobile
  , autocompleteWork
  , autocompleteHome
  , autocompleteBilling
  , autocompleteShipping
  , autocompleteSection
  , form
  , form_
  , xdata
  , xdata_
  , muted
  , muted_
  , controls
  , controls_
  , autoplay
  , autoplay_
  , loop
  , loop_
  , preload
  , preload_
  , preloadMetadata
  , preloadNone
  , preloadAuto
  , playsinline
  , playsinline_
  , poster
  , poster_
  , default
  , default_
  , label
  , label_
  , srclang
  , srclang_
  , kind
  , kind_
  , kindMetadata
  , kindChapters
  , kindDescriptions
  , kindCaptions
  , kindSubtitles
  , valign
  , valign_
  , charoff
  , charoff_
  , char
  , char_
  , span
  , span_
  , nowrap
  , nowrap_
  , bgcolor
  , bgcolor_
  , scope
  , scope_
  , scopeAuto
  , scopeColgroup
  , scopeRowgroup
  , scopeCol
  , scopeRow
  , axis
  , axis_
  , abbr
  , abbr_
  , headers
  , headers_
  , rowspan
  , rowspan_
  , colspan
  , colspan_
  , accept
  , accept_
  , formnovalidate
  , formnovalidate_
  , novalidate
  , novalidate_
  , formtarget
  , formtarget_
  , formenctype
  , formenctype_
  , enctype
  , enctype_
  , enctypeTextPlain
  , enctypeMultipartFormData
  , enctypeApplicationXWwwFormUrlencoded
  , formmethod
  , formmethod_
  , formmethodDialog
  , formmethodPost
  , formmethodGet
  , method
  , method_
  , methodDialog
  , methodPost
  , methodGet
  , formaction
  , formaction_
  , action
  , action_
  , acceptCharset
  , acceptCharset_
  , for
  , for_
  , capture
  , capture_
  , minlength
  , minlength_
  , maxlength
  , maxlength_
  , dirname
  , dirname_
  , placeholder
  , placeholder_
  , list
  , list_
  , step
  , step_
  , max
  , max_
  , min
  , min_
  , pattern
  , pattern_
  , multiple
  , multiple_
  , required
  , required_
  , readonly
  , readonly_
  , size
  , size_
  , checked
  , checked_
  , selected
  , selected_
  , wrap
  , wrap_
  , wrapHard
  , wrapSoft
  , rows
  , rows_
  , cols
  , cols_
  , optimum
  , optimum_
  , high
  , high_
  , low
  , low_
  , open
  , open_
  , event
  , event_
  , language
  , language_
  , defer
  , defer_
  , async
  , async_
  , nomodule
  , nomodule_
  , shadowrootserializable
  , shadowrootserializable_
  , shadowrootclonable
  , shadowrootclonable_
  , shadowrootdelegatesfocus
  , shadowrootdelegatesfocus_
  , shadowrootmode
  , shadowrootmode_
  , shadowrootmodeClosed
  , shadowrootmodeOpen
  , profile
  , profile_
  , version
  , version_
  , manifest
  , manifest_
  , rules
  , rules_
  , frame
  , frame_
  , cellspacing
  , cellspacing_
  , cellpadding
  , cellpadding_
  , bordercolor
  , bordercolor_
  , summary
  , summary_
  , datapagesize
  , datapagesize_
  , vlink
  , vlink_
  , topmargin
  , topmargin_
  , text
  , text_
  , rightmargin
  , rightmargin_
  , link
  , link_
  , leftmargin
  , leftmargin_
  , bottommargin
  , bottommargin_
  , alink
  , alink_
  , clear
  , clear_
  , noshade
  , noshade_
  , truespeed
  , truespeed_
  , direction
  , direction_
  , behavior
  , behavior_
  , ariaValuetext
  , ariaValuetext_
  , ariaValuenow
  , ariaValuenow_
  , ariaValuemin
  , ariaValuemin_
  , ariaValuemax
  , ariaValuemax_
  , ariaSort
  , ariaSort_
  , ariaSetsize
  , ariaSetsize_
  , ariaSelected
  , ariaSelected_
  , ariaRowspan
  , ariaRowspan_
  , ariaRowindextext
  , ariaRowindextext_
  , ariaRowindex
  , ariaRowindex_
  , ariaRowcount
  , ariaRowcount_
  , ariaRoledescription
  , ariaRoledescription_
  , ariaRequired
  , ariaRequired_
  , ariaReadonly
  , ariaReadonly_
  , ariaPressed
  , ariaPressed_
  , ariaPosinset
  , ariaPosinset_
  , ariaPlaceholder
  , ariaPlaceholder_
  , ariaOwns
  , ariaOwns_
  , ariaOrientation
  , ariaOrientation_
  , ariaMultiselectable
  , ariaMultiselectable_
  , ariaMultiline
  , ariaMultiline_
  , ariaModal
  , ariaModal_
  , ariaLive
  , ariaLive_
  , ariaLevel
  , ariaLevel_
  , ariaLabelledby
  , ariaLabelledby_
  , ariaLabel
  , ariaLabel_
  , ariaKeyshortcuts
  , ariaKeyshortcuts_
  , ariaInvalid
  , ariaInvalid_
  , ariaHidden
  , ariaHidden_
  , ariaHaspopup
  , ariaHaspopup_
  , ariaFlowto
  , ariaFlowto_
  , ariaExpanded
  , ariaExpanded_
  , ariaErrormessage
  , ariaErrormessage_
  , ariaDisabled
  , ariaDisabled_
  , ariaDetails
  , ariaDetails_
  , ariaDescription
  , ariaDescription_
  , ariaDescribedby
  , ariaDescribedby_
  , ariaCurrent
  , ariaCurrent_
  , ariaControls
  , ariaControls_
  , ariaColspan
  , ariaColspan_
  , ariaColindextext
  , ariaColindextext_
  , ariaColindex
  , ariaColindex_
  , ariaColcount
  , ariaColcount_
  , ariaChecked
  , ariaChecked_
  , ariaBusy
  , ariaBusy_
  , ariaBrailleroledescription
  , ariaBrailleroledescription_
  , ariaBraillelabel
  , ariaBraillelabel_
  , ariaAutocomplete
  , ariaAutocomplete_
  , ariaAtomic
  , ariaAtomic_
  , ariaActivedescendant
  , ariaActivedescendant_
  , role
  , role_
  ) where

import Control.Applicative (pure, class Applicative) as Applicative
import Control.Category ((<<<))
import Data.Functor (map, class Functor) as Functor
import Deku.DOM.Combinators (unset) as Combinators
import Deku.Attribute as Deku.Attribute

tabindex
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (tabindex :: String | r))
tabindex = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "tabindex")

tabindex_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (tabindex :: String | r))
tabindex_ = tabindex <<< Applicative.pure

nonce
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (nonce :: String | r))
nonce = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "nonce")

nonce_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (nonce :: String | r))
nonce_ = nonce <<< Applicative.pure

slot
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (slot :: String | r))
slot = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "slot")

slot_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (slot :: String | r))
slot_ = slot <<< Applicative.pure

id :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (id :: String | r))
id = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "id")

id_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (id :: String | r))
id_ = id <<< Applicative.pure

klass
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (klass :: String | r))
klass = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "class")

klass_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (klass :: String | r))
klass_ = klass <<< Applicative.pure

popovertargetaction
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (popovertargetaction :: String | r))
popovertargetaction = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "popovertargetaction")

popovertargetaction_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (popovertargetaction :: String | r))
popovertargetaction_ = popovertargetaction <<< Applicative.pure

popovertargetactionHide
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (popovertargetaction :: String | r))
popovertargetactionHide = popovertargetaction_ "hide"

popovertargetactionShow
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (popovertargetaction :: String | r))
popovertargetactionShow = popovertargetaction_ "show"

popovertargetactionToggle
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (popovertargetaction :: String | r))
popovertargetactionToggle = popovertargetaction_ "toggle"

popovertarget
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (popovertarget :: String | r))
popovertarget = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "popovertarget")

popovertarget_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (popovertarget :: String | r))
popovertarget_ = popovertarget <<< Applicative.pure

popover
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (popover :: String | r))
popover = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "popover")

popover_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (popover :: String | r))
popover_ = popover <<< Applicative.pure

popoverManual
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (popover :: String | r))
popoverManual = popover_ "manual"

popoverAuto
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (popover :: String | r))
popoverAuto = popover_ "auto"

draggable
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (draggable :: String | r))
draggable = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "draggable")

draggable_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (draggable :: String | r))
draggable_ = draggable <<< Applicative.pure

draggableFalse
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (draggable :: String | r))
draggableFalse = draggable_ "false"

draggableTrue
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (draggable :: String | r))
draggableTrue = draggable_ "true"

enterkeyhint
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (enterkeyhint :: String | r))
enterkeyhint = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "enterkeyhint")

enterkeyhint_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (enterkeyhint :: String | r))
enterkeyhint_ = enterkeyhint <<< Applicative.pure

enterkeyhintSend
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (enterkeyhint :: String | r))
enterkeyhintSend = enterkeyhint_ "send"

enterkeyhintSearch
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (enterkeyhint :: String | r))
enterkeyhintSearch = enterkeyhint_ "search"

enterkeyhintPrevious
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (enterkeyhint :: String | r))
enterkeyhintPrevious = enterkeyhint_ "previous"

enterkeyhintNext
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (enterkeyhint :: String | r))
enterkeyhintNext = enterkeyhint_ "next"

enterkeyhintGo
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (enterkeyhint :: String | r))
enterkeyhintGo = enterkeyhint_ "go"

enterkeyhintDone
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (enterkeyhint :: String | r))
enterkeyhintDone = enterkeyhint_ "done"

enterkeyhintEnter
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (enterkeyhint :: String | r))
enterkeyhintEnter = enterkeyhint_ "enter"

inputmode
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (inputmode :: String | r))
inputmode = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "inputmode")

inputmode_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (inputmode :: String | r))
inputmode_ = inputmode <<< Applicative.pure

inputmodeSearch
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (inputmode :: String | r))
inputmodeSearch = inputmode_ "search"

inputmodeDecimal
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (inputmode :: String | r))
inputmodeDecimal = inputmode_ "decimal"

inputmodeNumeric
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (inputmode :: String | r))
inputmodeNumeric = inputmode_ "numeric"

inputmodeEmail
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (inputmode :: String | r))
inputmodeEmail = inputmode_ "email"

inputmodeUrl
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (inputmode :: String | r))
inputmodeUrl = inputmode_ "url"

inputmodeTel
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (inputmode :: String | r))
inputmodeTel = inputmode_ "tel"

inputmodeText
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (inputmode :: String | r))
inputmodeText = inputmode_ "text"

inputmodeNone
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (inputmode :: String | r))
inputmodeNone = inputmode_ "none"

autocapitalize
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (autocapitalize :: String | r))
autocapitalize = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "autocapitalize")

autocapitalize_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (autocapitalize :: String | r))
autocapitalize_ = autocapitalize <<< Applicative.pure

autocapitalizeCharacters
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocapitalize :: String | r))
autocapitalizeCharacters = autocapitalize_ "characters"

autocapitalizeWords
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocapitalize :: String | r))
autocapitalizeWords = autocapitalize_ "words"

autocapitalizeSentences
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocapitalize :: String | r))
autocapitalizeSentences = autocapitalize_ "sentences"

autocapitalizeOn
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocapitalize :: String | r))
autocapitalizeOn = autocapitalize_ "on"

autocapitalizeNone
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocapitalize :: String | r))
autocapitalizeNone = autocapitalize_ "none"

autocapitalizeOff
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocapitalize :: String | r))
autocapitalizeOff = autocapitalize_ "off"

writingsuggestions
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (writingsuggestions :: String | r))
writingsuggestions = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "writingsuggestions")

writingsuggestions_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (writingsuggestions :: String | r))
writingsuggestions_ = writingsuggestions <<< Applicative.pure

writingsuggestionsFalse
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (writingsuggestions :: String | r))
writingsuggestionsFalse = writingsuggestions_ "false"

writingsuggestionsTrue
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (writingsuggestions :: String | r))
writingsuggestionsTrue = writingsuggestions_ "true"

spellcheck
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (spellcheck :: String | r))
spellcheck = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "spellcheck")

spellcheck_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (spellcheck :: String | r))
spellcheck_ = spellcheck <<< Applicative.pure

spellcheckFalse
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (spellcheck :: String | r))
spellcheckFalse = spellcheck_ "false"

spellcheckTrue
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (spellcheck :: String | r))
spellcheckTrue = spellcheck_ "true"

contenteditable
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (contenteditable :: String | r))
contenteditable = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "contenteditable")

contenteditable_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (contenteditable :: String | r))
contenteditable_ = contenteditable <<< Applicative.pure

contenteditablePlaintextOnly
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (contenteditable :: String | r))
contenteditablePlaintextOnly = contenteditable_ "plaintext-only"

contenteditableFalse
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (contenteditable :: String | r))
contenteditableFalse = contenteditable_ "false"

contenteditableTrue
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (contenteditable :: String | r))
contenteditableTrue = contenteditable_ "true"

accesskey
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (accesskey :: String | r))
accesskey = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "accesskey")

accesskey_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (accesskey :: String | r))
accesskey_ = accesskey <<< Applicative.pure

autofocus
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (autofocus :: String | r))
autofocus = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "autofocus")

autofocus_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (autofocus :: String | r))
autofocus_ = autofocus <<< Applicative.pure

hidden
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (hidden :: String | r))
hidden = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "hidden")

hidden_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (hidden :: String | r))
hidden_ = hidden <<< Applicative.pure

hiddenUntilFound
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (hidden :: String | r))
hiddenUntilFound = hidden_ "until-found"

hiddenHidden
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (hidden :: String | r))
hiddenHidden = hidden_ "hidden"

itemprop
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (itemprop :: String | r))
itemprop = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "itemprop")

itemprop_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (itemprop :: String | r))
itemprop_ = itemprop <<< Applicative.pure

itemref
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (itemref :: String | r))
itemref = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "itemref")

itemref_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (itemref :: String | r))
itemref_ = itemref <<< Applicative.pure

itemid
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (itemid :: String | r))
itemid = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "itemid")

itemid_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (itemid :: String | r))
itemid_ = itemid <<< Applicative.pure

itemtype
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (itemtype :: String | r))
itemtype = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "itemtype")

itemtype_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (itemtype :: String | r))
itemtype_ = itemtype <<< Applicative.pure

itemscope
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (itemscope :: String | r))
itemscope = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "itemscope")

itemscope_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (itemscope :: String | r))
itemscope_ = itemscope <<< Applicative.pure

is :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (is :: String | r))
is = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "is")

is_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (is :: String | r))
is_ = is <<< Applicative.pure

title
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (title :: String | r))
title = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "title")

title_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (title :: String | r))
title_ = title <<< Applicative.pure

style
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (style :: String | r))
style = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "style")

style_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (style :: String | r))
style_ = style <<< Applicative.pure

dir
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (dir :: String | r))
dir = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "dir")

dir_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (dir :: String | r))
dir_ = dir <<< Applicative.pure

dirAuto
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (dir :: String | r))
dirAuto = dir_ "auto"

dirRtl :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (dir :: String | r))
dirRtl = dir_ "rtl"

dirLtr :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (dir :: String | r))
dirLtr = dir_ "ltr"

translate
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (translate :: String | r))
translate = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "translate")

translate_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (translate :: String | r))
translate_ = translate <<< Applicative.pure

translateNo
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (translate :: String | r))
translateNo = translate_ "no"

translateYes
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (translate :: String | r))
translateYes = translate_ "yes"

lang
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (lang :: String | r))
lang = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "lang")

lang_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (lang :: String | r))
lang_ = lang <<< Applicative.pure

target
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (target :: String | r))
target = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "target")

target_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (target :: String | r))
target_ = target <<< Applicative.pure

href
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (href :: String | r))
href = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "href")

href_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (href :: String | r))
href_ = href <<< Applicative.pure

urn
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (urn :: String | r))
urn = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "urn")

urn_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (urn :: String | r))
urn_ = urn <<< Applicative.pure

rev
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (rev :: String | r))
rev = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "rev")

rev_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (rev :: String | r))
rev_ = rev <<< Applicative.pure

methods
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (methods :: String | r))
methods = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "methods")

methods_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (methods :: String | r))
methods_ = methods <<< Applicative.pure

charset
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (charset :: String | r))
charset = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "charset")

charset_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (charset :: String | r))
charset_ = charset <<< Applicative.pure

fetchpriority
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (fetchpriority :: String | r))
fetchpriority = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "fetchpriority")

fetchpriority_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (fetchpriority :: String | r))
fetchpriority_ = fetchpriority <<< Applicative.pure

fetchpriorityAuto
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (fetchpriority :: String | r))
fetchpriorityAuto = fetchpriority_ "auto"

fetchpriorityLow
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (fetchpriority :: String | r))
fetchpriorityLow = fetchpriority_ "low"

fetchpriorityHigh
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (fetchpriority :: String | r))
fetchpriorityHigh = fetchpriority_ "high"

disabled
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (disabled :: String | r))
disabled = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "disabled")

disabled_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (disabled :: String | r))
disabled_ = disabled <<< Applicative.pure

color
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (color :: String | r))
color = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "color")

color_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (color :: String | r))
color_ = color <<< Applicative.pure

blocking
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (blocking :: String | r))
blocking = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "blocking")

blocking_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (blocking :: String | r))
blocking_ = blocking <<< Applicative.pure

as :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (as :: String | r))
as = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "as")

as_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (as :: String | r))
as_ = as <<< Applicative.pure

sizes
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (sizes :: String | r))
sizes = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "sizes")

sizes_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (sizes :: String | r))
sizes_ = sizes <<< Applicative.pure

imagesizes
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (imagesizes :: String | r))
imagesizes = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "imagesizes")

imagesizes_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (imagesizes :: String | r))
imagesizes_ = imagesizes <<< Applicative.pure

imagesrcset
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (imagesrcset :: String | r))
imagesrcset = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "imagesrcset")

imagesrcset_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (imagesrcset :: String | r))
imagesrcset_ = imagesrcset <<< Applicative.pure

referrerpolicy
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (referrerpolicy :: String | r))
referrerpolicy = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "referrerpolicy")

referrerpolicy_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (referrerpolicy :: String | r))
referrerpolicy_ = referrerpolicy <<< Applicative.pure

xtype
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (xtype :: String | r))
xtype = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "type")

xtype_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (xtype :: String | r))
xtype_ = xtype <<< Applicative.pure

xtypeButton
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeButton = xtype_ "button"

xtypeReset
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeReset = xtype_ "reset"

xtypeSubmit
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeSubmit = xtype_ "submit"

xtypeImage
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeImage = xtype_ "image"

xtypeFile
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeFile = xtype_ "file"

xtypeRadio
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeRadio = xtype_ "radio"

xtypeCheckbox
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeCheckbox = xtype_ "checkbox"

xtypeColor
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeColor = xtype_ "color"

xtypeRange
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeRange = xtype_ "range"

xtypeNumber
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeNumber = xtype_ "number"

xtypeDatetimeLocal
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeDatetimeLocal = xtype_ "datetime-local"

xtypeTime
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeTime = xtype_ "time"

xtypeWeek
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeWeek = xtype_ "week"

xtypeMonth
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeMonth = xtype_ "month"

xtypeDate
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeDate = xtype_ "date"

xtypePassword
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypePassword = xtype_ "password"

xtypeEmail
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeEmail = xtype_ "email"

xtypeUrl
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeUrl = xtype_ "url"

xtypeTel
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeTel = xtype_ "tel"

xtypeSearch
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeSearch = xtype_ "search"

xtypeText
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeText = xtype_ "text"

xtypeHidden
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeHidden = xtype_ "hidden"

xtypeUpperI
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeUpperI = xtype_ "I"

xtypeLowerI
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeLowerI = xtype_ "i"

xtypeUpperA
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeUpperA = xtype_ "A"

xtypeLowerA
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtypeLowerA = xtype_ "a"

xtype1
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (xtype :: String | r))
xtype1 = xtype_ "1"

hreflang
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (hreflang :: String | r))
hreflang = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "hreflang")

hreflang_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (hreflang :: String | r))
hreflang_ = hreflang <<< Applicative.pure

integrity
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (integrity :: String | r))
integrity = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "integrity")

integrity_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (integrity :: String | r))
integrity_ = integrity <<< Applicative.pure

media
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (media :: String | r))
media = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "media")

media_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (media :: String | r))
media_ = media <<< Applicative.pure

crossorigin
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (crossorigin :: String | r))
crossorigin = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "crossorigin")

crossorigin_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (crossorigin :: String | r))
crossorigin_ = crossorigin <<< Applicative.pure

crossoriginUseCredentials
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (crossorigin :: String | r))
crossoriginUseCredentials = crossorigin_ "use-credentials"

crossoriginAnonymous
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (crossorigin :: String | r))
crossoriginAnonymous = crossorigin_ "anonymous"

rel
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (rel :: String | r))
rel = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "rel")

rel_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (rel :: String | r))
rel_ = rel <<< Applicative.pure

relPrev
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relPrev = rel_ "prev"

relNext
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relNext = rel_ "next"

relTermsOfService
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relTermsOfService = rel_ "terms-of-service"

relTag :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relTag = rel_ "tag"

relStylesheet
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relStylesheet = rel_ "stylesheet"

relSearch
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relSearch = rel_ "search"

relPrivacyPolicy
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relPrivacyPolicy = rel_ "privacy-policy"

relPreload
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relPreload = rel_ "preload"

relPrefetch
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relPrefetch = rel_ "prefetch"

relPreconnect
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relPreconnect = rel_ "preconnect"

relPingback
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relPingback = rel_ "pingback"

relOpener
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relOpener = rel_ "opener"

relNoreferrer
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relNoreferrer = rel_ "noreferrer"

relNoopener
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relNoopener = rel_ "noopener"

relNofollow
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relNofollow = rel_ "nofollow"

relModulepreload
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relModulepreload = rel_ "modulepreload"

relManifest
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relManifest = rel_ "manifest"

relLicense
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relLicense = rel_ "license"

relIcon
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relIcon = rel_ "icon"

relHelp
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relHelp = rel_ "help"

relExternal
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relExternal = rel_ "external"

relExpect
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relExpect = rel_ "expect"

relDnsPrefetch
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relDnsPrefetch = rel_ "dns-prefetch"

relCanonical
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relCanonical = rel_ "canonical"

relBookmark
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relBookmark = rel_ "bookmark"

relAuthor
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relAuthor = rel_ "author"

relAlternate
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (rel :: String | r))
relAlternate = rel_ "alternate"

scheme
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (scheme :: String | r))
scheme = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "scheme")

scheme_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (scheme :: String | r))
scheme_ = scheme <<< Applicative.pure

httpEquiv
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (httpEquiv :: String | r))
httpEquiv = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "http-equiv")

httpEquiv_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (httpEquiv :: String | r))
httpEquiv_ = httpEquiv <<< Applicative.pure

httpEquivContentSecurityPolicy
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (httpEquiv :: String | r))
httpEquivContentSecurityPolicy = httpEquiv_ "content-security-policy"

httpEquivXUaCompatible
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (httpEquiv :: String | r))
httpEquivXUaCompatible = httpEquiv_ "x-ua-compatible"

httpEquivSetCookie
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (httpEquiv :: String | r))
httpEquivSetCookie = httpEquiv_ "set-cookie"

httpEquivRefresh
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (httpEquiv :: String | r))
httpEquivRefresh = httpEquiv_ "refresh"

httpEquivDefaultStyle
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (httpEquiv :: String | r))
httpEquivDefaultStyle = httpEquiv_ "default-style"

httpEquivContentType
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (httpEquiv :: String | r))
httpEquivContentType = httpEquiv_ "content-type"

httpEquivContentLanguage
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (httpEquiv :: String | r))
httpEquivContentLanguage = httpEquiv_ "content-language"

name
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (name :: String | r))
name = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "name")

name_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (name :: String | r))
name_ = name <<< Applicative.pure

nameColorScheme
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (name :: String | r))
nameColorScheme = name_ "color-scheme"

nameThemeColor
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (name :: String | r))
nameThemeColor = name_ "theme-color"

nameReferrer
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (name :: String | r))
nameReferrer = name_ "referrer"

nameKeywords
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (name :: String | r))
nameKeywords = name_ "keywords"

nameGenerator
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (name :: String | r))
nameGenerator = name_ "generator"

nameDescription
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (name :: String | r))
nameDescription = name_ "description"

nameAuthor
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (name :: String | r))
nameAuthor = name_ "author"

nameApplicationName
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (name :: String | r))
nameApplicationName = name_ "application-name"

content
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (content :: String | r))
content = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "content")

content_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (content :: String | r))
content_ = content <<< Applicative.pure

cite
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (cite :: String | r))
cite = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "cite")

cite_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (cite :: String | r))
cite_ = cite <<< Applicative.pure

compact
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (compact :: String | r))
compact = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "compact")

compact_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (compact :: String | r))
compact_ = compact <<< Applicative.pure

start
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (start :: String | r))
start = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "start")

start_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (start :: String | r))
start_ = start <<< Applicative.pure

reversed
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (reversed :: String | r))
reversed = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "reversed")

reversed_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (reversed :: String | r))
reversed_ = reversed <<< Applicative.pure

value
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (value :: String | r))
value = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "value")

value_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (value :: String | r))
value_ = value <<< Applicative.pure

datetime
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (datetime :: String | r))
datetime = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "datetime")

datetime_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (datetime :: String | r))
datetime_ = datetime <<< Applicative.pure

shape
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (shape :: String | r))
shape = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "shape")

shape_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (shape :: String | r))
shape_ = shape <<< Applicative.pure

shapeRectangleState
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (shape :: String | r))
shapeRectangleState = shape_ "rectangle state"

shapePolygonState
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (shape :: String | r))
shapePolygonState = shape_ "polygon state"

shapeDefaultState
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (shape :: String | r))
shapeDefaultState = shape_ "default state"

shapeCircleState
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (shape :: String | r))
shapeCircleState = shape_ "circle state"

coords
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (coords :: String | r))
coords = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "coords")

coords_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (coords :: String | r))
coords_ = coords <<< Applicative.pure

ping
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (ping :: String | r))
ping = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "ping")

ping_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ping :: String | r))
ping_ = ping <<< Applicative.pure

download
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (download :: String | r))
download = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "download")

download_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (download :: String | r))
download_ = download <<< Applicative.pure

nohref
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (nohref :: String | r))
nohref = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "nohref")

nohref_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (nohref :: String | r))
nohref_ = nohref <<< Applicative.pure

alt
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (alt :: String | r))
alt = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "alt")

alt_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (alt :: String | r))
alt_ = alt <<< Applicative.pure

height
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (height :: String | r))
height = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "height")

height_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (height :: String | r))
height_ = height <<< Applicative.pure

width
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (width :: String | r))
width = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "width")

width_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (width :: String | r))
width_ = width <<< Applicative.pure

src
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (src :: String | r))
src = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "src")

src_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (src :: String | r))
src_ = src <<< Applicative.pure

srcset
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (srcset :: String | r))
srcset = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "srcset")

srcset_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (srcset :: String | r))
srcset_ = srcset <<< Applicative.pure

vspace
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (vspace :: String | r))
vspace = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "vspace")

vspace_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (vspace :: String | r))
vspace_ = vspace <<< Applicative.pure

hspace
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (hspace :: String | r))
hspace = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "hspace")

hspace_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (hspace :: String | r))
hspace_ = hspace <<< Applicative.pure

border
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (border :: String | r))
border = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "border")

border_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (border :: String | r))
border_ = border <<< Applicative.pure

align
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (align :: String | r))
align = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "align")

align_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (align :: String | r))
align_ = align <<< Applicative.pure

lowsrc
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (lowsrc :: String | r))
lowsrc = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "lowsrc")

lowsrc_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (lowsrc :: String | r))
lowsrc_ = lowsrc <<< Applicative.pure

longdesc
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (longdesc :: String | r))
longdesc = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "longdesc")

longdesc_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (longdesc :: String | r))
longdesc_ = longdesc <<< Applicative.pure

usemap
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (usemap :: String | r))
usemap = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "usemap")

usemap_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (usemap :: String | r))
usemap_ = usemap <<< Applicative.pure

ismap
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (ismap :: String | r))
ismap = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "ismap")

ismap_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ismap :: String | r))
ismap_ = ismap <<< Applicative.pure

loading
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (loading :: String | r))
loading = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "loading")

loading_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (loading :: String | r))
loading_ = loading <<< Applicative.pure

loadingEager
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (loading :: String | r))
loadingEager = loading_ "eager"

loadingLazy
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (loading :: String | r))
loadingLazy = loading_ "lazy"

decoding
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (decoding :: String | r))
decoding = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "decoding")

decoding_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (decoding :: String | r))
decoding_ = decoding <<< Applicative.pure

decodingAuto
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (decoding :: String | r))
decodingAuto = decoding_ "auto"

decodingAsync
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (decoding :: String | r))
decodingAsync = decoding_ "async"

decodingSync
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (decoding :: String | r))
decodingSync = decoding_ "sync"

scrolling
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (scrolling :: String | r))
scrolling = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "scrolling")

scrolling_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (scrolling :: String | r))
scrolling_ = scrolling <<< Applicative.pure

marginwidth
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (marginwidth :: String | r))
marginwidth = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "marginwidth")

marginwidth_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (marginwidth :: String | r))
marginwidth_ = marginwidth <<< Applicative.pure

marginheight
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (marginheight :: String | r))
marginheight = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "marginheight")

marginheight_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (marginheight :: String | r))
marginheight_ = marginheight <<< Applicative.pure

framespacing
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (framespacing :: String | r))
framespacing = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "framespacing")

framespacing_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (framespacing :: String | r))
framespacing_ = framespacing <<< Applicative.pure

frameborder
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (frameborder :: String | r))
frameborder = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "frameborder")

frameborder_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (frameborder :: String | r))
frameborder_ = frameborder <<< Applicative.pure

allowtransparency
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (allowtransparency :: String | r))
allowtransparency = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "allowtransparency")

allowtransparency_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (allowtransparency :: String | r))
allowtransparency_ = allowtransparency <<< Applicative.pure

allowfullscreen
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (allowfullscreen :: String | r))
allowfullscreen = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "allowfullscreen")

allowfullscreen_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (allowfullscreen :: String | r))
allowfullscreen_ = allowfullscreen <<< Applicative.pure

allow
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (allow :: String | r))
allow = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "allow")

allow_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (allow :: String | r))
allow_ = allow <<< Applicative.pure

sandbox
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (sandbox :: String | r))
sandbox = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "sandbox")

sandbox_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (sandbox :: String | r))
sandbox_ = sandbox <<< Applicative.pure

sandboxAllowTopNavigationToCustomProtocols
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (sandbox :: String | r))
sandboxAllowTopNavigationToCustomProtocols = sandbox_ "allow-top-navigation-to-custom-protocols"

sandboxAllowDownloads
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (sandbox :: String | r))
sandboxAllowDownloads = sandbox_ "allow-downloads"

sandboxAllowPresentation
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (sandbox :: String | r))
sandboxAllowPresentation = sandbox_ "allow-presentation"

sandboxAllowOrientationLock
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (sandbox :: String | r))
sandboxAllowOrientationLock = sandbox_ "allow-orientation-lock"

sandboxAllowModals
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (sandbox :: String | r))
sandboxAllowModals = sandbox_ "allow-modals"

sandboxAllowPopupsToEscapeSandbox
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (sandbox :: String | r))
sandboxAllowPopupsToEscapeSandbox = sandbox_ "allow-popups-to-escape-sandbox"

sandboxAllowScripts
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (sandbox :: String | r))
sandboxAllowScripts = sandbox_ "allow-scripts"

sandboxAllowPointerLock
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (sandbox :: String | r))
sandboxAllowPointerLock = sandbox_ "allow-pointer-lock"

sandboxAllowForms
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (sandbox :: String | r))
sandboxAllowForms = sandbox_ "allow-forms"

sandboxAllowSameOrigin
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (sandbox :: String | r))
sandboxAllowSameOrigin = sandbox_ "allow-same-origin"

sandboxAllowTopNavigationByUserActivation
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (sandbox :: String | r))
sandboxAllowTopNavigationByUserActivation = sandbox_ "allow-top-navigation-by-user-activation"

sandboxAllowTopNavigation
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (sandbox :: String | r))
sandboxAllowTopNavigation = sandbox_ "allow-top-navigation"

sandboxAllowPopups
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (sandbox :: String | r))
sandboxAllowPopups = sandbox_ "allow-popups"

srcdoc
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (srcdoc :: String | r))
srcdoc = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "srcdoc")

srcdoc_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (srcdoc :: String | r))
srcdoc_ = srcdoc <<< Applicative.pure

typemustmatch
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (typemustmatch :: String | r))
typemustmatch = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "typemustmatch")

typemustmatch_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (typemustmatch :: String | r))
typemustmatch_ = typemustmatch <<< Applicative.pure

standby
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (standby :: String | r))
standby = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "standby")

standby_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (standby :: String | r))
standby_ = standby <<< Applicative.pure

declare
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (declare :: String | r))
declare = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "declare")

declare_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (declare :: String | r))
declare_ = declare <<< Applicative.pure

codetype
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (codetype :: String | r))
codetype = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "codetype")

codetype_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (codetype :: String | r))
codetype_ = codetype <<< Applicative.pure

codebase
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (codebase :: String | r))
codebase = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "codebase")

codebase_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (codebase :: String | r))
codebase_ = codebase <<< Applicative.pure

code
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (code :: String | r))
code = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "code")

code_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (code :: String | r))
code_ = code <<< Applicative.pure

classid
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (classid :: String | r))
classid = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "classid")

classid_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (classid :: String | r))
classid_ = classid <<< Applicative.pure

archive
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (archive :: String | r))
archive = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "archive")

archive_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (archive :: String | r))
archive_ = archive <<< Applicative.pure

autocomplete
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocomplete = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "autocomplete")

autocomplete_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocomplete_ = autocomplete <<< Applicative.pure

autocompleteImpp
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteImpp = autocomplete_ "impp"

autocompleteEmail
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteEmail = autocomplete_ "email"

autocompleteTelExtension
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteTelExtension = autocomplete_ "tel-extension"

autocompleteTelLocalSuffix
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteTelLocalSuffix = autocomplete_ "tel-local-suffix"

autocompleteTelLocalPrefix
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteTelLocalPrefix = autocomplete_ "tel-local-prefix"

autocompleteTelLocal
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteTelLocal = autocomplete_ "tel-local"

autocompleteTelAreaCode
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteTelAreaCode = autocomplete_ "tel-area-code"

autocompleteTelNational
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteTelNational = autocomplete_ "tel-national"

autocompleteTelCountryCode
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteTelCountryCode = autocomplete_ "tel-country-code"

autocompleteTel
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteTel = autocomplete_ "tel"

autocompletePhoto
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompletePhoto = autocomplete_ "photo"

autocompleteUrl
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteUrl = autocomplete_ "url"

autocompleteSex
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteSex = autocomplete_ "sex"

autocompleteBdayYear
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteBdayYear = autocomplete_ "bday-year"

autocompleteBdayMonth
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteBdayMonth = autocomplete_ "bday-month"

autocompleteBdayDay
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteBdayDay = autocomplete_ "bday-day"

autocompleteBday
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteBday = autocomplete_ "bday"

autocompleteLanguage
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteLanguage = autocomplete_ "language"

autocompleteTransactionAmount
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteTransactionAmount = autocomplete_ "transaction-amount"

autocompleteTransactionCurrency
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteTransactionCurrency = autocomplete_ "transaction-currency"

autocompleteCcType
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteCcType = autocomplete_ "cc-type"

autocompleteCcCsc
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteCcCsc = autocomplete_ "cc-csc"

autocompleteCcExpYear
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteCcExpYear = autocomplete_ "cc-exp-year"

autocompleteCcExpMonth
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteCcExpMonth = autocomplete_ "cc-exp-month"

autocompleteCcExp
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteCcExp = autocomplete_ "cc-exp"

autocompleteCcNumber
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteCcNumber = autocomplete_ "cc-number"

autocompleteCcFamilyName
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteCcFamilyName = autocomplete_ "cc-family-name"

autocompleteCcAdditionalName
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteCcAdditionalName = autocomplete_ "cc-additional-name"

autocompleteCcGivenName
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteCcGivenName = autocomplete_ "cc-given-name"

autocompleteCcName
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteCcName = autocomplete_ "cc-name"

autocompletePostalCode
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompletePostalCode = autocomplete_ "postal-code"

autocompleteCountryName
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteCountryName = autocomplete_ "country-name"

autocompleteCountry
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteCountry = autocomplete_ "country"

autocompleteAddressLevel1
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteAddressLevel1 = autocomplete_ "address-level1"

autocompleteAddressLevel2
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteAddressLevel2 = autocomplete_ "address-level2"

autocompleteAddressLevel3
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteAddressLevel3 = autocomplete_ "address-level3"

autocompleteAddressLevel4
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteAddressLevel4 = autocomplete_ "address-level4"

autocompleteAddressLine3
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteAddressLine3 = autocomplete_ "address-line3"

autocompleteAddressLine2
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteAddressLine2 = autocomplete_ "address-line2"

autocompleteAddressLine1
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteAddressLine1 = autocomplete_ "address-line1"

autocompleteStreetAddress
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteStreetAddress = autocomplete_ "street-address"

autocompleteOrganization
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteOrganization = autocomplete_ "organization"

autocompleteOneTimeCode
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteOneTimeCode = autocomplete_ "one-time-code"

autocompleteCurrentPassword
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteCurrentPassword = autocomplete_ "current-password"

autocompleteNewPassword
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteNewPassword = autocomplete_ "new-password"

autocompleteUsername
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteUsername = autocomplete_ "username"

autocompleteOrganizationTitle
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteOrganizationTitle = autocomplete_ "organization-title"

autocompleteNickname
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteNickname = autocomplete_ "nickname"

autocompleteHonorificSuffix
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteHonorificSuffix = autocomplete_ "honorific-suffix"

autocompleteFamilyName
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteFamilyName = autocomplete_ "family-name"

autocompleteAdditionalName
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteAdditionalName = autocomplete_ "additional-name"

autocompleteGivenName
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteGivenName = autocomplete_ "given-name"

autocompleteHonorificPrefix
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteHonorificPrefix = autocomplete_ "honorific-prefix"

autocompleteName
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteName = autocomplete_ "name"

autocompleteOn
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteOn = autocomplete_ "on"

autocompleteOff
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteOff = autocomplete_ "off"

autocompletePager
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompletePager = autocomplete_ "pager"

autocompleteFax
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteFax = autocomplete_ "fax"

autocompleteMobile
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteMobile = autocomplete_ "mobile"

autocompleteWork
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteWork = autocomplete_ "work"

autocompleteHome
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteHome = autocomplete_ "home"

autocompleteBilling
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteBilling = autocomplete_ "billing"

autocompleteShipping
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteShipping = autocomplete_ "shipping"

autocompleteSection
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (autocomplete :: String | r))
autocompleteSection = autocomplete_ "section-"

form
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (form :: String | r))
form = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "form")

form_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (form :: String | r))
form_ = form <<< Applicative.pure

xdata
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (xdata :: String | r))
xdata = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "data")

xdata_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (xdata :: String | r))
xdata_ = xdata <<< Applicative.pure

muted
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (muted :: String | r))
muted = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "muted")

muted_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (muted :: String | r))
muted_ = muted <<< Applicative.pure

controls
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (controls :: String | r))
controls = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "controls")

controls_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (controls :: String | r))
controls_ = controls <<< Applicative.pure

autoplay
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (autoplay :: String | r))
autoplay = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "autoplay")

autoplay_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (autoplay :: String | r))
autoplay_ = autoplay <<< Applicative.pure

loop
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (loop :: String | r))
loop = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "loop")

loop_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (loop :: String | r))
loop_ = loop <<< Applicative.pure

preload
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (preload :: String | r))
preload = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "preload")

preload_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (preload :: String | r))
preload_ = preload <<< Applicative.pure

preloadMetadata
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (preload :: String | r))
preloadMetadata = preload_ "metadata"

preloadNone
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (preload :: String | r))
preloadNone = preload_ "none"

preloadAuto
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (preload :: String | r))
preloadAuto = preload_ "auto"

playsinline
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (playsinline :: String | r))
playsinline = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "playsinline")

playsinline_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (playsinline :: String | r))
playsinline_ = playsinline <<< Applicative.pure

poster
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (poster :: String | r))
poster = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "poster")

poster_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (poster :: String | r))
poster_ = poster <<< Applicative.pure

default
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (default :: String | r))
default = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "default")

default_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (default :: String | r))
default_ = default <<< Applicative.pure

label
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (label :: String | r))
label = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "label")

label_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (label :: String | r))
label_ = label <<< Applicative.pure

srclang
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (srclang :: String | r))
srclang = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "srclang")

srclang_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (srclang :: String | r))
srclang_ = srclang <<< Applicative.pure

kind
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (kind :: String | r))
kind = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "kind")

kind_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (kind :: String | r))
kind_ = kind <<< Applicative.pure

kindMetadata
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (kind :: String | r))
kindMetadata = kind_ "metadata"

kindChapters
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (kind :: String | r))
kindChapters = kind_ "chapters"

kindDescriptions
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (kind :: String | r))
kindDescriptions = kind_ "descriptions"

kindCaptions
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (kind :: String | r))
kindCaptions = kind_ "captions"

kindSubtitles
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (kind :: String | r))
kindSubtitles = kind_ "subtitles"

valign
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (valign :: String | r))
valign = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "valign")

valign_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (valign :: String | r))
valign_ = valign <<< Applicative.pure

charoff
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (charoff :: String | r))
charoff = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "charoff")

charoff_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (charoff :: String | r))
charoff_ = charoff <<< Applicative.pure

char
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (char :: String | r))
char = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "char")

char_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (char :: String | r))
char_ = char <<< Applicative.pure

span
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (span :: String | r))
span = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "span")

span_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (span :: String | r))
span_ = span <<< Applicative.pure

nowrap
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (nowrap :: String | r))
nowrap = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "nowrap")

nowrap_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (nowrap :: String | r))
nowrap_ = nowrap <<< Applicative.pure

bgcolor
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (bgcolor :: String | r))
bgcolor = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "bgcolor")

bgcolor_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (bgcolor :: String | r))
bgcolor_ = bgcolor <<< Applicative.pure

scope
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (scope :: String | r))
scope = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "scope")

scope_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (scope :: String | r))
scope_ = scope <<< Applicative.pure

scopeAuto
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (scope :: String | r))
scopeAuto = scope_ "auto"

scopeColgroup
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (scope :: String | r))
scopeColgroup = scope_ "colgroup"

scopeRowgroup
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (scope :: String | r))
scopeRowgroup = scope_ "rowgroup"

scopeCol
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (scope :: String | r))
scopeCol = scope_ "col"

scopeRow
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (scope :: String | r))
scopeRow = scope_ "row"

axis
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (axis :: String | r))
axis = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "axis")

axis_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (axis :: String | r))
axis_ = axis <<< Applicative.pure

abbr
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (abbr :: String | r))
abbr = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "abbr")

abbr_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (abbr :: String | r))
abbr_ = abbr <<< Applicative.pure

headers
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (headers :: String | r))
headers = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "headers")

headers_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (headers :: String | r))
headers_ = headers <<< Applicative.pure

rowspan
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (rowspan :: String | r))
rowspan = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "rowspan")

rowspan_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (rowspan :: String | r))
rowspan_ = rowspan <<< Applicative.pure

colspan
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (colspan :: String | r))
colspan = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "colspan")

colspan_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (colspan :: String | r))
colspan_ = colspan <<< Applicative.pure

accept
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (accept :: String | r))
accept = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "accept")

accept_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (accept :: String | r))
accept_ = accept <<< Applicative.pure

formnovalidate
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (formnovalidate :: String | r))
formnovalidate = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "formnovalidate")

formnovalidate_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (formnovalidate :: String | r))
formnovalidate_ = formnovalidate <<< Applicative.pure

novalidate
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (novalidate :: String | r))
novalidate = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "novalidate")

novalidate_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (novalidate :: String | r))
novalidate_ = novalidate <<< Applicative.pure

formtarget
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (formtarget :: String | r))
formtarget = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "formtarget")

formtarget_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (formtarget :: String | r))
formtarget_ = formtarget <<< Applicative.pure

formenctype
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (formenctype :: String | r))
formenctype = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "formenctype")

formenctype_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (formenctype :: String | r))
formenctype_ = formenctype <<< Applicative.pure

enctype
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (enctype :: String | r))
enctype = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "enctype")

enctype_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (enctype :: String | r))
enctype_ = enctype <<< Applicative.pure

enctypeTextPlain
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (enctype :: String | r))
enctypeTextPlain = enctype_ "text/plain"

enctypeMultipartFormData
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (enctype :: String | r))
enctypeMultipartFormData = enctype_ "multipart/form-data"

enctypeApplicationXWwwFormUrlencoded
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (enctype :: String | r))
enctypeApplicationXWwwFormUrlencoded = enctype_ "application/x-www-form-urlencoded"

formmethod
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (formmethod :: String | r))
formmethod = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "formmethod")

formmethod_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (formmethod :: String | r))
formmethod_ = formmethod <<< Applicative.pure

formmethodDialog
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (formmethod :: String | r))
formmethodDialog = formmethod_ "dialog"

formmethodPost
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (formmethod :: String | r))
formmethodPost = formmethod_ "post"

formmethodGet
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (formmethod :: String | r))
formmethodGet = formmethod_ "get"

method
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (method :: String | r))
method = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "method")

method_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (method :: String | r))
method_ = method <<< Applicative.pure

methodDialog
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (method :: String | r))
methodDialog = method_ "dialog"

methodPost
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (method :: String | r))
methodPost = method_ "post"

methodGet
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (method :: String | r))
methodGet = method_ "get"

formaction
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (formaction :: String | r))
formaction = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "formaction")

formaction_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (formaction :: String | r))
formaction_ = formaction <<< Applicative.pure

action
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (action :: String | r))
action = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "action")

action_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (action :: String | r))
action_ = action <<< Applicative.pure

acceptCharset
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (acceptCharset :: String | r))
acceptCharset = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "accept-charset")

acceptCharset_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (acceptCharset :: String | r))
acceptCharset_ = acceptCharset <<< Applicative.pure

for
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (for :: String | r))
for = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "for")

for_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (for :: String | r))
for_ = for <<< Applicative.pure

capture
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (capture :: String | r))
capture = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "capture")

capture_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (capture :: String | r))
capture_ = capture <<< Applicative.pure

minlength
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (minlength :: String | r))
minlength = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "minlength")

minlength_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (minlength :: String | r))
minlength_ = minlength <<< Applicative.pure

maxlength
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (maxlength :: String | r))
maxlength = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "maxlength")

maxlength_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (maxlength :: String | r))
maxlength_ = maxlength <<< Applicative.pure

dirname
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (dirname :: String | r))
dirname = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "dirname")

dirname_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (dirname :: String | r))
dirname_ = dirname <<< Applicative.pure

placeholder
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (placeholder :: String | r))
placeholder = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "placeholder")

placeholder_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (placeholder :: String | r))
placeholder_ = placeholder <<< Applicative.pure

list
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (list :: String | r))
list = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "list")

list_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (list :: String | r))
list_ = list <<< Applicative.pure

step
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (step :: String | r))
step = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "step")

step_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (step :: String | r))
step_ = step <<< Applicative.pure

max
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (max :: String | r))
max = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "max")

max_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (max :: String | r))
max_ = max <<< Applicative.pure

min
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (min :: String | r))
min = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "min")

min_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (min :: String | r))
min_ = min <<< Applicative.pure

pattern
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (pattern :: String | r))
pattern = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "pattern")

pattern_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (pattern :: String | r))
pattern_ = pattern <<< Applicative.pure

multiple
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (multiple :: String | r))
multiple = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "multiple")

multiple_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (multiple :: String | r))
multiple_ = multiple <<< Applicative.pure

required
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (required :: String | r))
required = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "required")

required_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (required :: String | r))
required_ = required <<< Applicative.pure

readonly
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (readonly :: String | r))
readonly = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "readonly")

readonly_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (readonly :: String | r))
readonly_ = readonly <<< Applicative.pure

size
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (size :: String | r))
size = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "size")

size_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (size :: String | r))
size_ = size <<< Applicative.pure

checked
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (checked :: String | r))
checked = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "checked")

checked_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (checked :: String | r))
checked_ = checked <<< Applicative.pure

selected
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (selected :: String | r))
selected = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "selected")

selected_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (selected :: String | r))
selected_ = selected <<< Applicative.pure

wrap
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (wrap :: String | r))
wrap = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "wrap")

wrap_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (wrap :: String | r))
wrap_ = wrap <<< Applicative.pure

wrapHard
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (wrap :: String | r))
wrapHard = wrap_ "hard"

wrapSoft
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (wrap :: String | r))
wrapSoft = wrap_ "soft"

rows
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (rows :: String | r))
rows = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "rows")

rows_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (rows :: String | r))
rows_ = rows <<< Applicative.pure

cols
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (cols :: String | r))
cols = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "cols")

cols_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (cols :: String | r))
cols_ = cols <<< Applicative.pure

optimum
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (optimum :: String | r))
optimum = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "optimum")

optimum_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (optimum :: String | r))
optimum_ = optimum <<< Applicative.pure

high
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (high :: String | r))
high = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "high")

high_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (high :: String | r))
high_ = high <<< Applicative.pure

low
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (low :: String | r))
low = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "low")

low_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (low :: String | r))
low_ = low <<< Applicative.pure

open
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (open :: String | r))
open = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "open")

open_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (open :: String | r))
open_ = open <<< Applicative.pure

event
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (event :: String | r))
event = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "event")

event_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (event :: String | r))
event_ = event <<< Applicative.pure

language
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (language :: String | r))
language = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "language")

language_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (language :: String | r))
language_ = language <<< Applicative.pure

defer
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (defer :: String | r))
defer = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "defer")

defer_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (defer :: String | r))
defer_ = defer <<< Applicative.pure

async
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (async :: String | r))
async = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "async")

async_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (async :: String | r))
async_ = async <<< Applicative.pure

nomodule
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (nomodule :: String | r))
nomodule = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "nomodule")

nomodule_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (nomodule :: String | r))
nomodule_ = nomodule <<< Applicative.pure

shadowrootserializable
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (shadowrootserializable :: String | r))
shadowrootserializable = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "shadowrootserializable")

shadowrootserializable_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (shadowrootserializable :: String | r))
shadowrootserializable_ = shadowrootserializable <<< Applicative.pure

shadowrootclonable
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (shadowrootclonable :: String | r))
shadowrootclonable = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "shadowrootclonable")

shadowrootclonable_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (shadowrootclonable :: String | r))
shadowrootclonable_ = shadowrootclonable <<< Applicative.pure

shadowrootdelegatesfocus
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (shadowrootdelegatesfocus :: String | r))
shadowrootdelegatesfocus = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "shadowrootdelegatesfocus")

shadowrootdelegatesfocus_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (shadowrootdelegatesfocus :: String | r))
shadowrootdelegatesfocus_ = shadowrootdelegatesfocus <<< Applicative.pure

shadowrootmode
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (shadowrootmode :: String | r))
shadowrootmode = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "shadowrootmode")

shadowrootmode_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (shadowrootmode :: String | r))
shadowrootmode_ = shadowrootmode <<< Applicative.pure

shadowrootmodeClosed
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (shadowrootmode :: String | r))
shadowrootmodeClosed = shadowrootmode_ "closed"

shadowrootmodeOpen
  :: forall r f
   . Applicative.Applicative f
  => f (Deku.Attribute.Attribute (shadowrootmode :: String | r))
shadowrootmodeOpen = shadowrootmode_ "open"

profile
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (profile :: String | r))
profile = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "profile")

profile_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (profile :: String | r))
profile_ = profile <<< Applicative.pure

version
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (version :: String | r))
version = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "version")

version_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (version :: String | r))
version_ = version <<< Applicative.pure

manifest
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (manifest :: String | r))
manifest = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "manifest")

manifest_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (manifest :: String | r))
manifest_ = manifest <<< Applicative.pure

rules
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (rules :: String | r))
rules = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "rules")

rules_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (rules :: String | r))
rules_ = rules <<< Applicative.pure

frame
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (frame :: String | r))
frame = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "frame")

frame_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (frame :: String | r))
frame_ = frame <<< Applicative.pure

cellspacing
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (cellspacing :: String | r))
cellspacing = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "cellspacing")

cellspacing_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (cellspacing :: String | r))
cellspacing_ = cellspacing <<< Applicative.pure

cellpadding
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (cellpadding :: String | r))
cellpadding = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "cellpadding")

cellpadding_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (cellpadding :: String | r))
cellpadding_ = cellpadding <<< Applicative.pure

bordercolor
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (bordercolor :: String | r))
bordercolor = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "bordercolor")

bordercolor_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (bordercolor :: String | r))
bordercolor_ = bordercolor <<< Applicative.pure

summary
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (summary :: String | r))
summary = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "summary")

summary_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (summary :: String | r))
summary_ = summary <<< Applicative.pure

datapagesize
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (datapagesize :: String | r))
datapagesize = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "datapagesize")

datapagesize_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (datapagesize :: String | r))
datapagesize_ = datapagesize <<< Applicative.pure

vlink
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (vlink :: String | r))
vlink = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "vlink")

vlink_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (vlink :: String | r))
vlink_ = vlink <<< Applicative.pure

topmargin
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (topmargin :: String | r))
topmargin = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "topmargin")

topmargin_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (topmargin :: String | r))
topmargin_ = topmargin <<< Applicative.pure

text
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (text :: String | r))
text = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "text")

text_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (text :: String | r))
text_ = text <<< Applicative.pure

rightmargin
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (rightmargin :: String | r))
rightmargin = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "rightmargin")

rightmargin_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (rightmargin :: String | r))
rightmargin_ = rightmargin <<< Applicative.pure

link
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (link :: String | r))
link = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "link")

link_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (link :: String | r))
link_ = link <<< Applicative.pure

leftmargin
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (leftmargin :: String | r))
leftmargin = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "leftmargin")

leftmargin_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (leftmargin :: String | r))
leftmargin_ = leftmargin <<< Applicative.pure

bottommargin
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (bottommargin :: String | r))
bottommargin = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "bottommargin")

bottommargin_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (bottommargin :: String | r))
bottommargin_ = bottommargin <<< Applicative.pure

alink
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (alink :: String | r))
alink = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "alink")

alink_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (alink :: String | r))
alink_ = alink <<< Applicative.pure

clear
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (clear :: String | r))
clear = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "clear")

clear_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (clear :: String | r))
clear_ = clear <<< Applicative.pure

noshade
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (noshade :: String | r))
noshade = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "noshade")

noshade_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (noshade :: String | r))
noshade_ = noshade <<< Applicative.pure

truespeed
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (truespeed :: String | r))
truespeed = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "truespeed")

truespeed_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (truespeed :: String | r))
truespeed_ = truespeed <<< Applicative.pure

direction
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (direction :: String | r))
direction = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "direction")

direction_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (direction :: String | r))
direction_ = direction <<< Applicative.pure

behavior
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (behavior :: String | r))
behavior = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "behavior")

behavior_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (behavior :: String | r))
behavior_ = behavior <<< Applicative.pure

ariaValuetext
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaValuetext :: String | r))
ariaValuetext = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-valuetext")

ariaValuetext_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaValuetext :: String | r))
ariaValuetext_ = ariaValuetext <<< Applicative.pure

ariaValuenow
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaValuenow :: String | r))
ariaValuenow = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-valuenow")

ariaValuenow_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaValuenow :: String | r))
ariaValuenow_ = ariaValuenow <<< Applicative.pure

ariaValuemin
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaValuemin :: String | r))
ariaValuemin = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-valuemin")

ariaValuemin_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaValuemin :: String | r))
ariaValuemin_ = ariaValuemin <<< Applicative.pure

ariaValuemax
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaValuemax :: String | r))
ariaValuemax = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-valuemax")

ariaValuemax_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaValuemax :: String | r))
ariaValuemax_ = ariaValuemax <<< Applicative.pure

ariaSort
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaSort :: String | r))
ariaSort = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-sort")

ariaSort_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaSort :: String | r))
ariaSort_ = ariaSort <<< Applicative.pure

ariaSetsize
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaSetsize :: String | r))
ariaSetsize = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-setsize")

ariaSetsize_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaSetsize :: String | r))
ariaSetsize_ = ariaSetsize <<< Applicative.pure

ariaSelected
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaSelected :: String | r))
ariaSelected = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-selected")

ariaSelected_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaSelected :: String | r))
ariaSelected_ = ariaSelected <<< Applicative.pure

ariaRowspan
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaRowspan :: String | r))
ariaRowspan = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-rowspan")

ariaRowspan_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaRowspan :: String | r))
ariaRowspan_ = ariaRowspan <<< Applicative.pure

ariaRowindextext
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaRowindextext :: String | r))
ariaRowindextext = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-rowindextext")

ariaRowindextext_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaRowindextext :: String | r))
ariaRowindextext_ = ariaRowindextext <<< Applicative.pure

ariaRowindex
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaRowindex :: String | r))
ariaRowindex = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-rowindex")

ariaRowindex_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaRowindex :: String | r))
ariaRowindex_ = ariaRowindex <<< Applicative.pure

ariaRowcount
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaRowcount :: String | r))
ariaRowcount = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-rowcount")

ariaRowcount_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaRowcount :: String | r))
ariaRowcount_ = ariaRowcount <<< Applicative.pure

ariaRoledescription
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaRoledescription :: String | r))
ariaRoledescription = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-roledescription")

ariaRoledescription_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaRoledescription :: String | r))
ariaRoledescription_ = ariaRoledescription <<< Applicative.pure

ariaRequired
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaRequired :: String | r))
ariaRequired = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-required")

ariaRequired_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaRequired :: String | r))
ariaRequired_ = ariaRequired <<< Applicative.pure

ariaReadonly
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaReadonly :: String | r))
ariaReadonly = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-readonly")

ariaReadonly_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaReadonly :: String | r))
ariaReadonly_ = ariaReadonly <<< Applicative.pure

ariaPressed
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaPressed :: String | r))
ariaPressed = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-pressed")

ariaPressed_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaPressed :: String | r))
ariaPressed_ = ariaPressed <<< Applicative.pure

ariaPosinset
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaPosinset :: String | r))
ariaPosinset = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-posinset")

ariaPosinset_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaPosinset :: String | r))
ariaPosinset_ = ariaPosinset <<< Applicative.pure

ariaPlaceholder
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaPlaceholder :: String | r))
ariaPlaceholder = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-placeholder")

ariaPlaceholder_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaPlaceholder :: String | r))
ariaPlaceholder_ = ariaPlaceholder <<< Applicative.pure

ariaOwns
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaOwns :: String | r))
ariaOwns = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-owns")

ariaOwns_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaOwns :: String | r))
ariaOwns_ = ariaOwns <<< Applicative.pure

ariaOrientation
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaOrientation :: String | r))
ariaOrientation = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-orientation")

ariaOrientation_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaOrientation :: String | r))
ariaOrientation_ = ariaOrientation <<< Applicative.pure

ariaMultiselectable
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaMultiselectable :: String | r))
ariaMultiselectable = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-multiselectable")

ariaMultiselectable_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaMultiselectable :: String | r))
ariaMultiselectable_ = ariaMultiselectable <<< Applicative.pure

ariaMultiline
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaMultiline :: String | r))
ariaMultiline = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-multiline")

ariaMultiline_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaMultiline :: String | r))
ariaMultiline_ = ariaMultiline <<< Applicative.pure

ariaModal
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaModal :: String | r))
ariaModal = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-modal")

ariaModal_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaModal :: String | r))
ariaModal_ = ariaModal <<< Applicative.pure

ariaLive
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaLive :: String | r))
ariaLive = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-live")

ariaLive_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaLive :: String | r))
ariaLive_ = ariaLive <<< Applicative.pure

ariaLevel
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaLevel :: String | r))
ariaLevel = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-level")

ariaLevel_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaLevel :: String | r))
ariaLevel_ = ariaLevel <<< Applicative.pure

ariaLabelledby
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaLabelledby :: String | r))
ariaLabelledby = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-labelledby")

ariaLabelledby_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaLabelledby :: String | r))
ariaLabelledby_ = ariaLabelledby <<< Applicative.pure

ariaLabel
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaLabel :: String | r))
ariaLabel = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-label")

ariaLabel_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaLabel :: String | r))
ariaLabel_ = ariaLabel <<< Applicative.pure

ariaKeyshortcuts
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaKeyshortcuts :: String | r))
ariaKeyshortcuts = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-keyshortcuts")

ariaKeyshortcuts_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaKeyshortcuts :: String | r))
ariaKeyshortcuts_ = ariaKeyshortcuts <<< Applicative.pure

ariaInvalid
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaInvalid :: String | r))
ariaInvalid = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-invalid")

ariaInvalid_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaInvalid :: String | r))
ariaInvalid_ = ariaInvalid <<< Applicative.pure

ariaHidden
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaHidden :: String | r))
ariaHidden = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-hidden")

ariaHidden_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaHidden :: String | r))
ariaHidden_ = ariaHidden <<< Applicative.pure

ariaHaspopup
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaHaspopup :: String | r))
ariaHaspopup = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-haspopup")

ariaHaspopup_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaHaspopup :: String | r))
ariaHaspopup_ = ariaHaspopup <<< Applicative.pure

ariaFlowto
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaFlowto :: String | r))
ariaFlowto = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-flowto")

ariaFlowto_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaFlowto :: String | r))
ariaFlowto_ = ariaFlowto <<< Applicative.pure

ariaExpanded
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaExpanded :: String | r))
ariaExpanded = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-expanded")

ariaExpanded_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaExpanded :: String | r))
ariaExpanded_ = ariaExpanded <<< Applicative.pure

ariaErrormessage
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaErrormessage :: String | r))
ariaErrormessage = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-errormessage")

ariaErrormessage_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaErrormessage :: String | r))
ariaErrormessage_ = ariaErrormessage <<< Applicative.pure

ariaDisabled
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaDisabled :: String | r))
ariaDisabled = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-disabled")

ariaDisabled_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaDisabled :: String | r))
ariaDisabled_ = ariaDisabled <<< Applicative.pure

ariaDetails
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaDetails :: String | r))
ariaDetails = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-details")

ariaDetails_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaDetails :: String | r))
ariaDetails_ = ariaDetails <<< Applicative.pure

ariaDescription
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaDescription :: String | r))
ariaDescription = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-description")

ariaDescription_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaDescription :: String | r))
ariaDescription_ = ariaDescription <<< Applicative.pure

ariaDescribedby
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaDescribedby :: String | r))
ariaDescribedby = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-describedby")

ariaDescribedby_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaDescribedby :: String | r))
ariaDescribedby_ = ariaDescribedby <<< Applicative.pure

ariaCurrent
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaCurrent :: String | r))
ariaCurrent = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-current")

ariaCurrent_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaCurrent :: String | r))
ariaCurrent_ = ariaCurrent <<< Applicative.pure

ariaControls
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaControls :: String | r))
ariaControls = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-controls")

ariaControls_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaControls :: String | r))
ariaControls_ = ariaControls <<< Applicative.pure

ariaColspan
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaColspan :: String | r))
ariaColspan = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-colspan")

ariaColspan_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaColspan :: String | r))
ariaColspan_ = ariaColspan <<< Applicative.pure

ariaColindextext
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaColindextext :: String | r))
ariaColindextext = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-colindextext")

ariaColindextext_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaColindextext :: String | r))
ariaColindextext_ = ariaColindextext <<< Applicative.pure

ariaColindex
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaColindex :: String | r))
ariaColindex = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-colindex")

ariaColindex_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaColindex :: String | r))
ariaColindex_ = ariaColindex <<< Applicative.pure

ariaColcount
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaColcount :: String | r))
ariaColcount = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-colcount")

ariaColcount_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaColcount :: String | r))
ariaColcount_ = ariaColcount <<< Applicative.pure

ariaChecked
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaChecked :: String | r))
ariaChecked = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-checked")

ariaChecked_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaChecked :: String | r))
ariaChecked_ = ariaChecked <<< Applicative.pure

ariaBusy
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaBusy :: String | r))
ariaBusy = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-busy")

ariaBusy_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaBusy :: String | r))
ariaBusy_ = ariaBusy <<< Applicative.pure

ariaBrailleroledescription
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaBrailleroledescription :: String | r))
ariaBrailleroledescription = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-brailleroledescription")

ariaBrailleroledescription_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaBrailleroledescription :: String | r))
ariaBrailleroledescription_ = ariaBrailleroledescription <<< Applicative.pure

ariaBraillelabel
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaBraillelabel :: String | r))
ariaBraillelabel = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-braillelabel")

ariaBraillelabel_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaBraillelabel :: String | r))
ariaBraillelabel_ = ariaBraillelabel <<< Applicative.pure

ariaAutocomplete
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaAutocomplete :: String | r))
ariaAutocomplete = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-autocomplete")

ariaAutocomplete_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaAutocomplete :: String | r))
ariaAutocomplete_ = ariaAutocomplete <<< Applicative.pure

ariaAtomic
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaAtomic :: String | r))
ariaAtomic = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-atomic")

ariaAtomic_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaAtomic :: String | r))
ariaAtomic_ = ariaAtomic <<< Applicative.pure

ariaActivedescendant
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (ariaActivedescendant :: String | r))
ariaActivedescendant = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "aria-activedescendant")

ariaActivedescendant_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ariaActivedescendant :: String | r))
ariaActivedescendant_ = ariaActivedescendant <<< Applicative.pure

role
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (role :: String | r))
role = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "role")

role_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (role :: String | r))
role_ = role <<< Applicative.pure
