-- | This module contains reexports of all the attributes.
-- This module has been automatically generated by running `spago run -p codegen`.
-- Any changes may be overwritten.
module Deku.DOM.SVG.Attributes
  ( module Combinators
  , refY
  , refY_
  , refX
  , refX_
  , xlinkTitle
  , xlinkTitle_
  , xlinkHref
  , xlinkHref_
  , systemLanguage
  , systemLanguage_
  , requiredExtensions
  , requiredExtensions_
  , href
  , href_
  , referrerpolicy
  , referrerpolicy_
  , xtype
  , xtype_
  , hreflang
  , hreflang_
  , rel
  , rel_
  , ping
  , ping_
  , download
  , download_
  , target
  , target_
  , origin
  , origin_
  , rotate
  , rotate_
  , keyPoints
  , keyPoints_
  , accumulate
  , accumulate_
  , additive
  , additive_
  , from
  , from_
  , keySplines
  , keySplines_
  , keyTimes
  , keyTimes_
  , values
  , values_
  , fill
  , fill_
  , repeatDur
  , repeatDur_
  , repeatCount
  , repeatCount_
  , restart
  , restart_
  , max
  , max_
  , min
  , min_
  , end
  , end_
  , dur
  , dur_
  , begin
  , begin_
  , attributeName
  , attributeName_
  , path
  , path_
  , calcMode
  , calcMode_
  , crossorigin
  , crossorigin_
  , y2
  , y2_
  , x2
  , x2_
  , y1
  , y1_
  , x1
  , x1_
  , points
  , points_
  , to
  , to_
  , preserveAspectRatio
  , preserveAspectRatio_
  , viewBox
  , viewBox_
  , lengthAdjust
  , lengthAdjust_
  , textLength
  , textLength_
  , dy
  , dy_
  , dx
  , dx_
  , y
  , y_
  , x
  , x_
  , side
  , side_
  , spacing
  , spacing_
  , method
  , method_
  , startOffset
  , startOffset_
  , style
  , style_
  , klass
  , klass_
  , autofocus
  , autofocus_
  , tabindex
  , tabindex_
  , xmlSpace
  , xmlSpace_
  , lang
  , lang_
  , id
  , id_
  , title
  , title_
  , media
  , media_
  , lightingColor
  , lightingColor_
  , colorInterpolationFilters
  , colorInterpolationFilters_
  , floodOpacity
  , floodOpacity_
  , floodColor
  , floodColor_
  , filter
  , filter_
  , strokeOpacity
  , strokeOpacity_
  , stroke
  , stroke_
  , strokeRepeat
  , strokeRepeat_
  , strokeSize
  , strokeSize_
  , strokePosition
  , strokePosition_
  , strokeOrigin
  , strokeOrigin_
  , strokeImage
  , strokeImage_
  , strokeColor
  , strokeColor_
  , strokeDashJustify
  , strokeDashJustify_
  , strokeDashCorner
  , strokeDashCorner_
  , strokeDashoffset
  , strokeDashoffset_
  , strokeDasharray
  , strokeDasharray_
  , strokeBreak
  , strokeBreak_
  , strokeMiterlimit
  , strokeMiterlimit_
  , strokeLinejoin
  , strokeLinejoin_
  , strokeLinecap
  , strokeLinecap_
  , strokeAlign
  , strokeAlign_
  , strokeWidth
  , strokeWidth_
  , fillOpacity
  , fillOpacity_
  , fillRepeat
  , fillRepeat_
  , fillSize
  , fillSize_
  , fillPosition
  , fillPosition_
  , fillOrigin
  , fillOrigin_
  , fillImage
  , fillImage_
  , fillColor
  , fillColor_
  , fillBreak
  , fillBreak_
  , fillRule
  , fillRule_
  , pointerEvents
  , pointerEvents_
  , imageRendering
  , imageRendering_
  , textRendering
  , textRendering_
  , shapeRendering
  , shapeRendering_
  , colorInterpolation
  , colorInterpolation_
  , paintOrder
  , paintOrder_
  , marker
  , marker_
  , markerEnd
  , markerEnd_
  , markerMid
  , markerMid_
  , markerStart
  , markerStart_
  , textAnchor
  , textAnchor_
  , shapeMargin
  , shapeMargin_
  , shapeSubtract
  , shapeSubtract_
  , shapeInside
  , shapeInside_
  , inlineSize
  , inlineSize_
  , d
  , d_
  , vectorEffect
  , vectorEffect_
  , ry
  , ry_
  , rx
  , rx_
  , r
  , r_
  , cy
  , cy_
  , cx
  , cx_
  , orient
  , orient_
  , markerHeight
  , markerHeight_
  , markerWidth
  , markerWidth_
  , markerUnits
  , markerUnits_
  , spreadMethod
  , spreadMethod_
  , gradientTransform
  , gradientTransform_
  , gradientUnits
  , gradientUnits_
  , fr
  , fr_
  , fy
  , fy_
  , fx
  , fx_
  , stopOpacity
  , stopOpacity_
  , stopColor
  , stopColor_
  , offset
  , offset_
  , height
  , height_
  , width
  , width_
  , patternTransform
  , patternTransform_
  , patternContentUnits
  , patternContentUnits_
  , patternUnits
  , patternUnits_
  , filterRes
  , filterRes_
  , primitiveUnits
  , primitiveUnits_
  , filterUnits
  , filterUnits_
  , xin
  , xin_
  , result
  , result_
  , in2
  , in2_
  , noComposite
  , noComposite_
  , mode
  , mode_
  , exponent
  , exponent_
  , amplitude
  , amplitude_
  , intercept
  , intercept_
  , slope
  , slope_
  , tableValues
  , tableValues_
  , k4
  , k4_
  , k3
  , k3_
  , k2
  , k2_
  , k1
  , k1_
  , operator
  , operator_
  , operatorArithmetic
  , operatorLighter
  , operatorXor
  , operatorAtop
  , operatorOut
  , operatorIn
  , operatorOver
  , preserveAlpha
  , preserveAlpha_
  , kernelUnitLength
  , kernelUnitLength_
  , edgeMode
  , edgeMode_
  , edgeModeMirror
  , edgeModeWrap
  , edgeModeDuplicate
  , targetY
  , targetY_
  , targetX
  , targetX_
  , bias
  , bias_
  , divisor
  , divisor_
  , kernelMatrix
  , kernelMatrix_
  , order
  , order_
  , diffuseConstant
  , diffuseConstant_
  , surfaceScale
  , surfaceScale_
  , yChannelSelector
  , yChannelSelector_
  , xChannelSelector
  , xChannelSelector_
  , scale
  , scale_
  , stdDeviation
  , stdDeviation_
  , radius
  , radius_
  , specularExponent
  , specularExponent_
  , specularConstant
  , specularConstant_
  , stitchTiles
  , stitchTiles_
  , seed
  , seed_
  , numOctaves
  , numOctaves_
  , baseFrequency
  , baseFrequency_
  , elevation
  , elevation_
  , azimuth
  , azimuth_
  , z
  , z_
  , limitingConeAngle
  , limitingConeAngle_
  , pointsAtZ
  , pointsAtZ_
  , pointsAtY
  , pointsAtY_
  , pointsAtX
  , pointsAtX_
  ) where

import Control.Applicative (pure, class Applicative) as Applicative
import Control.Category ((<<<))
import Data.Functor (map, class Functor) as Functor
import Deku.DOM.Combinators (unset) as Combinators
import Deku.Attribute as Deku.Attribute

refY
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (refY :: String | r))
refY = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "refY")

refY_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (refY :: String | r))
refY_ = refY <<< Applicative.pure

refX
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (refX :: String | r))
refX = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "refX")

refX_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (refX :: String | r))
refX_ = refX <<< Applicative.pure

xlinkTitle
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (xlinkTitle :: String | r))
xlinkTitle = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "xlink:title")

xlinkTitle_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (xlinkTitle :: String | r))
xlinkTitle_ = xlinkTitle <<< Applicative.pure

xlinkHref
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (xlinkHref :: String | r))
xlinkHref = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "xlink:href")

xlinkHref_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (xlinkHref :: String | r))
xlinkHref_ = xlinkHref <<< Applicative.pure

systemLanguage
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (systemLanguage :: String | r))
systemLanguage = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "systemLanguage")

systemLanguage_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (systemLanguage :: String | r))
systemLanguage_ = systemLanguage <<< Applicative.pure

requiredExtensions
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (requiredExtensions :: String | r))
requiredExtensions = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "requiredExtensions")

requiredExtensions_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (requiredExtensions :: String | r))
requiredExtensions_ = requiredExtensions <<< Applicative.pure

href
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (href :: String | r))
href = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "href")

href_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (href :: String | r))
href_ = href <<< Applicative.pure

referrerpolicy
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (referrerpolicy :: String | r))
referrerpolicy = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "referrerpolicy")

referrerpolicy_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (referrerpolicy :: String | r))
referrerpolicy_ = referrerpolicy <<< Applicative.pure

xtype
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (xtype :: String | r))
xtype = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "type")

xtype_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (xtype :: String | r))
xtype_ = xtype <<< Applicative.pure

hreflang
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (hreflang :: String | r))
hreflang = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "hreflang")

hreflang_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (hreflang :: String | r))
hreflang_ = hreflang <<< Applicative.pure

rel
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (rel :: String | r))
rel = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "rel")

rel_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (rel :: String | r))
rel_ = rel <<< Applicative.pure

ping
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (ping :: String | r))
ping = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "ping")

ping_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ping :: String | r))
ping_ = ping <<< Applicative.pure

download
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (download :: String | r))
download = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "download")

download_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (download :: String | r))
download_ = download <<< Applicative.pure

target
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (target :: String | r))
target = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "target")

target_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (target :: String | r))
target_ = target <<< Applicative.pure

origin
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (origin :: String | r))
origin = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "origin")

origin_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (origin :: String | r))
origin_ = origin <<< Applicative.pure

rotate
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (rotate :: String | r))
rotate = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "rotate")

rotate_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (rotate :: String | r))
rotate_ = rotate <<< Applicative.pure

keyPoints
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (keyPoints :: String | r))
keyPoints = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "keyPoints")

keyPoints_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (keyPoints :: String | r))
keyPoints_ = keyPoints <<< Applicative.pure

accumulate
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (accumulate :: String | r))
accumulate = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "accumulate")

accumulate_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (accumulate :: String | r))
accumulate_ = accumulate <<< Applicative.pure

additive
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (additive :: String | r))
additive = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "additive")

additive_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (additive :: String | r))
additive_ = additive <<< Applicative.pure

from
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (from :: String | r))
from = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "from")

from_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (from :: String | r))
from_ = from <<< Applicative.pure

keySplines
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (keySplines :: String | r))
keySplines = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "keySplines")

keySplines_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (keySplines :: String | r))
keySplines_ = keySplines <<< Applicative.pure

keyTimes
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (keyTimes :: String | r))
keyTimes = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "keyTimes")

keyTimes_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (keyTimes :: String | r))
keyTimes_ = keyTimes <<< Applicative.pure

values
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (values :: String | r))
values = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "values")

values_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (values :: String | r))
values_ = values <<< Applicative.pure

fill
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (fill :: String | r))
fill = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "fill")

fill_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (fill :: String | r))
fill_ = fill <<< Applicative.pure

repeatDur
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (repeatDur :: String | r))
repeatDur = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "repeatDur")

repeatDur_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (repeatDur :: String | r))
repeatDur_ = repeatDur <<< Applicative.pure

repeatCount
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (repeatCount :: String | r))
repeatCount = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "repeatCount")

repeatCount_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (repeatCount :: String | r))
repeatCount_ = repeatCount <<< Applicative.pure

restart
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (restart :: String | r))
restart = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "restart")

restart_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (restart :: String | r))
restart_ = restart <<< Applicative.pure

max
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (max :: String | r))
max = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "max")

max_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (max :: String | r))
max_ = max <<< Applicative.pure

min
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (min :: String | r))
min = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "min")

min_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (min :: String | r))
min_ = min <<< Applicative.pure

end
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (end :: String | r))
end = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "end")

end_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (end :: String | r))
end_ = end <<< Applicative.pure

dur
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (dur :: String | r))
dur = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "dur")

dur_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (dur :: String | r))
dur_ = dur <<< Applicative.pure

begin
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (begin :: String | r))
begin = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "begin")

begin_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (begin :: String | r))
begin_ = begin <<< Applicative.pure

attributeName
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (attributeName :: String | r))
attributeName = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "attributeName")

attributeName_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (attributeName :: String | r))
attributeName_ = attributeName <<< Applicative.pure

path
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (path :: String | r))
path = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "path")

path_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (path :: String | r))
path_ = path <<< Applicative.pure

calcMode
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (calcMode :: String | r))
calcMode = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "calcMode")

calcMode_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (calcMode :: String | r))
calcMode_ = calcMode <<< Applicative.pure

crossorigin
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (crossorigin :: String | r))
crossorigin = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "crossorigin")

crossorigin_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (crossorigin :: String | r))
crossorigin_ = crossorigin <<< Applicative.pure

y2 :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (y2 :: String | r))
y2 = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "y2")

y2_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (y2 :: String | r))
y2_ = y2 <<< Applicative.pure

x2 :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (x2 :: String | r))
x2 = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "x2")

x2_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (x2 :: String | r))
x2_ = x2 <<< Applicative.pure

y1 :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (y1 :: String | r))
y1 = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "y1")

y1_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (y1 :: String | r))
y1_ = y1 <<< Applicative.pure

x1 :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (x1 :: String | r))
x1 = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "x1")

x1_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (x1 :: String | r))
x1_ = x1 <<< Applicative.pure

points
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (points :: String | r))
points = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "points")

points_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (points :: String | r))
points_ = points <<< Applicative.pure

to :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (to :: String | r))
to = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "to")

to_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (to :: String | r))
to_ = to <<< Applicative.pure

preserveAspectRatio
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (preserveAspectRatio :: String | r))
preserveAspectRatio = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "preserveAspectRatio")

preserveAspectRatio_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (preserveAspectRatio :: String | r))
preserveAspectRatio_ = preserveAspectRatio <<< Applicative.pure

viewBox
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (viewBox :: String | r))
viewBox = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "viewBox")

viewBox_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (viewBox :: String | r))
viewBox_ = viewBox <<< Applicative.pure

lengthAdjust
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (lengthAdjust :: String | r))
lengthAdjust = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "lengthAdjust")

lengthAdjust_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (lengthAdjust :: String | r))
lengthAdjust_ = lengthAdjust <<< Applicative.pure

textLength
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (textLength :: String | r))
textLength = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "textLength")

textLength_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (textLength :: String | r))
textLength_ = textLength <<< Applicative.pure

dy :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (dy :: String | r))
dy = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "dy")

dy_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (dy :: String | r))
dy_ = dy <<< Applicative.pure

dx :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (dx :: String | r))
dx = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "dx")

dx_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (dx :: String | r))
dx_ = dx <<< Applicative.pure

y :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (y :: String | r))
y = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "y")

y_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (y :: String | r))
y_ = y <<< Applicative.pure

x :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (x :: String | r))
x = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "x")

x_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (x :: String | r))
x_ = x <<< Applicative.pure

side
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (side :: String | r))
side = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "side")

side_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (side :: String | r))
side_ = side <<< Applicative.pure

spacing
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (spacing :: String | r))
spacing = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "spacing")

spacing_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (spacing :: String | r))
spacing_ = spacing <<< Applicative.pure

method
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (method :: String | r))
method = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "method")

method_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (method :: String | r))
method_ = method <<< Applicative.pure

startOffset
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (startOffset :: String | r))
startOffset = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "startOffset")

startOffset_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (startOffset :: String | r))
startOffset_ = startOffset <<< Applicative.pure

style
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (style :: String | r))
style = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "style")

style_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (style :: String | r))
style_ = style <<< Applicative.pure

klass
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (klass :: String | r))
klass = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "class")

klass_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (klass :: String | r))
klass_ = klass <<< Applicative.pure

autofocus
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (autofocus :: String | r))
autofocus = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "autofocus")

autofocus_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (autofocus :: String | r))
autofocus_ = autofocus <<< Applicative.pure

tabindex
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (tabindex :: String | r))
tabindex = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "tabindex")

tabindex_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (tabindex :: String | r))
tabindex_ = tabindex <<< Applicative.pure

xmlSpace
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (xmlSpace :: String | r))
xmlSpace = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "xml:space")

xmlSpace_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (xmlSpace :: String | r))
xmlSpace_ = xmlSpace <<< Applicative.pure

lang
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (lang :: String | r))
lang = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "lang")

lang_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (lang :: String | r))
lang_ = lang <<< Applicative.pure

id :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (id :: String | r))
id = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "id")

id_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (id :: String | r))
id_ = id <<< Applicative.pure

title
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (title :: String | r))
title = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "title")

title_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (title :: String | r))
title_ = title <<< Applicative.pure

media
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (media :: String | r))
media = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "media")

media_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (media :: String | r))
media_ = media <<< Applicative.pure

lightingColor
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (lightingColor :: String | r))
lightingColor = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "lighting-color")

lightingColor_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (lightingColor :: String | r))
lightingColor_ = lightingColor <<< Applicative.pure

colorInterpolationFilters
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (colorInterpolationFilters :: String | r))
colorInterpolationFilters = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "color-interpolation-filters")

colorInterpolationFilters_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (colorInterpolationFilters :: String | r))
colorInterpolationFilters_ = colorInterpolationFilters <<< Applicative.pure

floodOpacity
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (floodOpacity :: String | r))
floodOpacity = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "flood-opacity")

floodOpacity_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (floodOpacity :: String | r))
floodOpacity_ = floodOpacity <<< Applicative.pure

floodColor
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (floodColor :: String | r))
floodColor = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "flood-color")

floodColor_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (floodColor :: String | r))
floodColor_ = floodColor <<< Applicative.pure

filter
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (filter :: String | r))
filter = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "filter")

filter_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (filter :: String | r))
filter_ = filter <<< Applicative.pure

strokeOpacity
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeOpacity :: String | r))
strokeOpacity = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-opacity")

strokeOpacity_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeOpacity :: String | r))
strokeOpacity_ = strokeOpacity <<< Applicative.pure

stroke
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (stroke :: String | r))
stroke = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke")

stroke_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (stroke :: String | r))
stroke_ = stroke <<< Applicative.pure

strokeRepeat
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeRepeat :: String | r))
strokeRepeat = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-repeat")

strokeRepeat_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeRepeat :: String | r))
strokeRepeat_ = strokeRepeat <<< Applicative.pure

strokeSize
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeSize :: String | r))
strokeSize = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-size")

strokeSize_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeSize :: String | r))
strokeSize_ = strokeSize <<< Applicative.pure

strokePosition
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokePosition :: String | r))
strokePosition = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-position")

strokePosition_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokePosition :: String | r))
strokePosition_ = strokePosition <<< Applicative.pure

strokeOrigin
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeOrigin :: String | r))
strokeOrigin = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-origin")

strokeOrigin_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeOrigin :: String | r))
strokeOrigin_ = strokeOrigin <<< Applicative.pure

strokeImage
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeImage :: String | r))
strokeImage = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-image")

strokeImage_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeImage :: String | r))
strokeImage_ = strokeImage <<< Applicative.pure

strokeColor
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeColor :: String | r))
strokeColor = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-color")

strokeColor_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeColor :: String | r))
strokeColor_ = strokeColor <<< Applicative.pure

strokeDashJustify
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeDashJustify :: String | r))
strokeDashJustify = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-dash-justify")

strokeDashJustify_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeDashJustify :: String | r))
strokeDashJustify_ = strokeDashJustify <<< Applicative.pure

strokeDashCorner
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeDashCorner :: String | r))
strokeDashCorner = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-dash-corner")

strokeDashCorner_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeDashCorner :: String | r))
strokeDashCorner_ = strokeDashCorner <<< Applicative.pure

strokeDashoffset
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeDashoffset :: String | r))
strokeDashoffset = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-dashoffset")

strokeDashoffset_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeDashoffset :: String | r))
strokeDashoffset_ = strokeDashoffset <<< Applicative.pure

strokeDasharray
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeDasharray :: String | r))
strokeDasharray = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-dasharray")

strokeDasharray_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeDasharray :: String | r))
strokeDasharray_ = strokeDasharray <<< Applicative.pure

strokeBreak
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeBreak :: String | r))
strokeBreak = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-break")

strokeBreak_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeBreak :: String | r))
strokeBreak_ = strokeBreak <<< Applicative.pure

strokeMiterlimit
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeMiterlimit :: String | r))
strokeMiterlimit = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-miterlimit")

strokeMiterlimit_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeMiterlimit :: String | r))
strokeMiterlimit_ = strokeMiterlimit <<< Applicative.pure

strokeLinejoin
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeLinejoin :: String | r))
strokeLinejoin = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-linejoin")

strokeLinejoin_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeLinejoin :: String | r))
strokeLinejoin_ = strokeLinejoin <<< Applicative.pure

strokeLinecap
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeLinecap :: String | r))
strokeLinecap = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-linecap")

strokeLinecap_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeLinecap :: String | r))
strokeLinecap_ = strokeLinecap <<< Applicative.pure

strokeAlign
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeAlign :: String | r))
strokeAlign = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-align")

strokeAlign_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeAlign :: String | r))
strokeAlign_ = strokeAlign <<< Applicative.pure

strokeWidth
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (strokeWidth :: String | r))
strokeWidth = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stroke-width")

strokeWidth_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (strokeWidth :: String | r))
strokeWidth_ = strokeWidth <<< Applicative.pure

fillOpacity
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (fillOpacity :: String | r))
fillOpacity = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "fill-opacity")

fillOpacity_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (fillOpacity :: String | r))
fillOpacity_ = fillOpacity <<< Applicative.pure

fillRepeat
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (fillRepeat :: String | r))
fillRepeat = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "fill-repeat")

fillRepeat_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (fillRepeat :: String | r))
fillRepeat_ = fillRepeat <<< Applicative.pure

fillSize
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (fillSize :: String | r))
fillSize = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "fill-size")

fillSize_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (fillSize :: String | r))
fillSize_ = fillSize <<< Applicative.pure

fillPosition
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (fillPosition :: String | r))
fillPosition = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "fill-position")

fillPosition_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (fillPosition :: String | r))
fillPosition_ = fillPosition <<< Applicative.pure

fillOrigin
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (fillOrigin :: String | r))
fillOrigin = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "fill-origin")

fillOrigin_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (fillOrigin :: String | r))
fillOrigin_ = fillOrigin <<< Applicative.pure

fillImage
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (fillImage :: String | r))
fillImage = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "fill-image")

fillImage_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (fillImage :: String | r))
fillImage_ = fillImage <<< Applicative.pure

fillColor
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (fillColor :: String | r))
fillColor = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "fill-color")

fillColor_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (fillColor :: String | r))
fillColor_ = fillColor <<< Applicative.pure

fillBreak
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (fillBreak :: String | r))
fillBreak = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "fill-break")

fillBreak_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (fillBreak :: String | r))
fillBreak_ = fillBreak <<< Applicative.pure

fillRule
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (fillRule :: String | r))
fillRule = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "fill-rule")

fillRule_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (fillRule :: String | r))
fillRule_ = fillRule <<< Applicative.pure

pointerEvents
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (pointerEvents :: String | r))
pointerEvents = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "pointer-events")

pointerEvents_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (pointerEvents :: String | r))
pointerEvents_ = pointerEvents <<< Applicative.pure

imageRendering
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (imageRendering :: String | r))
imageRendering = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "image-rendering")

imageRendering_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (imageRendering :: String | r))
imageRendering_ = imageRendering <<< Applicative.pure

textRendering
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (textRendering :: String | r))
textRendering = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "text-rendering")

textRendering_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (textRendering :: String | r))
textRendering_ = textRendering <<< Applicative.pure

shapeRendering
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (shapeRendering :: String | r))
shapeRendering = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "shape-rendering")

shapeRendering_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (shapeRendering :: String | r))
shapeRendering_ = shapeRendering <<< Applicative.pure

colorInterpolation
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (colorInterpolation :: String | r))
colorInterpolation = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "color-interpolation")

colorInterpolation_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (colorInterpolation :: String | r))
colorInterpolation_ = colorInterpolation <<< Applicative.pure

paintOrder
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (paintOrder :: String | r))
paintOrder = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "paint-order")

paintOrder_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (paintOrder :: String | r))
paintOrder_ = paintOrder <<< Applicative.pure

marker
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (marker :: String | r))
marker = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "marker")

marker_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (marker :: String | r))
marker_ = marker <<< Applicative.pure

markerEnd
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (markerEnd :: String | r))
markerEnd = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "marker-end")

markerEnd_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (markerEnd :: String | r))
markerEnd_ = markerEnd <<< Applicative.pure

markerMid
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (markerMid :: String | r))
markerMid = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "marker-mid")

markerMid_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (markerMid :: String | r))
markerMid_ = markerMid <<< Applicative.pure

markerStart
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (markerStart :: String | r))
markerStart = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "marker-start")

markerStart_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (markerStart :: String | r))
markerStart_ = markerStart <<< Applicative.pure

textAnchor
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (textAnchor :: String | r))
textAnchor = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "text-anchor")

textAnchor_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (textAnchor :: String | r))
textAnchor_ = textAnchor <<< Applicative.pure

shapeMargin
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (shapeMargin :: String | r))
shapeMargin = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "shape-margin")

shapeMargin_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (shapeMargin :: String | r))
shapeMargin_ = shapeMargin <<< Applicative.pure

shapeSubtract
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (shapeSubtract :: String | r))
shapeSubtract = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "shape-subtract")

shapeSubtract_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (shapeSubtract :: String | r))
shapeSubtract_ = shapeSubtract <<< Applicative.pure

shapeInside
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (shapeInside :: String | r))
shapeInside = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "shape-inside")

shapeInside_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (shapeInside :: String | r))
shapeInside_ = shapeInside <<< Applicative.pure

inlineSize
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (inlineSize :: String | r))
inlineSize = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "inline-size")

inlineSize_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (inlineSize :: String | r))
inlineSize_ = inlineSize <<< Applicative.pure

d :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (d :: String | r))
d = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "d")

d_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (d :: String | r))
d_ = d <<< Applicative.pure

vectorEffect
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (vectorEffect :: String | r))
vectorEffect = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "vector-effect")

vectorEffect_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (vectorEffect :: String | r))
vectorEffect_ = vectorEffect <<< Applicative.pure

ry :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (ry :: String | r))
ry = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "ry")

ry_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (ry :: String | r))
ry_ = ry <<< Applicative.pure

rx :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (rx :: String | r))
rx = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "rx")

rx_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (rx :: String | r))
rx_ = rx <<< Applicative.pure

r :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (r :: String | r))
r = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "r")

r_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (r :: String | r))
r_ = r <<< Applicative.pure

cy :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (cy :: String | r))
cy = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "cy")

cy_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (cy :: String | r))
cy_ = cy <<< Applicative.pure

cx :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (cx :: String | r))
cx = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "cx")

cx_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (cx :: String | r))
cx_ = cx <<< Applicative.pure

orient
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (orient :: String | r))
orient = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "orient")

orient_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (orient :: String | r))
orient_ = orient <<< Applicative.pure

markerHeight
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (markerHeight :: String | r))
markerHeight = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "markerHeight")

markerHeight_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (markerHeight :: String | r))
markerHeight_ = markerHeight <<< Applicative.pure

markerWidth
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (markerWidth :: String | r))
markerWidth = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "markerWidth")

markerWidth_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (markerWidth :: String | r))
markerWidth_ = markerWidth <<< Applicative.pure

markerUnits
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (markerUnits :: String | r))
markerUnits = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "markerUnits")

markerUnits_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (markerUnits :: String | r))
markerUnits_ = markerUnits <<< Applicative.pure

spreadMethod
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (spreadMethod :: String | r))
spreadMethod = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "spreadMethod")

spreadMethod_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (spreadMethod :: String | r))
spreadMethod_ = spreadMethod <<< Applicative.pure

gradientTransform
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (gradientTransform :: String | r))
gradientTransform = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "gradientTransform")

gradientTransform_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (gradientTransform :: String | r))
gradientTransform_ = gradientTransform <<< Applicative.pure

gradientUnits
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (gradientUnits :: String | r))
gradientUnits = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "gradientUnits")

gradientUnits_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (gradientUnits :: String | r))
gradientUnits_ = gradientUnits <<< Applicative.pure

fr :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (fr :: String | r))
fr = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "fr")

fr_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (fr :: String | r))
fr_ = fr <<< Applicative.pure

fy :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (fy :: String | r))
fy = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "fy")

fy_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (fy :: String | r))
fy_ = fy <<< Applicative.pure

fx :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (fx :: String | r))
fx = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "fx")

fx_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (fx :: String | r))
fx_ = fx <<< Applicative.pure

stopOpacity
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (stopOpacity :: String | r))
stopOpacity = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stop-opacity")

stopOpacity_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (stopOpacity :: String | r))
stopOpacity_ = stopOpacity <<< Applicative.pure

stopColor
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (stopColor :: String | r))
stopColor = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stop-color")

stopColor_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (stopColor :: String | r))
stopColor_ = stopColor <<< Applicative.pure

offset
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (offset :: String | r))
offset = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "offset")

offset_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (offset :: String | r))
offset_ = offset <<< Applicative.pure

height
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (height :: String | r))
height = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "height")

height_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (height :: String | r))
height_ = height <<< Applicative.pure

width
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (width :: String | r))
width = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "width")

width_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (width :: String | r))
width_ = width <<< Applicative.pure

patternTransform
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (patternTransform :: String | r))
patternTransform = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "patternTransform")

patternTransform_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (patternTransform :: String | r))
patternTransform_ = patternTransform <<< Applicative.pure

patternContentUnits
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (patternContentUnits :: String | r))
patternContentUnits = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "patternContentUnits")

patternContentUnits_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (patternContentUnits :: String | r))
patternContentUnits_ = patternContentUnits <<< Applicative.pure

patternUnits
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (patternUnits :: String | r))
patternUnits = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "patternUnits")

patternUnits_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (patternUnits :: String | r))
patternUnits_ = patternUnits <<< Applicative.pure

filterRes
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (filterRes :: String | r))
filterRes = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "filterRes")

filterRes_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (filterRes :: String | r))
filterRes_ = filterRes <<< Applicative.pure

primitiveUnits
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (primitiveUnits :: String | r))
primitiveUnits = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "primitiveUnits")

primitiveUnits_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (primitiveUnits :: String | r))
primitiveUnits_ = primitiveUnits <<< Applicative.pure

filterUnits
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (filterUnits :: String | r))
filterUnits = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "filterUnits")

filterUnits_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (filterUnits :: String | r))
filterUnits_ = filterUnits <<< Applicative.pure

xin
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (xin :: String | r))
xin = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "in")

xin_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (xin :: String | r))
xin_ = xin <<< Applicative.pure

result
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (result :: String | r))
result = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "result")

result_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (result :: String | r))
result_ = result <<< Applicative.pure

in2
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (in2 :: String | r))
in2 = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "in2")

in2_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (in2 :: String | r))
in2_ = in2 <<< Applicative.pure

noComposite
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (noComposite :: String | r))
noComposite = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "no-composite")

noComposite_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (noComposite :: String | r))
noComposite_ = noComposite <<< Applicative.pure

mode
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (mode :: String | r))
mode = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "mode")

mode_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (mode :: String | r))
mode_ = mode <<< Applicative.pure

exponent
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (exponent :: String | r))
exponent = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "exponent")

exponent_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (exponent :: String | r))
exponent_ = exponent <<< Applicative.pure

amplitude
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (amplitude :: String | r))
amplitude = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "amplitude")

amplitude_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (amplitude :: String | r))
amplitude_ = amplitude <<< Applicative.pure

intercept
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (intercept :: String | r))
intercept = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "intercept")

intercept_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (intercept :: String | r))
intercept_ = intercept <<< Applicative.pure

slope
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (slope :: String | r))
slope = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "slope")

slope_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (slope :: String | r))
slope_ = slope <<< Applicative.pure

tableValues
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (tableValues :: String | r))
tableValues = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "tableValues")

tableValues_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (tableValues :: String | r))
tableValues_ = tableValues <<< Applicative.pure

k4 :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (k4 :: String | r))
k4 = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "k4")

k4_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (k4 :: String | r))
k4_ = k4 <<< Applicative.pure

k3 :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (k3 :: String | r))
k3 = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "k3")

k3_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (k3 :: String | r))
k3_ = k3 <<< Applicative.pure

k2 :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (k2 :: String | r))
k2 = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "k2")

k2_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (k2 :: String | r))
k2_ = k2 <<< Applicative.pure

k1 :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (k1 :: String | r))
k1 = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "k1")

k1_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (k1 :: String | r))
k1_ = k1 <<< Applicative.pure

operator
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (operator :: String | r))
operator = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "operator")

operator_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (operator :: String | r))
operator_ = operator <<< Applicative.pure

operatorArithmetic
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (operator :: String | r))
operatorArithmetic = operator_ "arithmetic"

operatorLighter
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (operator :: String | r))
operatorLighter = operator_ "lighter"

operatorXor
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (operator :: String | r))
operatorXor = operator_ "xor"

operatorAtop
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (operator :: String | r))
operatorAtop = operator_ "atop"

operatorOut
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (operator :: String | r))
operatorOut = operator_ "out"

operatorIn
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (operator :: String | r))
operatorIn = operator_ "in"

operatorOver
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (operator :: String | r))
operatorOver = operator_ "over"

preserveAlpha
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (preserveAlpha :: String | r))
preserveAlpha = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "preserveAlpha")

preserveAlpha_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (preserveAlpha :: String | r))
preserveAlpha_ = preserveAlpha <<< Applicative.pure

kernelUnitLength
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (kernelUnitLength :: String | r))
kernelUnitLength = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "kernelUnitLength")

kernelUnitLength_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (kernelUnitLength :: String | r))
kernelUnitLength_ = kernelUnitLength <<< Applicative.pure

edgeMode
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (edgeMode :: String | r))
edgeMode = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "edgeMode")

edgeMode_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (edgeMode :: String | r))
edgeMode_ = edgeMode <<< Applicative.pure

edgeModeMirror
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (edgeMode :: String | r))
edgeModeMirror = edgeMode_ "mirror"

edgeModeWrap
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (edgeMode :: String | r))
edgeModeWrap = edgeMode_ "wrap"

edgeModeDuplicate
  :: forall r f. Applicative.Applicative f => f (Deku.Attribute.Attribute (edgeMode :: String | r))
edgeModeDuplicate = edgeMode_ "duplicate"

targetY
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (targetY :: String | r))
targetY = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "targetY")

targetY_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (targetY :: String | r))
targetY_ = targetY <<< Applicative.pure

targetX
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (targetX :: String | r))
targetX = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "targetX")

targetX_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (targetX :: String | r))
targetX_ = targetX <<< Applicative.pure

bias
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (bias :: String | r))
bias = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "bias")

bias_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (bias :: String | r))
bias_ = bias <<< Applicative.pure

divisor
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (divisor :: String | r))
divisor = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "divisor")

divisor_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (divisor :: String | r))
divisor_ = divisor <<< Applicative.pure

kernelMatrix
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (kernelMatrix :: String | r))
kernelMatrix = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "kernelMatrix")

kernelMatrix_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (kernelMatrix :: String | r))
kernelMatrix_ = kernelMatrix <<< Applicative.pure

order
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (order :: String | r))
order = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "order")

order_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (order :: String | r))
order_ = order <<< Applicative.pure

diffuseConstant
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (diffuseConstant :: String | r))
diffuseConstant = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "diffuseConstant")

diffuseConstant_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (diffuseConstant :: String | r))
diffuseConstant_ = diffuseConstant <<< Applicative.pure

surfaceScale
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (surfaceScale :: String | r))
surfaceScale = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "surfaceScale")

surfaceScale_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (surfaceScale :: String | r))
surfaceScale_ = surfaceScale <<< Applicative.pure

yChannelSelector
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (yChannelSelector :: String | r))
yChannelSelector = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "yChannelSelector")

yChannelSelector_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (yChannelSelector :: String | r))
yChannelSelector_ = yChannelSelector <<< Applicative.pure

xChannelSelector
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (xChannelSelector :: String | r))
xChannelSelector = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "xChannelSelector")

xChannelSelector_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (xChannelSelector :: String | r))
xChannelSelector_ = xChannelSelector <<< Applicative.pure

scale
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (scale :: String | r))
scale = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "scale")

scale_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (scale :: String | r))
scale_ = scale <<< Applicative.pure

stdDeviation
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (stdDeviation :: String | r))
stdDeviation = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stdDeviation")

stdDeviation_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (stdDeviation :: String | r))
stdDeviation_ = stdDeviation <<< Applicative.pure

radius
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (radius :: String | r))
radius = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "radius")

radius_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (radius :: String | r))
radius_ = radius <<< Applicative.pure

specularExponent
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (specularExponent :: String | r))
specularExponent = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "specularExponent")

specularExponent_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (specularExponent :: String | r))
specularExponent_ = specularExponent <<< Applicative.pure

specularConstant
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (specularConstant :: String | r))
specularConstant = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "specularConstant")

specularConstant_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (specularConstant :: String | r))
specularConstant_ = specularConstant <<< Applicative.pure

stitchTiles
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (stitchTiles :: String | r))
stitchTiles = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "stitchTiles")

stitchTiles_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (stitchTiles :: String | r))
stitchTiles_ = stitchTiles <<< Applicative.pure

seed
  :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (seed :: String | r))
seed = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "seed")

seed_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (seed :: String | r))
seed_ = seed <<< Applicative.pure

numOctaves
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (numOctaves :: String | r))
numOctaves = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "numOctaves")

numOctaves_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (numOctaves :: String | r))
numOctaves_ = numOctaves <<< Applicative.pure

baseFrequency
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (baseFrequency :: String | r))
baseFrequency = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "baseFrequency")

baseFrequency_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (baseFrequency :: String | r))
baseFrequency_ = baseFrequency <<< Applicative.pure

elevation
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (elevation :: String | r))
elevation = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "elevation")

elevation_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (elevation :: String | r))
elevation_ = elevation <<< Applicative.pure

azimuth
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (azimuth :: String | r))
azimuth = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "azimuth")

azimuth_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (azimuth :: String | r))
azimuth_ = azimuth <<< Applicative.pure

z :: forall r f. Functor.Functor f => f String -> f (Deku.Attribute.Attribute (z :: String | r))
z = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "z")

z_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (z :: String | r))
z_ = z <<< Applicative.pure

limitingConeAngle
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (limitingConeAngle :: String | r))
limitingConeAngle = Functor.map
  (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "limitingConeAngle")

limitingConeAngle_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (limitingConeAngle :: String | r))
limitingConeAngle_ = limitingConeAngle <<< Applicative.pure

pointsAtZ
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (pointsAtZ :: String | r))
pointsAtZ = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "pointsAtZ")

pointsAtZ_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (pointsAtZ :: String | r))
pointsAtZ_ = pointsAtZ <<< Applicative.pure

pointsAtY
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (pointsAtY :: String | r))
pointsAtY = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "pointsAtY")

pointsAtY_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (pointsAtY :: String | r))
pointsAtY_ = pointsAtY <<< Applicative.pure

pointsAtX
  :: forall r f
   . Functor.Functor f
  => f String
  -> f (Deku.Attribute.Attribute (pointsAtX :: String | r))
pointsAtX = Functor.map (Deku.Attribute.unsafeAttribute <<< Deku.Attribute.prop' "pointsAtX")

pointsAtX_
  :: forall r f
   . Applicative.Applicative f
  => String
  -> f (Deku.Attribute.Attribute (pointsAtX :: String | r))
pointsAtX_ = pointsAtX <<< Applicative.pure
