-- | This module has been automatically generated by running `spago run -p codegen`.
-- | Any changes may be overwritten.
module Deku.DOM
  ( HTMLHtmlElement
  , HTMLHeadElement
  , HTMLTitleElement
  , HTMLBaseElement
  , HTMLLinkElement
  , HTMLMetaElement
  , HTMLStyleElement
  , HTMLBodyElement
  , HTMLArticleElement
  , HTMLSectionElement
  , HTMLNavElement
  , HTMLAsideElement
  , HTMLH1Element
  , HTMLH2Element
  , HTMLH3Element
  , HTMLH4Element
  , HTMLH5Element
  , HTMLH6Element
  , HTMLHgroupElement
  , HTMLHeaderElement
  , HTMLFooterElement
  , HTMLAddressElement
  , HTMLParagraphElement
  , HTMLHRElement
  , HTMLPreElement
  , HTMLBlockquoteElement
  , HTMLOlElement
  , HTMLUlElement
  , HTMLMenuElement
  , HTMLLiElement
  , HTMLDlElement
  , HTMLDtElement
  , HTMLDdElement
  , HTMLFigureElement
  , HTMLFigcaptionElement
  , HTMLMainElement
  , HTMLSearchElement
  , HTMLDivElement
  , HTMLAnchorElement
  , HTMLEmElement
  , HTMLStrongElement
  , HTMLSmallElement
  , HTMLSElement
  , HTMLCiteElement
  , HTMLQElement
  , HTMLDfnElement
  , HTMLAbbrElement
  , HTMLRubyElement
  , HTMLRtElement
  , HTMLRpElement
  , HTMLDataElement
  , HTMLTimeElement
  , HTMLCodeElement
  , HTMLVarElement
  , HTMLSampElement
  , HTMLKbdElement
  , HTMLSubElement
  , HTMLSupElement
  , HTMLIElement
  , HTMLBElement
  , HTMLUElement
  , HTMLMarkElement
  , HTMLBdiElement
  , HTMLBdoElement
  , HTMLSpanElement
  , HTMLBRElement
  , HTMLWbrElement
  , HTMLInsElement
  , HTMLDelElement
  , HTMLPictureElement
  , HTMLSourceElement
  , HTMLImgElement
  , HTMLIframeElement
  , HTMLEmbedElement
  , HTMLObjectElement
  , HTMLVideoElement
  , HTMLAudioElement
  , HTMLTrackElement
  , HTMLMapElement
  , HTMLAreaElement
  , HTMLTableElement
  , HTMLCaptionElement
  , HTMLColgroupElement
  , HTMLColElement
  , HTMLTbodyElement
  , HTMLTheadElement
  , HTMLTfootElement
  , HTMLTrElement
  , HTMLTableDataCellElement
  , HTMLThElement
  , HTMLFormElement
  , HTMLLabelElement
  , HTMLInputElement
  , HTMLButtonElement
  , HTMLSelectElement
  , HTMLDatalistElement
  , HTMLOptgroupElement
  , HTMLOptionElement
  , HTMLTextAreaElement
  , HTMLOutputElement
  , HTMLProgressElement
  , HTMLMeterElement
  , HTMLFieldsetElement
  , HTMLLegendElement
  , HTMLDetailsElement
  , HTMLSummaryElement
  , HTMLDialogElement
  , HTMLScriptElement
  , HTMLNoscriptElement
  , HTMLTemplateElement
  , HTMLSlotElement
  , HTMLCanvasElement
  , HTMLAppletElement
  , HTMLAcronymElement
  , HTMLBgsoundElement
  , HTMLDirElement
  , HTMLNoframesElement
  , HTMLIsindexElement
  , HTMLKeygenElement
  , HTMLListingElement
  , HTMLMenuitemElement
  , HTMLNextidElement
  , HTMLNoembedElement
  , HTMLParamElement
  , HTMLPlaintextElement
  , HTMLRbElement
  , HTMLRtcElement
  , HTMLStrikeElement
  , HTMLXmpElement
  , HTMLBasefontElement
  , HTMLBigElement
  , HTMLBlinkElement
  , HTMLCenterElement
  , HTMLFontElement
  , HTMLMulticolElement
  , HTMLNobrElement
  , HTMLSpacerElement
  , HTMLTtElement
  , HTMLMarqueeElement
  , HTMLFramesetElement
  , HTMLFrameElement
  , HtmlsvgGlobal
  , Global
  , HtmlGlobal
  , GlobalEventHandlers
  , ARIAMixin
  , html
  , html_
  , head
  , head_
  , title
  , title_
  , base
  , base_
  , link
  , link_
  , meta
  , meta_
  , style
  , style_
  , body
  , body_
  , article
  , article_
  , section
  , section_
  , nav
  , nav_
  , aside
  , aside_
  , h1
  , h1_
  , h2
  , h2_
  , h3
  , h3_
  , h4
  , h4_
  , h5
  , h5_
  , h6
  , h6_
  , hgroup
  , hgroup_
  , header
  , header_
  , footer
  , footer_
  , address
  , address_
  , p
  , p_
  , hr
  , hr_
  , pre
  , pre_
  , blockquote
  , blockquote_
  , ol
  , ol_
  , ul
  , ul_
  , menu
  , menu_
  , li
  , li_
  , dl
  , dl_
  , dt
  , dt_
  , dd
  , dd_
  , figure
  , figure_
  , figcaption
  , figcaption_
  , main
  , main_
  , search
  , search_
  , div
  , div_
  , a
  , a_
  , em
  , em_
  , strong
  , strong_
  , small
  , small_
  , s
  , s_
  , cite
  , cite_
  , q
  , q_
  , dfn
  , dfn_
  , abbr
  , abbr_
  , ruby
  , ruby_
  , rt
  , rt_
  , rp
  , rp_
  , xdata
  , xdata_
  , time
  , time_
  , code
  , code_
  , var
  , var_
  , samp
  , samp_
  , kbd
  , kbd_
  , sub
  , sub_
  , sup
  , sup_
  , i
  , i_
  , b
  , b_
  , u
  , u_
  , mark
  , mark_
  , bdi
  , bdi_
  , bdo
  , bdo_
  , span
  , span_
  , br
  , br_
  , wbr
  , wbr_
  , ins
  , ins_
  , del
  , del_
  , picture
  , picture_
  , source
  , source_
  , img
  , img_
  , iframe
  , iframe_
  , embed
  , embed_
  , object
  , object_
  , video
  , video_
  , audio
  , audio_
  , track
  , track_
  , map
  , map_
  , area
  , area_
  , table
  , table_
  , caption
  , caption_
  , colgroup
  , colgroup_
  , col
  , col_
  , tbody
  , tbody_
  , thead
  , thead_
  , tfoot
  , tfoot_
  , tr
  , tr_
  , td
  , td_
  , th
  , th_
  , form
  , form_
  , label
  , label_
  , input
  , input_
  , button
  , button_
  , select
  , select_
  , datalist
  , datalist_
  , optgroup
  , optgroup_
  , option
  , option_
  , textarea
  , textarea_
  , output
  , output_
  , progress
  , progress_
  , meter
  , meter_
  , fieldset
  , fieldset_
  , legend
  , legend_
  , details
  , details_
  , summary
  , summary_
  , dialog
  , dialog_
  , script
  , script_
  , noscript
  , noscript_
  , template
  , template_
  , slot
  , slot_
  , canvas
  , canvas_
  , applet
  , applet_
  , acronym
  , acronym_
  , bgsound
  , bgsound_
  , dir
  , dir_
  , noframes
  , noframes_
  , isindex
  , isindex_
  , keygen
  , keygen_
  , listing
  , listing_
  , menuitem
  , menuitem_
  , nextid
  , nextid_
  , noembed
  , noembed_
  , param
  , param_
  , plaintext
  , plaintext_
  , rb
  , rb_
  , rtc
  , rtc_
  , strike
  , strike_
  , xmp
  , xmp_
  , basefont
  , basefont_
  , big
  , big_
  , blink
  , blink_
  , center
  , center_
  , font
  , font_
  , multicol
  , multicol_
  , nobr
  , nobr_
  , spacer
  , spacer_
  , tt
  , tt_
  , marquee
  , marquee_
  , frameset
  , frameset_
  , frame
  , frame_
  , _crossorigin
  , _crossorigin_
  , class IsCrossorigin
  , isCrossorigin
  , _loading
  , _loading_
  , class IsLoading
  , isLoading
  , _fetchpriority
  , _fetchpriority_
  , class IsFetchpriority
  , isFetchpriority
  , _dir
  , _dir_
  , class IsDir
  , isDir
  , _name
  , _name_
  , class IsName
  , isName
  , _httpEquiv
  , _httpEquiv_
  , class IsHttpEquiv
  , isHttpEquiv
  , _type
  , _type_
  , class IsType
  , isType
  , _rel
  , _rel_
  , class IsRel
  , isRel
  , _decoding
  , _decoding_
  , class IsDecoding
  , isDecoding
  , _kind
  , _kind_
  , class IsKind
  , isKind
  , _preload
  , _preload_
  , class IsPreload
  , isPreload
  , _shape
  , _shape_
  , class IsShape
  , isShape
  , _scope
  , _scope_
  , class IsScope
  , isScope
  , _wrap
  , _wrap_
  , class IsWrap
  , isWrap
  , _method
  , _method_
  , class IsMethod
  , isMethod
  , _enctype
  , _enctype_
  , class IsEnctype
  , isEnctype
  , _autocomplete
  , _autocomplete_
  , class IsAutocomplete
  , isAutocomplete
  , _entry
  , _entry_
  , class IsEntry
  , isEntry
  , _hidden
  , _hidden_
  , class IsHidden
  , isHidden
  , _autocapitalize
  , _autocapitalize_
  , class IsAutocapitalize
  , isAutocapitalize
  , _inputmode
  , _inputmode_
  , class IsInputmode
  , isInputmode
  , _enterkeyhint
  , _enterkeyhint_
  , class IsEnterkeyhint
  , isEnterkeyhint
  , _popover
  , _popover_
  , class IsPopover
  , isPopover
  , _popovertargetaction
  , _popovertargetaction_
  , class IsPopovertargetaction
  , isPopovertargetaction
  , _sandbox
  , _sandbox_
  , class IsSandbox
  , isSandbox
  , _version
  , _version_
  , _manifest
  , _manifest_
  , _profile
  , _profile_
  , _target
  , _target_
  , _href
  , _href_
  , _urn
  , _urn_
  , _rev
  , _rev_
  , _methods
  , _methods_
  , _charset
  , _charset_
  , _disabled
  , _disabled_
  , _color
  , _color_
  , _blocking
  , _blocking_
  , _as
  , _as_
  , _sizes
  , _sizes_
  , _imagesizes
  , _imagesizes_
  , _imagesrcset
  , _imagesrcset_
  , _title
  , _title_
  , _referrerpolicy
  , _referrerpolicy_
  , _hreflang
  , _hreflang_
  , _integrity
  , _integrity_
  , _media
  , _media_
  , _scheme
  , _scheme_
  , _content
  , _content_
  , _vlink
  , _vlink_
  , _topmargin
  , _topmargin_
  , _text
  , _text_
  , _rightmargin
  , _rightmargin_
  , _marginwidth
  , _marginwidth_
  , _marginheight
  , _marginheight_
  , _link
  , _link_
  , _leftmargin
  , _leftmargin_
  , _bottommargin
  , _bottommargin_
  , _bgcolor
  , _bgcolor_
  , _alink
  , _alink_
  , _align
  , _align_
  , _width
  , _width_
  , _size
  , _size_
  , _noshade
  , _noshade_
  , _cite
  , _cite_
  , _compact
  , _compact_
  , _start
  , _start_
  , _reversed
  , _reversed_
  , _label
  , _label_
  , _value
  , _value_
  , _coords
  , _coords_
  , _ping
  , _ping_
  , _download
  , _download_
  , _datetime
  , _datetime_
  , _clear
  , _clear_
  , _height
  , _height_
  , _src
  , _src_
  , _srcset
  , _srcset_
  , _vspace
  , _vspace_
  , _hspace
  , _hspace_
  , _border
  , _border_
  , _lowsrc
  , _lowsrc_
  , _longdesc
  , _longdesc_
  , _usemap
  , _usemap_
  , _ismap
  , _ismap_
  , _alt
  , _alt_
  , _scrolling
  , _scrolling_
  , _framespacing
  , _framespacing_
  , _frameborder
  , _frameborder_
  , _allowtransparency
  , _allowtransparency_
  , _allowfullscreen
  , _allowfullscreen_
  , _allow
  , _allow_
  , _srcdoc
  , _srcdoc_
  , _typemustmatch
  , _typemustmatch_
  , _standby
  , _standby_
  , _declare
  , _declare_
  , _codetype
  , _codetype_
  , _codebase
  , _codebase_
  , _code
  , _code_
  , _classid
  , _classid_
  , _archive
  , _archive_
  , _dirname
  , _dirname_
  , _form
  , _form_
  , _data
  , _data_
  , _muted
  , _muted_
  , _controls
  , _controls_
  , _autoplay
  , _autoplay_
  , _loop
  , _loop_
  , _playsinline
  , _playsinline_
  , _poster
  , _poster_
  , _default
  , _default_
  , _srclang
  , _srclang_
  , _nohref
  , _nohref_
  , _rules
  , _rules_
  , _frame
  , _frame_
  , _cellspacing
  , _cellspacing_
  , _cellpadding
  , _cellpadding_
  , _bordercolor
  , _bordercolor_
  , _summary
  , _summary_
  , _datapagesize
  , _datapagesize_
  , _span
  , _span_
  , _valign
  , _valign_
  , _charoff
  , _charoff_
  , _char
  , _char_
  , _nowrap
  , _nowrap_
  , _axis
  , _axis_
  , _abbr
  , _abbr_
  , _headers
  , _headers_
  , _rowspan
  , _rowspan_
  , _colspan
  , _colspan_
  , _accept
  , _accept_
  , _formnovalidate
  , _formnovalidate_
  , _novalidate
  , _novalidate_
  , _formtarget
  , _formtarget_
  , _formenctype
  , _formenctype_
  , _formmethod
  , _formmethod_
  , _formaction
  , _formaction_
  , _action
  , _action_
  , _acceptCharset
  , _acceptCharset_
  , _for
  , _for_
  , _capture
  , _capture_
  , _minlength
  , _minlength_
  , _maxlength
  , _maxlength_
  , _placeholder
  , _placeholder_
  , _list
  , _list_
  , _step
  , _step_
  , _max
  , _max_
  , _min
  , _min_
  , _pattern
  , _pattern_
  , _multiple
  , _multiple_
  , _required
  , _required_
  , _readonly
  , _readonly_
  , _checked
  , _checked_
  , _selected
  , _selected_
  , _rows
  , _rows_
  , _cols
  , _cols_
  , _optimum
  , _optimum_
  , _high
  , _high_
  , _low
  , _low_
  , _open
  , _open_
  , _event
  , _event_
  , _language
  , _language_
  , _defer
  , _defer_
  , _async
  , _async_
  , _nomodule
  , _nomodule_
  , _truespeed
  , _truespeed_
  , _direction
  , _direction_
  , _behavior
  , _behavior_
  , _tabindex
  , _tabindex_
  , _nonce
  , _nonce_
  , _slot
  , _slot_
  , _id
  , _id_
  , _class
  , _class_
  , _popovertarget
  , _popovertarget_
  , _draggable
  , _draggable_
  , _spellcheck
  , _spellcheck_
  , _contenteditable
  , _contenteditable_
  , _accesskey
  , _accesskey_
  , _autofocus
  , _autofocus_
  , _itemprop
  , _itemprop_
  , _itemref
  , _itemref_
  , _itemid
  , _itemid_
  , _itemtype
  , _itemtype_
  , _itemscope
  , _itemscope_
  , _is
  , _is_
  , _style
  , _style_
  , _translate
  , _translate_
  , _lang
  , _lang_
  , _onAnimationcancel
  , _onAnimationcancel_
  , _onAnimationend
  , _onAnimationend_
  , _onAnimationiteration
  , _onAnimationiteration_
  , _onAnimationstart
  , _onAnimationstart_
  , _onTransitioncancel
  , _onTransitioncancel_
  , _onTransitionend
  , _onTransitionend_
  , _onTransitionstart
  , _onTransitionstart_
  , _onTransitionrun
  , _onTransitionrun_
  , _onSelectionchange
  , _onSelectionchange_
  , _onSelectstart
  , _onSelectstart_
  , _onTouchcancel
  , _onTouchcancel_
  , _onTouchmove
  , _onTouchmove_
  , _onTouchend
  , _onTouchend_
  , _onTouchstart
  , _onTouchstart_
  , _onLostpointercapture
  , _onLostpointercapture_
  , _onGotpointercapture
  , _onGotpointercapture_
  , _onPointerleave
  , _onPointerleave_
  , _onPointerout
  , _onPointerout_
  , _onPointercancel
  , _onPointercancel_
  , _onPointerup
  , _onPointerup_
  , _onPointerrawupdate
  , _onPointerrawupdate_
  , _onPointermove
  , _onPointermove_
  , _onPointerdown
  , _onPointerdown_
  , _onPointerenter
  , _onPointerenter_
  , _onPointerover
  , _onPointerover_
  , _onScrollend
  , _onScrollend_
  , _onScroll
  , _onScroll_
  , _onResize
  , _onResize_
  , _onLoad
  , _onLoad_
  , _onFocus
  , _onFocus_
  , _onError
  , _onError_
  , _onBlur
  , _onBlur_
  , _onWheel
  , _onWheel_
  , _onWebkittransitionend
  , _onWebkittransitionend_
  , _onWebkitanimationstart
  , _onWebkitanimationstart_
  , _onWebkitanimationiteration
  , _onWebkitanimationiteration_
  , _onWebkitanimationend
  , _onWebkitanimationend_
  , _onWaiting
  , _onWaiting_
  , _onVolumechange
  , _onVolumechange_
  , _onToggle
  , _onToggle_
  , _onTimeupdate
  , _onTimeupdate_
  , _onSuspend
  , _onSuspend_
  , _onSubmit
  , _onSubmit_
  , _onStalled
  , _onStalled_
  , _onSlotchange
  , _onSlotchange_
  , _onSelect
  , _onSelect_
  , _onSeeking
  , _onSeeking_
  , _onSeeked
  , _onSeeked_
  , _onSecuritypolicyviolation
  , _onSecuritypolicyviolation_
  , _onReset
  , _onReset_
  , _onRatechange
  , _onRatechange_
  , _onProgress
  , _onProgress_
  , _onPlaying
  , _onPlaying_
  , _onPlay
  , _onPlay_
  , _onPause
  , _onPause_
  , _onPaste
  , _onPaste_
  , _onMouseup
  , _onMouseup_
  , _onMouseover
  , _onMouseover_
  , _onMouseout
  , _onMouseout_
  , _onMousemove
  , _onMousemove_
  , _onMouseleave
  , _onMouseleave_
  , _onMouseenter
  , _onMouseenter_
  , _onMousedown
  , _onMousedown_
  , _onLoadstart
  , _onLoadstart_
  , _onLoadedmetadata
  , _onLoadedmetadata_
  , _onLoadeddata
  , _onLoadeddata_
  , _onKeyup
  , _onKeyup_
  , _onKeypress
  , _onKeypress_
  , _onKeydown
  , _onKeydown_
  , _onInvalid
  , _onInvalid_
  , _onInput
  , _onInput_
  , _onFormdata
  , _onFormdata_
  , _onEnded
  , _onEnded_
  , _onEmptied
  , _onEmptied_
  , _onDurationchange
  , _onDurationchange_
  , _onDrop
  , _onDrop_
  , _onDragstart
  , _onDragstart_
  , _onDragover
  , _onDragover_
  , _onDragleave
  , _onDragleave_
  , _onDragenter
  , _onDragenter_
  , _onDragend
  , _onDragend_
  , _onDrag
  , _onDrag_
  , _onDblclick
  , _onDblclick_
  , _onCut
  , _onCut_
  , _onCuechange
  , _onCuechange_
  , _onCopy
  , _onCopy_
  , _onContextrestored
  , _onContextrestored_
  , _onContextmenu
  , _onContextmenu_
  , _onContextlost
  , _onContextlost_
  , _onClose
  , _onClose_
  , _onClick
  , _onClick_
  , _onChange
  , _onChange_
  , _onCanplaythrough
  , _onCanplaythrough_
  , _onCanplay
  , _onCanplay_
  , _onCancel
  , _onCancel_
  , _onBeforetoggle
  , _onBeforetoggle_
  , _onBeforematch
  , _onBeforematch_
  , _onBeforeinput
  , _onBeforeinput_
  , _onAuxclick
  , _onAuxclick_
  , _onAbort
  , _onAbort_
  , _ariaValuetext
  , _ariaValuetext_
  , _ariaValuenow
  , _ariaValuenow_
  , _ariaValuemin
  , _ariaValuemin_
  , _ariaValuemax
  , _ariaValuemax_
  , _ariaSort
  , _ariaSort_
  , _ariaSetsize
  , _ariaSetsize_
  , _ariaSelected
  , _ariaSelected_
  , _ariaRowspan
  , _ariaRowspan_
  , _ariaRowindextext
  , _ariaRowindextext_
  , _ariaRowindex
  , _ariaRowindex_
  , _ariaRowcount
  , _ariaRowcount_
  , _ariaRoledescription
  , _ariaRoledescription_
  , _ariaRequired
  , _ariaRequired_
  , _ariaReadonly
  , _ariaReadonly_
  , _ariaPressed
  , _ariaPressed_
  , _ariaPosinset
  , _ariaPosinset_
  , _ariaPlaceholder
  , _ariaPlaceholder_
  , _ariaOwns
  , _ariaOwns_
  , _ariaOrientation
  , _ariaOrientation_
  , _ariaMultiselectable
  , _ariaMultiselectable_
  , _ariaMultiline
  , _ariaMultiline_
  , _ariaModal
  , _ariaModal_
  , _ariaLive
  , _ariaLive_
  , _ariaLevel
  , _ariaLevel_
  , _ariaLabelledby
  , _ariaLabelledby_
  , _ariaLabel
  , _ariaLabel_
  , _ariaKeyshortcuts
  , _ariaKeyshortcuts_
  , _ariaInvalid
  , _ariaInvalid_
  , _ariaHidden
  , _ariaHidden_
  , _ariaHaspopup
  , _ariaHaspopup_
  , _ariaFlowto
  , _ariaFlowto_
  , _ariaExpanded
  , _ariaExpanded_
  , _ariaErrormessage
  , _ariaErrormessage_
  , _ariaDisabled
  , _ariaDisabled_
  , _ariaDetails
  , _ariaDetails_
  , _ariaDescription
  , _ariaDescription_
  , _ariaDescribedby
  , _ariaDescribedby_
  , _ariaCurrent
  , _ariaCurrent_
  , _ariaControls
  , _ariaControls_
  , _ariaColspan
  , _ariaColspan_
  , _ariaColindextext
  , _ariaColindextext_
  , _ariaColindex
  , _ariaColindex_
  , _ariaColcount
  , _ariaColcount_
  , _ariaChecked
  , _ariaChecked_
  , _ariaBusy
  , _ariaBusy_
  , _ariaAutocomplete
  , _ariaAutocomplete_
  , _ariaAtomic
  , _ariaAtomic_
  , _ariaActivedescendant
  , _ariaActivedescendant_
  , _role
  , _role_
  , __anonymous
  , __useCredentials
  , __lazy
  , __eager
  , __high
  , __low
  , __auto
  , __ltr
  , __rtl
  , __applicationName
  , __author
  , __description
  , __generator
  , __keywords
  , __referrer
  , __themeColor
  , __colorScheme
  , __contentLanguage
  , __contentType
  , __defaultStyle
  , __refresh
  , __setCookie
  , __xUaCompatible
  , __contentSecurityPolicy
  , __x1
  , __a
  , __xA
  , __i
  , __xI
  , __alternate
  , __bookmark
  , __canonical
  , __dnsPrefetch
  , __external
  , __help
  , __icon
  , __license
  , __manifest
  , __modulepreload
  , __nofollow
  , __noopener
  , __noreferrer
  , __opener
  , __pingback
  , __preconnect
  , __prefetch
  , __preload
  , __search
  , __stylesheet
  , __tag
  , __next
  , __prev
  , __sync
  , __async
  , __subtitles
  , __captions
  , __descriptions
  , __chapters
  , __metadata
  , __none
  , __circleState
  , __defaultState
  , __polygonState
  , __rectangleState
  , __row
  , __col
  , __rowgroup
  , __colgroup
  , __hidden
  , __text
  , __tel
  , __url
  , __email
  , __password
  , __date
  , __month
  , __week
  , __time
  , __datetimeLocal
  , __number
  , __range
  , __color
  , __checkbox
  , __radio
  , __file
  , __submit
  , __image
  , __reset
  , __button
  , __soft
  , __hard
  , __get
  , __post
  , __dialog
  , __applicationXWwwFormUrlencoded
  , __multipartFormData
  , __textPlain
  , __shipping
  , __billing
  , __home
  , __work
  , __mobile
  , __fax
  , __pager
  , __off
  , __on
  , __name
  , __honorificPrefix
  , __givenName
  , __additionalName
  , __familyName
  , __honorificSuffix
  , __nickname
  , __organizationTitle
  , __username
  , __newPassword
  , __currentPassword
  , __oneTimeCode
  , __organization
  , __streetAddress
  , __addressLine1
  , __addressLine2
  , __addressLine3
  , __addressLevel4
  , __addressLevel3
  , __addressLevel2
  , __addressLevel1
  , __country
  , __countryName
  , __postalCode
  , __ccName
  , __ccGivenName
  , __ccAdditionalName
  , __ccFamilyName
  , __ccNumber
  , __ccExp
  , __ccExpMonth
  , __ccExpYear
  , __ccCsc
  , __ccType
  , __transactionCurrency
  , __transactionAmount
  , __language
  , __bday
  , __bdayDay
  , __bdayMonth
  , __bdayYear
  , __sex
  , __photo
  , __telCountryCode
  , __telNational
  , __telAreaCode
  , __telLocal
  , __telLocalPrefix
  , __telLocalSuffix
  , __telExtension
  , __impp
  , __value
  , __untilFound
  , __sentences
  , __words
  , __characters
  , __numeric
  , __decimal
  , __enter
  , __done
  , __go
  , __previous
  , __send
  , __manual
  , __toggle
  , __show
  , __hide
  , __allowPopups
  , __allowTopNavigation
  , __allowTopNavigationByUserActivation
  , __allowSameOrigin
  , __allowForms
  , __allowPointerLock
  , __allowScripts
  , __allowPopupsToEscapeSandbox
  , __allowModals
  , __allowOrientationLock
  , __allowPresentation
  , __allowDownloads
  , __allowTopNavigationToCustomProtocols
  , class TagToDeku
  , module Deku.Control
  , module Types
  ) where

import Control.Applicative (pure) as Applicative
import Control.Category ((<<<))
import Data.Functor (map) as Functor
import FRP.Event as FRP.Event
import Deku.Control (elementify2)
import Deku.Core (Nut)
import Type.Proxy (Proxy)
import Deku.DOM.Types (_unset, Keyword(..), EventEffect) as Types
import Deku.Attribute as Deku.Attribute
import Data.Newtype as Data.Newtype
import Deku.Control (text, text_) as Deku.Control

type HTMLHtmlElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLHtmlElement"
  , version :: String
  , manifest :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLHeadElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLHeadElement"
  , profile :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLTitleElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLTitleElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLBaseElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLBaseElement"
  , target :: String
  , href :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLLinkElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLLinkElement"
  , target :: String
  , urn :: String
  , rev :: String
  , methods :: String
  , charset :: String
  , fetchpriority :: String
  , disabled :: String
  , color :: String
  , blocking :: String
  , as :: String
  , sizes :: String
  , imagesizes :: String
  , imagesrcset :: String
  , title :: String
  , referrerpolicy :: String
  , type :: String
  , hreflang :: String
  , integrity :: String
  , media :: String
  , crossorigin :: String
  , rel :: String
  , href :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLMetaElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLMetaElement"
  , scheme :: String
  , httpEquiv :: String
  , media :: String
  , name :: String
  , content :: String
  , charset :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLStyleElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLStyleElement"
  , type :: String
  , title :: String
  , blocking :: String
  , media :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLBodyElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLBodyElement"
  , vlink :: String
  , topmargin :: String
  , text :: String
  , rightmargin :: String
  , marginwidth :: String
  , marginheight :: String
  , link :: String
  , leftmargin :: String
  , bottommargin :: String
  , bgcolor :: String
  , alink :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLArticleElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLArticleElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLSectionElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLSectionElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLNavElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLNavElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLAsideElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLAsideElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLH1Element (r :: Row Type) =
  ( __nominal :: Proxy "HTMLH1Element"
  , align :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLH2Element (r :: Row Type) =
  ( __nominal :: Proxy "HTMLH2Element"
  , align :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLH3Element (r :: Row Type) =
  ( __nominal :: Proxy "HTMLH3Element"
  , align :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLH4Element (r :: Row Type) =
  ( __nominal :: Proxy "HTMLH4Element"
  , align :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLH5Element (r :: Row Type) =
  ( __nominal :: Proxy "HTMLH5Element"
  , align :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLH6Element (r :: Row Type) =
  ( __nominal :: Proxy "HTMLH6Element"
  , align :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLHgroupElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLHgroupElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLHeaderElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLHeaderElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLFooterElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLFooterElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLAddressElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLAddressElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLParagraphElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLParagraphElement"
  , align :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLHRElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLHRElement"
  , width :: String
  , size :: String
  , noshade :: String
  , color :: String
  , align :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLPreElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLPreElement"
  , width :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLBlockquoteElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLBlockquoteElement"
  , cite :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLOlElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLOlElement"
  , compact :: String
  , type :: String
  , start :: String
  , reversed :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLUlElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLUlElement"
  , type :: String
  , compact :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLMenuElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLMenuElement"
  , compact :: String
  , label :: String
  , type :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLLiElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLLiElement"
  , type :: String
  , value :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLDlElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLDlElement"
  , compact :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLDtElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLDtElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLDdElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLDdElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLFigureElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLFigureElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLFigcaptionElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLFigcaptionElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLMainElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLMainElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLSearchElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLSearchElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLDivElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLDivElement"
  , align :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLAnchorElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLAnchorElement"
  , urn :: String
  , rev :: String
  , name :: String
  , methods :: String
  , shape :: String
  , coords :: String
  , charset :: String
  , referrerpolicy :: String
  , type :: String
  , hreflang :: String
  , rel :: String
  , ping :: String
  , download :: String
  , target :: String
  , href :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLEmElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLEmElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLStrongElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLStrongElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLSmallElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLSmallElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLSElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLSElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLCiteElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLCiteElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLQElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLQElement"
  , cite :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLDfnElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLDfnElement"
  , title :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLAbbrElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLAbbrElement"
  , title :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLRubyElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLRubyElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLRtElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLRtElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLRpElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLRpElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLDataElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLDataElement"
  , value :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLTimeElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLTimeElement"
  , datetime :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLCodeElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLCodeElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLVarElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLVarElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLSampElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLSampElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLKbdElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLKbdElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLSubElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLSubElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLSupElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLSupElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLIElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLIElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLBElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLBElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLUElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLUElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLMarkElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLMarkElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLBdiElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLBdiElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLBdoElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLBdoElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLSpanElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLSpanElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLBRElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLBRElement"
  , clear :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLWbrElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLWbrElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLInsElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLInsElement"
  , datetime :: String
  , cite :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLDelElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLDelElement"
  , datetime :: String
  , cite :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLPictureElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLPictureElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLSourceElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLSourceElement"
  , height :: String
  , width :: String
  , src :: String
  , sizes :: String
  , srcset :: String
  , media :: String
  , type :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLImgElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLImgElement"
  , vspace :: String
  , hspace :: String
  , border :: String
  , align :: String
  , lowsrc :: String
  , longdesc :: String
  , name :: String
  , height :: String
  , width :: String
  , usemap :: String
  , ismap :: String
  , loading :: String
  , fetchpriority :: String
  , decoding :: String
  , referrerpolicy :: String
  , crossorigin :: String
  , sizes :: String
  , alt :: String
  , srcset :: String
  , src :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLIframeElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLIframeElement"
  , vspace :: String
  , scrolling :: String
  , marginwidth :: String
  , marginheight :: String
  , hspace :: String
  , framespacing :: String
  , frameborder :: String
  , allowtransparency :: String
  , align :: String
  , longdesc :: String
  , height :: String
  , width :: String
  , loading :: String
  , referrerpolicy :: String
  , allowfullscreen :: String
  , allow :: String
  , sandbox :: String
  , name :: String
  , srcdoc :: String
  , src :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLEmbedElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLEmbedElement"
  , vspace :: String
  , hspace :: String
  , align :: String
  , name :: String
  , height :: String
  , width :: String
  , type :: String
  , src :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLObjectElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLObjectElement"
  , vspace :: String
  , hspace :: String
  , border :: String
  , align :: String
  , typemustmatch :: String
  , standby :: String
  , declare :: String
  , codetype :: String
  , codebase :: String
  , code :: String
  , classid :: String
  , archive :: String
  , usemap :: String
  , autocomplete :: String
  , disabled :: String
  , dirname :: String
  , form :: String
  , height :: String
  , width :: String
  , name :: String
  , type :: String
  , data :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLVideoElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLVideoElement"
  , height :: String
  , width :: String
  , muted :: String
  , controls :: String
  , autoplay :: String
  , loop :: String
  , preload :: String
  , crossorigin :: String
  , src :: String
  , playsinline :: String
  , poster :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLAudioElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLAudioElement"
  , muted :: String
  , controls :: String
  , autoplay :: String
  , loop :: String
  , preload :: String
  , crossorigin :: String
  , src :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLTrackElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLTrackElement"
  , default :: String
  , label :: String
  , srclang :: String
  , src :: String
  , kind :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLMapElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLMapElement"
  , name :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLAreaElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLAreaElement"
  , nohref :: String
  , type :: String
  , hreflang :: String
  , coords :: String
  , shape :: String
  , alt :: String
  , referrerpolicy :: String
  , rel :: String
  , ping :: String
  , download :: String
  , target :: String
  , href :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLTableElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLTableElement"
  , width :: String
  , rules :: String
  , height :: String
  , frame :: String
  , cellspacing :: String
  , cellpadding :: String
  , bordercolor :: String
  , border :: String
  , bgcolor :: String
  , align :: String
  , summary :: String
  , datapagesize :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLCaptionElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLCaptionElement"
  , align :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLColgroupElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLColgroupElement"
  , span :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLColElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLColElement"
  , width :: String
  , valign :: String
  , charoff :: String
  , char :: String
  , align :: String
  , span :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLTbodyElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLTbodyElement"
  , valign :: String
  , height :: String
  , charoff :: String
  , char :: String
  , align :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLTheadElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLTheadElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLTfootElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLTfootElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLTrElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLTrElement"
  , valign :: String
  , height :: String
  , charoff :: String
  , char :: String
  , bgcolor :: String
  , align :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLTableDataCellElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLTableDataCellElement"
  , width :: String
  , valign :: String
  , nowrap :: String
  , height :: String
  , charoff :: String
  , char :: String
  , bgcolor :: String
  , align :: String
  , scope :: String
  , axis :: String
  , abbr :: String
  , headers :: String
  , rowspan :: String
  , colspan :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLThElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLThElement"
  , width :: String
  , valign :: String
  , nowrap :: String
  , height :: String
  , charoff :: String
  , char :: String
  , bgcolor :: String
  , align :: String
  , axis :: String
  , headers :: String
  , rowspan :: String
  , colspan :: String
  , abbr :: String
  , scope :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLFormElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLFormElement"
  , accept :: String
  , formnovalidate :: String
  , novalidate :: String
  , formtarget :: String
  , target :: String
  , formenctype :: String
  , enctype :: String
  , formmethod :: String
  , method :: String
  , formaction :: String
  , action :: String
  , rel :: String
  , autocomplete :: String
  , name :: String
  , acceptCharset :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLLabelElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLLabelElement"
  , for :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLInputElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLInputElement"
  , capture :: String
  , vspace :: String
  , hspace :: String
  , border :: String
  , align :: String
  , usemap :: String
  , ismap :: String
  , autocomplete :: String
  , disabled :: String
  , minlength :: String
  , maxlength :: String
  , dirname :: String
  , name :: String
  , form :: String
  , placeholder :: String
  , list :: String
  , step :: String
  , max :: String
  , min :: String
  , title :: String
  , pattern :: String
  , multiple :: String
  , required :: String
  , readonly :: String
  , size :: String
  , alt :: String
  , src :: String
  , accept :: String
  , checked :: String
  , value :: String
  , type :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLButtonElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLButtonElement"
  , autocomplete :: String
  , formnovalidate :: String
  , novalidate :: String
  , formtarget :: String
  , target :: String
  , formenctype :: String
  , enctype :: String
  , formmethod :: String
  , method :: String
  , formaction :: String
  , action :: String
  , disabled :: String
  , dirname :: String
  , name :: String
  , form :: String
  , value :: String
  , type :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLSelectElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLSelectElement"
  , autocomplete :: String
  , disabled :: String
  , dirname :: String
  , name :: String
  , form :: String
  , required :: String
  , size :: String
  , multiple :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLDatalistElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLDatalistElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLOptgroupElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLOptgroupElement"
  , label :: String
  , disabled :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLOptionElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLOptionElement"
  , name :: String
  , selected :: String
  , value :: String
  , label :: String
  , disabled :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLTextAreaElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLTextAreaElement"
  , autocomplete :: String
  , disabled :: String
  , minlength :: String
  , maxlength :: String
  , dirname :: String
  , name :: String
  , form :: String
  , placeholder :: String
  , required :: String
  , wrap :: String
  , rows :: String
  , cols :: String
  , readonly :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLOutputElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLOutputElement"
  , autocomplete :: String
  , disabled :: String
  , dirname :: String
  , name :: String
  , form :: String
  , for :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLProgressElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLProgressElement"
  , max :: String
  , value :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLMeterElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLMeterElement"
  , optimum :: String
  , high :: String
  , low :: String
  , value :: String
  , max :: String
  , min :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLFieldsetElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLFieldsetElement"
  , autocomplete :: String
  , disabled :: String
  , dirname :: String
  , name :: String
  , form :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLLegendElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLLegendElement"
  , align :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLDetailsElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLDetailsElement"
  , open :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLSummaryElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLSummaryElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLDialogElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLDialogElement"
  , open :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLScriptElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLScriptElement"
  , for :: String
  , event :: String
  , language :: String
  , charset :: String
  , fetchpriority :: String
  , blocking :: String
  , referrerpolicy :: String
  , integrity :: String
  , crossorigin :: String
  , defer :: String
  , async :: String
  , nomodule :: String
  , src :: String
  , type :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLNoscriptElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLNoscriptElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLTemplateElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLTemplateElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLSlotElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLSlotElement"
  , name :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLCanvasElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLCanvasElement"
  , height :: String
  , width :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLAppletElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLAppletElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLAcronymElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLAcronymElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLBgsoundElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLBgsoundElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLDirElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLDirElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLNoframesElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLNoframesElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLIsindexElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLIsindexElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLKeygenElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLKeygenElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLListingElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLListingElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLMenuitemElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLMenuitemElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLNextidElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLNextidElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLNoembedElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLNoembedElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLParamElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLParamElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLPlaintextElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLPlaintextElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLRbElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLRbElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLRtcElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLRtcElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLStrikeElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLStrikeElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLXmpElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLXmpElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLBasefontElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLBasefontElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLBigElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLBigElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLBlinkElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLBlinkElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLCenterElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLCenterElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLFontElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLFontElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLMulticolElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLMulticolElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLNobrElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLNobrElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLSpacerElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLSpacerElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLTtElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLTtElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLMarqueeElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLMarqueeElement"
  , loop :: String
  , truespeed :: String
  , direction :: String
  , behavior :: String
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLFramesetElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLFramesetElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HTMLFrameElement (r :: Row Type) =
  ( __nominal :: Proxy "HTMLFrameElement"
  | ARIAMixin (GlobalEventHandlers (Global (HtmlGlobal (HtmlsvgGlobal r))))
  )

type HtmlsvgGlobal (r :: Row Type) =
  (__nominal :: Proxy "HtmlsvgGlobal", tabindex :: String, nonce :: String | r)

type Global (r :: Row Type) =
  (__nominal :: Proxy "Global", slot :: String, id :: String, class :: String | r)

type HtmlGlobal (r :: Row Type) =
  ( __nominal :: Proxy "HtmlGlobal"
  , popovertargetaction :: String
  , popovertarget :: String
  , popover :: String
  , draggable :: String
  , enterkeyhint :: String
  , inputmode :: String
  , autocapitalize :: String
  , spellcheck :: String
  , contenteditable :: String
  , accesskey :: String
  , autofocus :: String
  , hidden :: String
  , itemprop :: String
  , itemref :: String
  , itemid :: String
  , itemtype :: String
  , itemscope :: String
  , is :: String
  , style :: String
  , dir :: String
  , translate :: String
  , lang :: String
  , title :: String
  | r
  )

type GlobalEventHandlers (r :: Row Type) =
  ( __nominal :: Proxy "GlobalEventHandlers"
  , onAnimationcancel :: Types.EventEffect
  , onAnimationend :: Types.EventEffect
  , onAnimationiteration :: Types.EventEffect
  , onAnimationstart :: Types.EventEffect
  , onTransitioncancel :: Types.EventEffect
  , onTransitionend :: Types.EventEffect
  , onTransitionstart :: Types.EventEffect
  , onTransitionrun :: Types.EventEffect
  , onSelectionchange :: Types.EventEffect
  , onSelectstart :: Types.EventEffect
  , onTouchcancel :: Types.EventEffect
  , onTouchmove :: Types.EventEffect
  , onTouchend :: Types.EventEffect
  , onTouchstart :: Types.EventEffect
  , onLostpointercapture :: Types.EventEffect
  , onGotpointercapture :: Types.EventEffect
  , onPointerleave :: Types.EventEffect
  , onPointerout :: Types.EventEffect
  , onPointercancel :: Types.EventEffect
  , onPointerup :: Types.EventEffect
  , onPointerrawupdate :: Types.EventEffect
  , onPointermove :: Types.EventEffect
  , onPointerdown :: Types.EventEffect
  , onPointerenter :: Types.EventEffect
  , onPointerover :: Types.EventEffect
  , onScrollend :: Types.EventEffect
  , onScroll :: Types.EventEffect
  , onResize :: Types.EventEffect
  , onLoad :: Types.EventEffect
  , onFocus :: Types.EventEffect
  , onError :: Types.EventEffect
  , onBlur :: Types.EventEffect
  , onWheel :: Types.EventEffect
  , onWebkittransitionend :: Types.EventEffect
  , onWebkitanimationstart :: Types.EventEffect
  , onWebkitanimationiteration :: Types.EventEffect
  , onWebkitanimationend :: Types.EventEffect
  , onWaiting :: Types.EventEffect
  , onVolumechange :: Types.EventEffect
  , onToggle :: Types.EventEffect
  , onTimeupdate :: Types.EventEffect
  , onSuspend :: Types.EventEffect
  , onSubmit :: Types.EventEffect
  , onStalled :: Types.EventEffect
  , onSlotchange :: Types.EventEffect
  , onSelect :: Types.EventEffect
  , onSeeking :: Types.EventEffect
  , onSeeked :: Types.EventEffect
  , onSecuritypolicyviolation :: Types.EventEffect
  , onReset :: Types.EventEffect
  , onRatechange :: Types.EventEffect
  , onProgress :: Types.EventEffect
  , onPlaying :: Types.EventEffect
  , onPlay :: Types.EventEffect
  , onPause :: Types.EventEffect
  , onPaste :: Types.EventEffect
  , onMouseup :: Types.EventEffect
  , onMouseover :: Types.EventEffect
  , onMouseout :: Types.EventEffect
  , onMousemove :: Types.EventEffect
  , onMouseleave :: Types.EventEffect
  , onMouseenter :: Types.EventEffect
  , onMousedown :: Types.EventEffect
  , onLoadstart :: Types.EventEffect
  , onLoadedmetadata :: Types.EventEffect
  , onLoadeddata :: Types.EventEffect
  , onKeyup :: Types.EventEffect
  , onKeypress :: Types.EventEffect
  , onKeydown :: Types.EventEffect
  , onInvalid :: Types.EventEffect
  , onInput :: Types.EventEffect
  , onFormdata :: Types.EventEffect
  , onEnded :: Types.EventEffect
  , onEmptied :: Types.EventEffect
  , onDurationchange :: Types.EventEffect
  , onDrop :: Types.EventEffect
  , onDragstart :: Types.EventEffect
  , onDragover :: Types.EventEffect
  , onDragleave :: Types.EventEffect
  , onDragenter :: Types.EventEffect
  , onDragend :: Types.EventEffect
  , onDrag :: Types.EventEffect
  , onDblclick :: Types.EventEffect
  , onCut :: Types.EventEffect
  , onCuechange :: Types.EventEffect
  , onCopy :: Types.EventEffect
  , onContextrestored :: Types.EventEffect
  , onContextmenu :: Types.EventEffect
  , onContextlost :: Types.EventEffect
  , onClose :: Types.EventEffect
  , onClick :: Types.EventEffect
  , onChange :: Types.EventEffect
  , onCanplaythrough :: Types.EventEffect
  , onCanplay :: Types.EventEffect
  , onCancel :: Types.EventEffect
  , onBeforetoggle :: Types.EventEffect
  , onBeforematch :: Types.EventEffect
  , onBeforeinput :: Types.EventEffect
  , onAuxclick :: Types.EventEffect
  , onAbort :: Types.EventEffect
  | r
  )

type ARIAMixin (r :: Row Type) =
  ( __nominal :: Proxy "ARIAMixin"
  , ariaValuetext :: String
  , ariaValuenow :: String
  , ariaValuemin :: String
  , ariaValuemax :: String
  , ariaSort :: String
  , ariaSetsize :: String
  , ariaSelected :: String
  , ariaRowspan :: String
  , ariaRowindextext :: String
  , ariaRowindex :: String
  , ariaRowcount :: String
  , ariaRoledescription :: String
  , ariaRequired :: String
  , ariaReadonly :: String
  , ariaPressed :: String
  , ariaPosinset :: String
  , ariaPlaceholder :: String
  , ariaOwns :: String
  , ariaOrientation :: String
  , ariaMultiselectable :: String
  , ariaMultiline :: String
  , ariaModal :: String
  , ariaLive :: String
  , ariaLevel :: String
  , ariaLabelledby :: String
  , ariaLabel :: String
  , ariaKeyshortcuts :: String
  , ariaInvalid :: String
  , ariaHidden :: String
  , ariaHaspopup :: String
  , ariaFlowto :: String
  , ariaExpanded :: String
  , ariaErrormessage :: String
  , ariaDisabled :: String
  , ariaDetails :: String
  , ariaDescription :: String
  , ariaDescribedby :: String
  , ariaCurrent :: String
  , ariaControls :: String
  , ariaColspan :: String
  , ariaColindextext :: String
  , ariaColindex :: String
  , ariaColcount :: String
  , ariaChecked :: String
  , ariaBusy :: String
  , ariaAutocomplete :: String
  , ariaAtomic :: String
  , ariaActivedescendant :: String
  , role :: String
  | r
  )

class TagToDeku (tag :: Symbol) (interface :: Row Type) | tag -> interface

instance TagToDeku "html" (HTMLHtmlElement ())

html :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLHtmlElement ()))) -> Array Nut -> Nut
html = elementify2 {-  -} "html"

html_ :: Array Nut -> Nut
html_ = elementify2 {-  -} "html" []

instance TagToDeku "head" (HTMLHeadElement ())

head :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLHeadElement ()))) -> Array Nut -> Nut
head = elementify2 {-  -} "head"

head_ :: Array Nut -> Nut
head_ = elementify2 {-  -} "head" []

instance TagToDeku "title" (HTMLTitleElement ())

title
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLTitleElement ()))) -> Array Nut -> Nut
title = elementify2 {-  -} "title"

title_ :: Array Nut -> Nut
title_ = elementify2 {-  -} "title" []

instance TagToDeku "base" (HTMLBaseElement ())

base :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLBaseElement ()))) -> Array Nut -> Nut
base = elementify2 {-  -} "base"

base_ :: Array Nut -> Nut
base_ = elementify2 {-  -} "base" []

instance TagToDeku "link" (HTMLLinkElement ())

link :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLLinkElement ()))) -> Array Nut -> Nut
link = elementify2 {-  -} "link"

link_ :: Array Nut -> Nut
link_ = elementify2 {-  -} "link" []

instance TagToDeku "meta" (HTMLMetaElement ())

meta :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLMetaElement ()))) -> Array Nut -> Nut
meta = elementify2 {-  -} "meta"

meta_ :: Array Nut -> Nut
meta_ = elementify2 {-  -} "meta" []

instance TagToDeku "style" (HTMLStyleElement ())

style
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLStyleElement ()))) -> Array Nut -> Nut
style = elementify2 {-  -} "style"

style_ :: Array Nut -> Nut
style_ = elementify2 {-  -} "style" []

instance TagToDeku "body" (HTMLBodyElement ())

body :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLBodyElement ()))) -> Array Nut -> Nut
body = elementify2 {-  -} "body"

body_ :: Array Nut -> Nut
body_ = elementify2 {-  -} "body" []

instance TagToDeku "article" (HTMLArticleElement ())

article
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLArticleElement ()))) -> Array Nut -> Nut
article = elementify2 {-  -} "article"

article_ :: Array Nut -> Nut
article_ = elementify2 {-  -} "article" []

instance TagToDeku "section" (HTMLSectionElement ())

section
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLSectionElement ()))) -> Array Nut -> Nut
section = elementify2 {-  -} "section"

section_ :: Array Nut -> Nut
section_ = elementify2 {-  -} "section" []

instance TagToDeku "nav" (HTMLNavElement ())

nav :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLNavElement ()))) -> Array Nut -> Nut
nav = elementify2 {-  -} "nav"

nav_ :: Array Nut -> Nut
nav_ = elementify2 {-  -} "nav" []

instance TagToDeku "aside" (HTMLAsideElement ())

aside
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLAsideElement ()))) -> Array Nut -> Nut
aside = elementify2 {-  -} "aside"

aside_ :: Array Nut -> Nut
aside_ = elementify2 {-  -} "aside" []

instance TagToDeku "h1" (HTMLH1Element ())

h1 :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLH1Element ()))) -> Array Nut -> Nut
h1 = elementify2 {-  -} "h1"

h1_ :: Array Nut -> Nut
h1_ = elementify2 {-  -} "h1" []

instance TagToDeku "h2" (HTMLH2Element ())

h2 :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLH2Element ()))) -> Array Nut -> Nut
h2 = elementify2 {-  -} "h2"

h2_ :: Array Nut -> Nut
h2_ = elementify2 {-  -} "h2" []

instance TagToDeku "h3" (HTMLH3Element ())

h3 :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLH3Element ()))) -> Array Nut -> Nut
h3 = elementify2 {-  -} "h3"

h3_ :: Array Nut -> Nut
h3_ = elementify2 {-  -} "h3" []

instance TagToDeku "h4" (HTMLH4Element ())

h4 :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLH4Element ()))) -> Array Nut -> Nut
h4 = elementify2 {-  -} "h4"

h4_ :: Array Nut -> Nut
h4_ = elementify2 {-  -} "h4" []

instance TagToDeku "h5" (HTMLH5Element ())

h5 :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLH5Element ()))) -> Array Nut -> Nut
h5 = elementify2 {-  -} "h5"

h5_ :: Array Nut -> Nut
h5_ = elementify2 {-  -} "h5" []

instance TagToDeku "h6" (HTMLH6Element ())

h6 :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLH6Element ()))) -> Array Nut -> Nut
h6 = elementify2 {-  -} "h6"

h6_ :: Array Nut -> Nut
h6_ = elementify2 {-  -} "h6" []

instance TagToDeku "hgroup" (HTMLHgroupElement ())

hgroup
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLHgroupElement ()))) -> Array Nut -> Nut
hgroup = elementify2 {-  -} "hgroup"

hgroup_ :: Array Nut -> Nut
hgroup_ = elementify2 {-  -} "hgroup" []

instance TagToDeku "header" (HTMLHeaderElement ())

header
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLHeaderElement ()))) -> Array Nut -> Nut
header = elementify2 {-  -} "header"

header_ :: Array Nut -> Nut
header_ = elementify2 {-  -} "header" []

instance TagToDeku "footer" (HTMLFooterElement ())

footer
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLFooterElement ()))) -> Array Nut -> Nut
footer = elementify2 {-  -} "footer"

footer_ :: Array Nut -> Nut
footer_ = elementify2 {-  -} "footer" []

instance TagToDeku "address" (HTMLAddressElement ())

address
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLAddressElement ()))) -> Array Nut -> Nut
address = elementify2 {-  -} "address"

address_ :: Array Nut -> Nut
address_ = elementify2 {-  -} "address" []

instance TagToDeku "p" (HTMLParagraphElement ())

p
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLParagraphElement ())))
  -> Array Nut
  -> Nut
p = elementify2 {-  -} "p"

p_ :: Array Nut -> Nut
p_ = elementify2 {-  -} "p" []

instance TagToDeku "hr" (HTMLHRElement ())

hr :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLHRElement ()))) -> Array Nut -> Nut
hr = elementify2 {-  -} "hr"

hr_ :: Array Nut -> Nut
hr_ = elementify2 {-  -} "hr" []

instance TagToDeku "pre" (HTMLPreElement ())

pre :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLPreElement ()))) -> Array Nut -> Nut
pre = elementify2 {-  -} "pre"

pre_ :: Array Nut -> Nut
pre_ = elementify2 {-  -} "pre" []

instance TagToDeku "blockquote" (HTMLBlockquoteElement ())

blockquote
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLBlockquoteElement ())))
  -> Array Nut
  -> Nut
blockquote = elementify2 {-  -} "blockquote"

blockquote_ :: Array Nut -> Nut
blockquote_ = elementify2 {-  -} "blockquote" []

instance TagToDeku "ol" (HTMLOlElement ())

ol :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLOlElement ()))) -> Array Nut -> Nut
ol = elementify2 {-  -} "ol"

ol_ :: Array Nut -> Nut
ol_ = elementify2 {-  -} "ol" []

instance TagToDeku "ul" (HTMLUlElement ())

ul :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLUlElement ()))) -> Array Nut -> Nut
ul = elementify2 {-  -} "ul"

ul_ :: Array Nut -> Nut
ul_ = elementify2 {-  -} "ul" []

instance TagToDeku "menu" (HTMLMenuElement ())

menu :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLMenuElement ()))) -> Array Nut -> Nut
menu = elementify2 {-  -} "menu"

menu_ :: Array Nut -> Nut
menu_ = elementify2 {-  -} "menu" []

instance TagToDeku "li" (HTMLLiElement ())

li :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLLiElement ()))) -> Array Nut -> Nut
li = elementify2 {-  -} "li"

li_ :: Array Nut -> Nut
li_ = elementify2 {-  -} "li" []

instance TagToDeku "dl" (HTMLDlElement ())

dl :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLDlElement ()))) -> Array Nut -> Nut
dl = elementify2 {-  -} "dl"

dl_ :: Array Nut -> Nut
dl_ = elementify2 {-  -} "dl" []

instance TagToDeku "dt" (HTMLDtElement ())

dt :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLDtElement ()))) -> Array Nut -> Nut
dt = elementify2 {-  -} "dt"

dt_ :: Array Nut -> Nut
dt_ = elementify2 {-  -} "dt" []

instance TagToDeku "dd" (HTMLDdElement ())

dd :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLDdElement ()))) -> Array Nut -> Nut
dd = elementify2 {-  -} "dd"

dd_ :: Array Nut -> Nut
dd_ = elementify2 {-  -} "dd" []

instance TagToDeku "figure" (HTMLFigureElement ())

figure
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLFigureElement ()))) -> Array Nut -> Nut
figure = elementify2 {-  -} "figure"

figure_ :: Array Nut -> Nut
figure_ = elementify2 {-  -} "figure" []

instance TagToDeku "figcaption" (HTMLFigcaptionElement ())

figcaption
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLFigcaptionElement ())))
  -> Array Nut
  -> Nut
figcaption = elementify2 {-  -} "figcaption"

figcaption_ :: Array Nut -> Nut
figcaption_ = elementify2 {-  -} "figcaption" []

instance TagToDeku "main" (HTMLMainElement ())

main :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLMainElement ()))) -> Array Nut -> Nut
main = elementify2 {-  -} "main"

main_ :: Array Nut -> Nut
main_ = elementify2 {-  -} "main" []

instance TagToDeku "search" (HTMLSearchElement ())

search
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLSearchElement ()))) -> Array Nut -> Nut
search = elementify2 {-  -} "search"

search_ :: Array Nut -> Nut
search_ = elementify2 {-  -} "search" []

instance TagToDeku "div" (HTMLDivElement ())

div :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLDivElement ()))) -> Array Nut -> Nut
div = elementify2 {-  -} "div"

div_ :: Array Nut -> Nut
div_ = elementify2 {-  -} "div" []

instance TagToDeku "a" (HTMLAnchorElement ())

a :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLAnchorElement ()))) -> Array Nut -> Nut
a = elementify2 {-  -} "a"

a_ :: Array Nut -> Nut
a_ = elementify2 {-  -} "a" []

instance TagToDeku "em" (HTMLEmElement ())

em :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLEmElement ()))) -> Array Nut -> Nut
em = elementify2 {-  -} "em"

em_ :: Array Nut -> Nut
em_ = elementify2 {-  -} "em" []

instance TagToDeku "strong" (HTMLStrongElement ())

strong
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLStrongElement ()))) -> Array Nut -> Nut
strong = elementify2 {-  -} "strong"

strong_ :: Array Nut -> Nut
strong_ = elementify2 {-  -} "strong" []

instance TagToDeku "small" (HTMLSmallElement ())

small
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLSmallElement ()))) -> Array Nut -> Nut
small = elementify2 {-  -} "small"

small_ :: Array Nut -> Nut
small_ = elementify2 {-  -} "small" []

instance TagToDeku "s" (HTMLSElement ())

s :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLSElement ()))) -> Array Nut -> Nut
s = elementify2 {-  -} "s"

s_ :: Array Nut -> Nut
s_ = elementify2 {-  -} "s" []

instance TagToDeku "cite" (HTMLCiteElement ())

cite :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLCiteElement ()))) -> Array Nut -> Nut
cite = elementify2 {-  -} "cite"

cite_ :: Array Nut -> Nut
cite_ = elementify2 {-  -} "cite" []

instance TagToDeku "q" (HTMLQElement ())

q :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLQElement ()))) -> Array Nut -> Nut
q = elementify2 {-  -} "q"

q_ :: Array Nut -> Nut
q_ = elementify2 {-  -} "q" []

instance TagToDeku "dfn" (HTMLDfnElement ())

dfn :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLDfnElement ()))) -> Array Nut -> Nut
dfn = elementify2 {-  -} "dfn"

dfn_ :: Array Nut -> Nut
dfn_ = elementify2 {-  -} "dfn" []

instance TagToDeku "abbr" (HTMLAbbrElement ())

abbr :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLAbbrElement ()))) -> Array Nut -> Nut
abbr = elementify2 {-  -} "abbr"

abbr_ :: Array Nut -> Nut
abbr_ = elementify2 {-  -} "abbr" []

instance TagToDeku "ruby" (HTMLRubyElement ())

ruby :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLRubyElement ()))) -> Array Nut -> Nut
ruby = elementify2 {-  -} "ruby"

ruby_ :: Array Nut -> Nut
ruby_ = elementify2 {-  -} "ruby" []

instance TagToDeku "rt" (HTMLRtElement ())

rt :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLRtElement ()))) -> Array Nut -> Nut
rt = elementify2 {-  -} "rt"

rt_ :: Array Nut -> Nut
rt_ = elementify2 {-  -} "rt" []

instance TagToDeku "rp" (HTMLRpElement ())

rp :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLRpElement ()))) -> Array Nut -> Nut
rp = elementify2 {-  -} "rp"

rp_ :: Array Nut -> Nut
rp_ = elementify2 {-  -} "rp" []

instance TagToDeku "data" (HTMLDataElement ())

xdata
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLDataElement ()))) -> Array Nut -> Nut
xdata = elementify2 {-  -} "data"

xdata_ :: Array Nut -> Nut
xdata_ = elementify2 {-  -} "data" []

instance TagToDeku "time" (HTMLTimeElement ())

time :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLTimeElement ()))) -> Array Nut -> Nut
time = elementify2 {-  -} "time"

time_ :: Array Nut -> Nut
time_ = elementify2 {-  -} "time" []

instance TagToDeku "code" (HTMLCodeElement ())

code :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLCodeElement ()))) -> Array Nut -> Nut
code = elementify2 {-  -} "code"

code_ :: Array Nut -> Nut
code_ = elementify2 {-  -} "code" []

instance TagToDeku "var" (HTMLVarElement ())

var :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLVarElement ()))) -> Array Nut -> Nut
var = elementify2 {-  -} "var"

var_ :: Array Nut -> Nut
var_ = elementify2 {-  -} "var" []

instance TagToDeku "samp" (HTMLSampElement ())

samp :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLSampElement ()))) -> Array Nut -> Nut
samp = elementify2 {-  -} "samp"

samp_ :: Array Nut -> Nut
samp_ = elementify2 {-  -} "samp" []

instance TagToDeku "kbd" (HTMLKbdElement ())

kbd :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLKbdElement ()))) -> Array Nut -> Nut
kbd = elementify2 {-  -} "kbd"

kbd_ :: Array Nut -> Nut
kbd_ = elementify2 {-  -} "kbd" []

instance TagToDeku "sub" (HTMLSubElement ())

sub :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLSubElement ()))) -> Array Nut -> Nut
sub = elementify2 {-  -} "sub"

sub_ :: Array Nut -> Nut
sub_ = elementify2 {-  -} "sub" []

instance TagToDeku "sup" (HTMLSupElement ())

sup :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLSupElement ()))) -> Array Nut -> Nut
sup = elementify2 {-  -} "sup"

sup_ :: Array Nut -> Nut
sup_ = elementify2 {-  -} "sup" []

instance TagToDeku "i" (HTMLIElement ())

i :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLIElement ()))) -> Array Nut -> Nut
i = elementify2 {-  -} "i"

i_ :: Array Nut -> Nut
i_ = elementify2 {-  -} "i" []

instance TagToDeku "b" (HTMLBElement ())

b :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLBElement ()))) -> Array Nut -> Nut
b = elementify2 {-  -} "b"

b_ :: Array Nut -> Nut
b_ = elementify2 {-  -} "b" []

instance TagToDeku "u" (HTMLUElement ())

u :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLUElement ()))) -> Array Nut -> Nut
u = elementify2 {-  -} "u"

u_ :: Array Nut -> Nut
u_ = elementify2 {-  -} "u" []

instance TagToDeku "mark" (HTMLMarkElement ())

mark :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLMarkElement ()))) -> Array Nut -> Nut
mark = elementify2 {-  -} "mark"

mark_ :: Array Nut -> Nut
mark_ = elementify2 {-  -} "mark" []

instance TagToDeku "bdi" (HTMLBdiElement ())

bdi :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLBdiElement ()))) -> Array Nut -> Nut
bdi = elementify2 {-  -} "bdi"

bdi_ :: Array Nut -> Nut
bdi_ = elementify2 {-  -} "bdi" []

instance TagToDeku "bdo" (HTMLBdoElement ())

bdo :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLBdoElement ()))) -> Array Nut -> Nut
bdo = elementify2 {-  -} "bdo"

bdo_ :: Array Nut -> Nut
bdo_ = elementify2 {-  -} "bdo" []

instance TagToDeku "span" (HTMLSpanElement ())

span :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLSpanElement ()))) -> Array Nut -> Nut
span = elementify2 {-  -} "span"

span_ :: Array Nut -> Nut
span_ = elementify2 {-  -} "span" []

instance TagToDeku "br" (HTMLBRElement ())

br :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLBRElement ()))) -> Array Nut -> Nut
br = elementify2 {-  -} "br"

br_ :: Array Nut -> Nut
br_ = elementify2 {-  -} "br" []

instance TagToDeku "wbr" (HTMLWbrElement ())

wbr :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLWbrElement ()))) -> Array Nut -> Nut
wbr = elementify2 {-  -} "wbr"

wbr_ :: Array Nut -> Nut
wbr_ = elementify2 {-  -} "wbr" []

instance TagToDeku "ins" (HTMLInsElement ())

ins :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLInsElement ()))) -> Array Nut -> Nut
ins = elementify2 {-  -} "ins"

ins_ :: Array Nut -> Nut
ins_ = elementify2 {-  -} "ins" []

instance TagToDeku "del" (HTMLDelElement ())

del :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLDelElement ()))) -> Array Nut -> Nut
del = elementify2 {-  -} "del"

del_ :: Array Nut -> Nut
del_ = elementify2 {-  -} "del" []

instance TagToDeku "picture" (HTMLPictureElement ())

picture
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLPictureElement ()))) -> Array Nut -> Nut
picture = elementify2 {-  -} "picture"

picture_ :: Array Nut -> Nut
picture_ = elementify2 {-  -} "picture" []

instance TagToDeku "source" (HTMLSourceElement ())

source
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLSourceElement ()))) -> Array Nut -> Nut
source = elementify2 {-  -} "source"

source_ :: Array Nut -> Nut
source_ = elementify2 {-  -} "source" []

instance TagToDeku "img" (HTMLImgElement ())

img :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLImgElement ()))) -> Array Nut -> Nut
img = elementify2 {-  -} "img"

img_ :: Array Nut -> Nut
img_ = elementify2 {-  -} "img" []

instance TagToDeku "iframe" (HTMLIframeElement ())

iframe
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLIframeElement ()))) -> Array Nut -> Nut
iframe = elementify2 {-  -} "iframe"

iframe_ :: Array Nut -> Nut
iframe_ = elementify2 {-  -} "iframe" []

instance TagToDeku "embed" (HTMLEmbedElement ())

embed
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLEmbedElement ()))) -> Array Nut -> Nut
embed = elementify2 {-  -} "embed"

embed_ :: Array Nut -> Nut
embed_ = elementify2 {-  -} "embed" []

instance TagToDeku "object" (HTMLObjectElement ())

object
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLObjectElement ()))) -> Array Nut -> Nut
object = elementify2 {-  -} "object"

object_ :: Array Nut -> Nut
object_ = elementify2 {-  -} "object" []

instance TagToDeku "video" (HTMLVideoElement ())

video
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLVideoElement ()))) -> Array Nut -> Nut
video = elementify2 {-  -} "video"

video_ :: Array Nut -> Nut
video_ = elementify2 {-  -} "video" []

instance TagToDeku "audio" (HTMLAudioElement ())

audio
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLAudioElement ()))) -> Array Nut -> Nut
audio = elementify2 {-  -} "audio"

audio_ :: Array Nut -> Nut
audio_ = elementify2 {-  -} "audio" []

instance TagToDeku "track" (HTMLTrackElement ())

track
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLTrackElement ()))) -> Array Nut -> Nut
track = elementify2 {-  -} "track"

track_ :: Array Nut -> Nut
track_ = elementify2 {-  -} "track" []

instance TagToDeku "map" (HTMLMapElement ())

map :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLMapElement ()))) -> Array Nut -> Nut
map = elementify2 {-  -} "map"

map_ :: Array Nut -> Nut
map_ = elementify2 {-  -} "map" []

instance TagToDeku "area" (HTMLAreaElement ())

area :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLAreaElement ()))) -> Array Nut -> Nut
area = elementify2 {-  -} "area"

area_ :: Array Nut -> Nut
area_ = elementify2 {-  -} "area" []

instance TagToDeku "table" (HTMLTableElement ())

table
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLTableElement ()))) -> Array Nut -> Nut
table = elementify2 {-  -} "table"

table_ :: Array Nut -> Nut
table_ = elementify2 {-  -} "table" []

instance TagToDeku "caption" (HTMLCaptionElement ())

caption
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLCaptionElement ()))) -> Array Nut -> Nut
caption = elementify2 {-  -} "caption"

caption_ :: Array Nut -> Nut
caption_ = elementify2 {-  -} "caption" []

instance TagToDeku "colgroup" (HTMLColgroupElement ())

colgroup
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLColgroupElement ()))) -> Array Nut -> Nut
colgroup = elementify2 {-  -} "colgroup"

colgroup_ :: Array Nut -> Nut
colgroup_ = elementify2 {-  -} "colgroup" []

instance TagToDeku "col" (HTMLColElement ())

col :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLColElement ()))) -> Array Nut -> Nut
col = elementify2 {-  -} "col"

col_ :: Array Nut -> Nut
col_ = elementify2 {-  -} "col" []

instance TagToDeku "tbody" (HTMLTbodyElement ())

tbody
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLTbodyElement ()))) -> Array Nut -> Nut
tbody = elementify2 {-  -} "tbody"

tbody_ :: Array Nut -> Nut
tbody_ = elementify2 {-  -} "tbody" []

instance TagToDeku "thead" (HTMLTheadElement ())

thead
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLTheadElement ()))) -> Array Nut -> Nut
thead = elementify2 {-  -} "thead"

thead_ :: Array Nut -> Nut
thead_ = elementify2 {-  -} "thead" []

instance TagToDeku "tfoot" (HTMLTfootElement ())

tfoot
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLTfootElement ()))) -> Array Nut -> Nut
tfoot = elementify2 {-  -} "tfoot"

tfoot_ :: Array Nut -> Nut
tfoot_ = elementify2 {-  -} "tfoot" []

instance TagToDeku "tr" (HTMLTrElement ())

tr :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLTrElement ()))) -> Array Nut -> Nut
tr = elementify2 {-  -} "tr"

tr_ :: Array Nut -> Nut
tr_ = elementify2 {-  -} "tr" []

instance TagToDeku "td" (HTMLTableDataCellElement ())

td
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLTableDataCellElement ())))
  -> Array Nut
  -> Nut
td = elementify2 {-  -} "td"

td_ :: Array Nut -> Nut
td_ = elementify2 {-  -} "td" []

instance TagToDeku "th" (HTMLThElement ())

th :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLThElement ()))) -> Array Nut -> Nut
th = elementify2 {-  -} "th"

th_ :: Array Nut -> Nut
th_ = elementify2 {-  -} "th" []

instance TagToDeku "form" (HTMLFormElement ())

form :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLFormElement ()))) -> Array Nut -> Nut
form = elementify2 {-  -} "form"

form_ :: Array Nut -> Nut
form_ = elementify2 {-  -} "form" []

instance TagToDeku "label" (HTMLLabelElement ())

label
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLLabelElement ()))) -> Array Nut -> Nut
label = elementify2 {-  -} "label"

label_ :: Array Nut -> Nut
label_ = elementify2 {-  -} "label" []

instance TagToDeku "input" (HTMLInputElement ())

input
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLInputElement ()))) -> Array Nut -> Nut
input = elementify2 {-  -} "input"

input_ :: Array Nut -> Nut
input_ = elementify2 {-  -} "input" []

instance TagToDeku "button" (HTMLButtonElement ())

button
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLButtonElement ()))) -> Array Nut -> Nut
button = elementify2 {-  -} "button"

button_ :: Array Nut -> Nut
button_ = elementify2 {-  -} "button" []

instance TagToDeku "select" (HTMLSelectElement ())

select
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLSelectElement ()))) -> Array Nut -> Nut
select = elementify2 {-  -} "select"

select_ :: Array Nut -> Nut
select_ = elementify2 {-  -} "select" []

instance TagToDeku "datalist" (HTMLDatalistElement ())

datalist
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLDatalistElement ()))) -> Array Nut -> Nut
datalist = elementify2 {-  -} "datalist"

datalist_ :: Array Nut -> Nut
datalist_ = elementify2 {-  -} "datalist" []

instance TagToDeku "optgroup" (HTMLOptgroupElement ())

optgroup
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLOptgroupElement ()))) -> Array Nut -> Nut
optgroup = elementify2 {-  -} "optgroup"

optgroup_ :: Array Nut -> Nut
optgroup_ = elementify2 {-  -} "optgroup" []

instance TagToDeku "option" (HTMLOptionElement ())

option
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLOptionElement ()))) -> Array Nut -> Nut
option = elementify2 {-  -} "option"

option_ :: Array Nut -> Nut
option_ = elementify2 {-  -} "option" []

instance TagToDeku "textarea" (HTMLTextAreaElement ())

textarea
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLTextAreaElement ()))) -> Array Nut -> Nut
textarea = elementify2 {-  -} "textarea"

textarea_ :: Array Nut -> Nut
textarea_ = elementify2 {-  -} "textarea" []

instance TagToDeku "output" (HTMLOutputElement ())

output
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLOutputElement ()))) -> Array Nut -> Nut
output = elementify2 {-  -} "output"

output_ :: Array Nut -> Nut
output_ = elementify2 {-  -} "output" []

instance TagToDeku "progress" (HTMLProgressElement ())

progress
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLProgressElement ()))) -> Array Nut -> Nut
progress = elementify2 {-  -} "progress"

progress_ :: Array Nut -> Nut
progress_ = elementify2 {-  -} "progress" []

instance TagToDeku "meter" (HTMLMeterElement ())

meter
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLMeterElement ()))) -> Array Nut -> Nut
meter = elementify2 {-  -} "meter"

meter_ :: Array Nut -> Nut
meter_ = elementify2 {-  -} "meter" []

instance TagToDeku "fieldset" (HTMLFieldsetElement ())

fieldset
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLFieldsetElement ()))) -> Array Nut -> Nut
fieldset = elementify2 {-  -} "fieldset"

fieldset_ :: Array Nut -> Nut
fieldset_ = elementify2 {-  -} "fieldset" []

instance TagToDeku "legend" (HTMLLegendElement ())

legend
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLLegendElement ()))) -> Array Nut -> Nut
legend = elementify2 {-  -} "legend"

legend_ :: Array Nut -> Nut
legend_ = elementify2 {-  -} "legend" []

instance TagToDeku "details" (HTMLDetailsElement ())

details
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLDetailsElement ()))) -> Array Nut -> Nut
details = elementify2 {-  -} "details"

details_ :: Array Nut -> Nut
details_ = elementify2 {-  -} "details" []

instance TagToDeku "summary" (HTMLSummaryElement ())

summary
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLSummaryElement ()))) -> Array Nut -> Nut
summary = elementify2 {-  -} "summary"

summary_ :: Array Nut -> Nut
summary_ = elementify2 {-  -} "summary" []

instance TagToDeku "dialog" (HTMLDialogElement ())

dialog
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLDialogElement ()))) -> Array Nut -> Nut
dialog = elementify2 {-  -} "dialog"

dialog_ :: Array Nut -> Nut
dialog_ = elementify2 {-  -} "dialog" []

instance TagToDeku "script" (HTMLScriptElement ())

script
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLScriptElement ()))) -> Array Nut -> Nut
script = elementify2 {-  -} "script"

script_ :: Array Nut -> Nut
script_ = elementify2 {-  -} "script" []

instance TagToDeku "noscript" (HTMLNoscriptElement ())

noscript
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLNoscriptElement ()))) -> Array Nut -> Nut
noscript = elementify2 {-  -} "noscript"

noscript_ :: Array Nut -> Nut
noscript_ = elementify2 {-  -} "noscript" []

instance TagToDeku "template" (HTMLTemplateElement ())

template
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLTemplateElement ()))) -> Array Nut -> Nut
template = elementify2 {-  -} "template"

template_ :: Array Nut -> Nut
template_ = elementify2 {-  -} "template" []

instance TagToDeku "slot" (HTMLSlotElement ())

slot :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLSlotElement ()))) -> Array Nut -> Nut
slot = elementify2 {-  -} "slot"

slot_ :: Array Nut -> Nut
slot_ = elementify2 {-  -} "slot" []

instance TagToDeku "canvas" (HTMLCanvasElement ())

canvas
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLCanvasElement ()))) -> Array Nut -> Nut
canvas = elementify2 {-  -} "canvas"

canvas_ :: Array Nut -> Nut
canvas_ = elementify2 {-  -} "canvas" []

instance TagToDeku "applet" (HTMLAppletElement ())

applet
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLAppletElement ()))) -> Array Nut -> Nut
applet = elementify2 {-  -} "applet"

applet_ :: Array Nut -> Nut
applet_ = elementify2 {-  -} "applet" []

instance TagToDeku "acronym" (HTMLAcronymElement ())

acronym
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLAcronymElement ()))) -> Array Nut -> Nut
acronym = elementify2 {-  -} "acronym"

acronym_ :: Array Nut -> Nut
acronym_ = elementify2 {-  -} "acronym" []

instance TagToDeku "bgsound" (HTMLBgsoundElement ())

bgsound
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLBgsoundElement ()))) -> Array Nut -> Nut
bgsound = elementify2 {-  -} "bgsound"

bgsound_ :: Array Nut -> Nut
bgsound_ = elementify2 {-  -} "bgsound" []

instance TagToDeku "dir" (HTMLDirElement ())

dir :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLDirElement ()))) -> Array Nut -> Nut
dir = elementify2 {-  -} "dir"

dir_ :: Array Nut -> Nut
dir_ = elementify2 {-  -} "dir" []

instance TagToDeku "noframes" (HTMLNoframesElement ())

noframes
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLNoframesElement ()))) -> Array Nut -> Nut
noframes = elementify2 {-  -} "noframes"

noframes_ :: Array Nut -> Nut
noframes_ = elementify2 {-  -} "noframes" []

instance TagToDeku "isindex" (HTMLIsindexElement ())

isindex
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLIsindexElement ()))) -> Array Nut -> Nut
isindex = elementify2 {-  -} "isindex"

isindex_ :: Array Nut -> Nut
isindex_ = elementify2 {-  -} "isindex" []

instance TagToDeku "keygen" (HTMLKeygenElement ())

keygen
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLKeygenElement ()))) -> Array Nut -> Nut
keygen = elementify2 {-  -} "keygen"

keygen_ :: Array Nut -> Nut
keygen_ = elementify2 {-  -} "keygen" []

instance TagToDeku "listing" (HTMLListingElement ())

listing
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLListingElement ()))) -> Array Nut -> Nut
listing = elementify2 {-  -} "listing"

listing_ :: Array Nut -> Nut
listing_ = elementify2 {-  -} "listing" []

instance TagToDeku "menuitem" (HTMLMenuitemElement ())

menuitem
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLMenuitemElement ()))) -> Array Nut -> Nut
menuitem = elementify2 {-  -} "menuitem"

menuitem_ :: Array Nut -> Nut
menuitem_ = elementify2 {-  -} "menuitem" []

instance TagToDeku "nextid" (HTMLNextidElement ())

nextid
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLNextidElement ()))) -> Array Nut -> Nut
nextid = elementify2 {-  -} "nextid"

nextid_ :: Array Nut -> Nut
nextid_ = elementify2 {-  -} "nextid" []

instance TagToDeku "noembed" (HTMLNoembedElement ())

noembed
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLNoembedElement ()))) -> Array Nut -> Nut
noembed = elementify2 {-  -} "noembed"

noembed_ :: Array Nut -> Nut
noembed_ = elementify2 {-  -} "noembed" []

instance TagToDeku "param" (HTMLParamElement ())

param
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLParamElement ()))) -> Array Nut -> Nut
param = elementify2 {-  -} "param"

param_ :: Array Nut -> Nut
param_ = elementify2 {-  -} "param" []

instance TagToDeku "plaintext" (HTMLPlaintextElement ())

plaintext
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLPlaintextElement ())))
  -> Array Nut
  -> Nut
plaintext = elementify2 {-  -} "plaintext"

plaintext_ :: Array Nut -> Nut
plaintext_ = elementify2 {-  -} "plaintext" []

instance TagToDeku "rb" (HTMLRbElement ())

rb :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLRbElement ()))) -> Array Nut -> Nut
rb = elementify2 {-  -} "rb"

rb_ :: Array Nut -> Nut
rb_ = elementify2 {-  -} "rb" []

instance TagToDeku "rtc" (HTMLRtcElement ())

rtc :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLRtcElement ()))) -> Array Nut -> Nut
rtc = elementify2 {-  -} "rtc"

rtc_ :: Array Nut -> Nut
rtc_ = elementify2 {-  -} "rtc" []

instance TagToDeku "strike" (HTMLStrikeElement ())

strike
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLStrikeElement ()))) -> Array Nut -> Nut
strike = elementify2 {-  -} "strike"

strike_ :: Array Nut -> Nut
strike_ = elementify2 {-  -} "strike" []

instance TagToDeku "xmp" (HTMLXmpElement ())

xmp :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLXmpElement ()))) -> Array Nut -> Nut
xmp = elementify2 {-  -} "xmp"

xmp_ :: Array Nut -> Nut
xmp_ = elementify2 {-  -} "xmp" []

instance TagToDeku "basefont" (HTMLBasefontElement ())

basefont
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLBasefontElement ()))) -> Array Nut -> Nut
basefont = elementify2 {-  -} "basefont"

basefont_ :: Array Nut -> Nut
basefont_ = elementify2 {-  -} "basefont" []

instance TagToDeku "big" (HTMLBigElement ())

big :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLBigElement ()))) -> Array Nut -> Nut
big = elementify2 {-  -} "big"

big_ :: Array Nut -> Nut
big_ = elementify2 {-  -} "big" []

instance TagToDeku "blink" (HTMLBlinkElement ())

blink
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLBlinkElement ()))) -> Array Nut -> Nut
blink = elementify2 {-  -} "blink"

blink_ :: Array Nut -> Nut
blink_ = elementify2 {-  -} "blink" []

instance TagToDeku "center" (HTMLCenterElement ())

center
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLCenterElement ()))) -> Array Nut -> Nut
center = elementify2 {-  -} "center"

center_ :: Array Nut -> Nut
center_ = elementify2 {-  -} "center" []

instance TagToDeku "font" (HTMLFontElement ())

font :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLFontElement ()))) -> Array Nut -> Nut
font = elementify2 {-  -} "font"

font_ :: Array Nut -> Nut
font_ = elementify2 {-  -} "font" []

instance TagToDeku "multicol" (HTMLMulticolElement ())

multicol
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLMulticolElement ()))) -> Array Nut -> Nut
multicol = elementify2 {-  -} "multicol"

multicol_ :: Array Nut -> Nut
multicol_ = elementify2 {-  -} "multicol" []

instance TagToDeku "nobr" (HTMLNobrElement ())

nobr :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLNobrElement ()))) -> Array Nut -> Nut
nobr = elementify2 {-  -} "nobr"

nobr_ :: Array Nut -> Nut
nobr_ = elementify2 {-  -} "nobr" []

instance TagToDeku "spacer" (HTMLSpacerElement ())

spacer
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLSpacerElement ()))) -> Array Nut -> Nut
spacer = elementify2 {-  -} "spacer"

spacer_ :: Array Nut -> Nut
spacer_ = elementify2 {-  -} "spacer" []

instance TagToDeku "tt" (HTMLTtElement ())

tt :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLTtElement ()))) -> Array Nut -> Nut
tt = elementify2 {-  -} "tt"

tt_ :: Array Nut -> Nut
tt_ = elementify2 {-  -} "tt" []

instance TagToDeku "marquee" (HTMLMarqueeElement ())

marquee
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLMarqueeElement ()))) -> Array Nut -> Nut
marquee = elementify2 {-  -} "marquee"

marquee_ :: Array Nut -> Nut
marquee_ = elementify2 {-  -} "marquee" []

instance TagToDeku "frameset" (HTMLFramesetElement ())

frameset
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLFramesetElement ()))) -> Array Nut -> Nut
frameset = elementify2 {-  -} "frameset"

frameset_ :: Array Nut -> Nut
frameset_ = elementify2 {-  -} "frameset" []

instance TagToDeku "frame" (HTMLFrameElement ())

frame
  :: Array (FRP.Event.Event (Deku.Attribute.Attribute (HTMLFrameElement ()))) -> Array Nut -> Nut
frame = elementify2 {-  -} "frame"

frame_ :: Array Nut -> Nut
frame_ = elementify2 {-  -} "frame" []

class IsCrossorigin (v :: Type) (a :: Type) | v -> a where
  isCrossorigin :: v -> Deku.Attribute.AttributeValue

instance IsCrossorigin String String where
  isCrossorigin = Deku.Attribute.prop'

instance IsCrossorigin (Types.Keyword "use-credentials") String where
  isCrossorigin = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsCrossorigin (Types.Keyword "anonymous") String where
  isCrossorigin = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_crossorigin
  :: forall r v a
   . IsCrossorigin v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (crossorigin :: a | r))
_crossorigin = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "crossorigin", value: _ } <<< isCrossorigin)

_crossorigin_
  :: forall r v a
   . IsCrossorigin v a
  => v
  -> FRP.Event.Event (Deku.Attribute.Attribute (crossorigin :: a | r))
_crossorigin_ = _crossorigin <<< Applicative.pure

class IsLoading (v :: Type) (a :: Type) | v -> a where
  isLoading :: v -> Deku.Attribute.AttributeValue

instance IsLoading String String where
  isLoading = Deku.Attribute.prop'

instance IsLoading (Types.Keyword "eager") String where
  isLoading = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsLoading (Types.Keyword "lazy") String where
  isLoading = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_loading
  :: forall r v a
   . IsLoading v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (loading :: a | r))
_loading = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "loading", value: _ } <<< isLoading)

_loading_
  :: forall r v a
   . IsLoading v a
  => v
  -> FRP.Event.Event (Deku.Attribute.Attribute (loading :: a | r))
_loading_ = _loading <<< Applicative.pure

class IsFetchpriority (v :: Type) (a :: Type) | v -> a where
  isFetchpriority :: v -> Deku.Attribute.AttributeValue

instance IsFetchpriority String String where
  isFetchpriority = Deku.Attribute.prop'

instance IsFetchpriority (Types.Keyword "auto") String where
  isFetchpriority = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsFetchpriority (Types.Keyword "low") String where
  isFetchpriority = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsFetchpriority (Types.Keyword "high") String where
  isFetchpriority = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_fetchpriority
  :: forall r v a
   . IsFetchpriority v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (fetchpriority :: a | r))
_fetchpriority = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "fetchpriority", value: _ } <<< isFetchpriority)

_fetchpriority_
  :: forall r v a
   . IsFetchpriority v a
  => v
  -> FRP.Event.Event (Deku.Attribute.Attribute (fetchpriority :: a | r))
_fetchpriority_ = _fetchpriority <<< Applicative.pure

class IsDir (v :: Type) (a :: Type) | v -> a where
  isDir :: v -> Deku.Attribute.AttributeValue

instance IsDir String String where
  isDir = Deku.Attribute.prop'

instance IsDir (Types.Keyword "auto") String where
  isDir = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsDir (Types.Keyword "rtl") String where
  isDir = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsDir (Types.Keyword "ltr") String where
  isDir = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_dir
  :: forall r v a
   . IsDir v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (dir :: a | r))
_dir = Functor.map (Deku.Attribute.unsafeAttribute <<< { key: "dir", value: _ } <<< isDir)

_dir_ :: forall r v a. IsDir v a => v -> FRP.Event.Event (Deku.Attribute.Attribute (dir :: a | r))
_dir_ = _dir <<< Applicative.pure

class IsName (v :: Type) (a :: Type) | v -> a where
  isName :: v -> Deku.Attribute.AttributeValue

instance IsName String String where
  isName = Deku.Attribute.prop'

instance IsName (Types.Keyword "color-scheme") String where
  isName = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsName (Types.Keyword "theme-color") String where
  isName = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsName (Types.Keyword "referrer") String where
  isName = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsName (Types.Keyword "keywords") String where
  isName = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsName (Types.Keyword "generator") String where
  isName = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsName (Types.Keyword "description") String where
  isName = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsName (Types.Keyword "author") String where
  isName = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsName (Types.Keyword "application-name") String where
  isName = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_name
  :: forall r v a
   . IsName v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (name :: a | r))
_name = Functor.map (Deku.Attribute.unsafeAttribute <<< { key: "name", value: _ } <<< isName)

_name_
  :: forall r v a. IsName v a => v -> FRP.Event.Event (Deku.Attribute.Attribute (name :: a | r))
_name_ = _name <<< Applicative.pure

class IsHttpEquiv (v :: Type) (a :: Type) | v -> a where
  isHttpEquiv :: v -> Deku.Attribute.AttributeValue

instance IsHttpEquiv String String where
  isHttpEquiv = Deku.Attribute.prop'

instance IsHttpEquiv (Types.Keyword "content-security-policy") String where
  isHttpEquiv = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsHttpEquiv (Types.Keyword "x-ua-compatible") String where
  isHttpEquiv = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsHttpEquiv (Types.Keyword "set-cookie") String where
  isHttpEquiv = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsHttpEquiv (Types.Keyword "refresh") String where
  isHttpEquiv = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsHttpEquiv (Types.Keyword "default-style") String where
  isHttpEquiv = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsHttpEquiv (Types.Keyword "content-type") String where
  isHttpEquiv = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsHttpEquiv (Types.Keyword "content-language") String where
  isHttpEquiv = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_httpEquiv
  :: forall r v a
   . IsHttpEquiv v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (httpEquiv :: a | r))
_httpEquiv = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "http-equiv", value: _ } <<< isHttpEquiv)

_httpEquiv_
  :: forall r v a
   . IsHttpEquiv v a
  => v
  -> FRP.Event.Event (Deku.Attribute.Attribute (httpEquiv :: a | r))
_httpEquiv_ = _httpEquiv <<< Applicative.pure

class IsType (v :: Type) (a :: Type) | v -> a where
  isType :: v -> Deku.Attribute.AttributeValue

instance IsType String String where
  isType = Deku.Attribute.prop'

instance IsType (Types.Keyword "button") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "reset") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "submit") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "image") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "file") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "radio") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "checkbox") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "color") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "range") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "number") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "datetime-local") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "time") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "week") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "month") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "date") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "password") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "email") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "url") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "tel") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "search") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "text") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "hidden") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "I") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "i") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "A") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "a") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsType (Types.Keyword "1") String where
  isType = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_type
  :: forall r v a
   . IsType v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (type :: a | r))
_type = Functor.map (Deku.Attribute.unsafeAttribute <<< { key: "type", value: _ } <<< isType)

_type_
  :: forall r v a. IsType v a => v -> FRP.Event.Event (Deku.Attribute.Attribute (type :: a | r))
_type_ = _type <<< Applicative.pure

class IsRel (v :: Type) (a :: Type) | v -> a where
  isRel :: v -> Deku.Attribute.AttributeValue

instance IsRel String String where
  isRel = Deku.Attribute.prop'

instance IsRel (Types.Keyword "prev") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "next") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "tag") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "stylesheet") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "search") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "preload") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "prefetch") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "preconnect") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "pingback") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "opener") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "noreferrer") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "noopener") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "nofollow") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "modulepreload") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "manifest") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "license") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "icon") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "help") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "external") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "dns-prefetch") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "canonical") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "bookmark") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "author") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsRel (Types.Keyword "alternate") String where
  isRel = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_rel
  :: forall r v a
   . IsRel v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (rel :: a | r))
_rel = Functor.map (Deku.Attribute.unsafeAttribute <<< { key: "rel", value: _ } <<< isRel)

_rel_ :: forall r v a. IsRel v a => v -> FRP.Event.Event (Deku.Attribute.Attribute (rel :: a | r))
_rel_ = _rel <<< Applicative.pure

class IsDecoding (v :: Type) (a :: Type) | v -> a where
  isDecoding :: v -> Deku.Attribute.AttributeValue

instance IsDecoding String String where
  isDecoding = Deku.Attribute.prop'

instance IsDecoding (Types.Keyword "auto") String where
  isDecoding = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsDecoding (Types.Keyword "async") String where
  isDecoding = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsDecoding (Types.Keyword "sync") String where
  isDecoding = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_decoding
  :: forall r v a
   . IsDecoding v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (decoding :: a | r))
_decoding = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "decoding", value: _ } <<< isDecoding)

_decoding_
  :: forall r v a
   . IsDecoding v a
  => v
  -> FRP.Event.Event (Deku.Attribute.Attribute (decoding :: a | r))
_decoding_ = _decoding <<< Applicative.pure

class IsKind (v :: Type) (a :: Type) | v -> a where
  isKind :: v -> Deku.Attribute.AttributeValue

instance IsKind String String where
  isKind = Deku.Attribute.prop'

instance IsKind (Types.Keyword "metadata") String where
  isKind = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsKind (Types.Keyword "chapters") String where
  isKind = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsKind (Types.Keyword "descriptions") String where
  isKind = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsKind (Types.Keyword "captions") String where
  isKind = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsKind (Types.Keyword "subtitles") String where
  isKind = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_kind
  :: forall r v a
   . IsKind v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (kind :: a | r))
_kind = Functor.map (Deku.Attribute.unsafeAttribute <<< { key: "kind", value: _ } <<< isKind)

_kind_
  :: forall r v a. IsKind v a => v -> FRP.Event.Event (Deku.Attribute.Attribute (kind :: a | r))
_kind_ = _kind <<< Applicative.pure

class IsPreload (v :: Type) (a :: Type) | v -> a where
  isPreload :: v -> Deku.Attribute.AttributeValue

instance IsPreload String String where
  isPreload = Deku.Attribute.prop'

instance IsPreload (Types.Keyword "auto") String where
  isPreload = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsPreload (Types.Keyword "metadata") String where
  isPreload = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsPreload (Types.Keyword "none") String where
  isPreload = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_preload
  :: forall r v a
   . IsPreload v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (preload :: a | r))
_preload = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "preload", value: _ } <<< isPreload)

_preload_
  :: forall r v a
   . IsPreload v a
  => v
  -> FRP.Event.Event (Deku.Attribute.Attribute (preload :: a | r))
_preload_ = _preload <<< Applicative.pure

class IsShape (v :: Type) (a :: Type) | v -> a where
  isShape :: v -> Deku.Attribute.AttributeValue

instance IsShape String String where
  isShape = Deku.Attribute.prop'

instance IsShape (Types.Keyword "rectangle state") String where
  isShape = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsShape (Types.Keyword "polygon state") String where
  isShape = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsShape (Types.Keyword "default state") String where
  isShape = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsShape (Types.Keyword "circle state") String where
  isShape = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_shape
  :: forall r v a
   . IsShape v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (shape :: a | r))
_shape = Functor.map (Deku.Attribute.unsafeAttribute <<< { key: "shape", value: _ } <<< isShape)

_shape_
  :: forall r v a. IsShape v a => v -> FRP.Event.Event (Deku.Attribute.Attribute (shape :: a | r))
_shape_ = _shape <<< Applicative.pure

class IsScope (v :: Type) (a :: Type) | v -> a where
  isScope :: v -> Deku.Attribute.AttributeValue

instance IsScope String String where
  isScope = Deku.Attribute.prop'

instance IsScope (Types.Keyword "auto") String where
  isScope = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsScope (Types.Keyword "colgroup") String where
  isScope = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsScope (Types.Keyword "rowgroup") String where
  isScope = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsScope (Types.Keyword "col") String where
  isScope = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsScope (Types.Keyword "row") String where
  isScope = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_scope
  :: forall r v a
   . IsScope v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (scope :: a | r))
_scope = Functor.map (Deku.Attribute.unsafeAttribute <<< { key: "scope", value: _ } <<< isScope)

_scope_
  :: forall r v a. IsScope v a => v -> FRP.Event.Event (Deku.Attribute.Attribute (scope :: a | r))
_scope_ = _scope <<< Applicative.pure

class IsWrap (v :: Type) (a :: Type) | v -> a where
  isWrap :: v -> Deku.Attribute.AttributeValue

instance IsWrap String String where
  isWrap = Deku.Attribute.prop'

instance IsWrap (Types.Keyword "hard") String where
  isWrap = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsWrap (Types.Keyword "soft") String where
  isWrap = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_wrap
  :: forall r v a
   . IsWrap v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (wrap :: a | r))
_wrap = Functor.map (Deku.Attribute.unsafeAttribute <<< { key: "wrap", value: _ } <<< isWrap)

_wrap_
  :: forall r v a. IsWrap v a => v -> FRP.Event.Event (Deku.Attribute.Attribute (wrap :: a | r))
_wrap_ = _wrap <<< Applicative.pure

class IsMethod (v :: Type) (a :: Type) | v -> a where
  isMethod :: v -> Deku.Attribute.AttributeValue

instance IsMethod String String where
  isMethod = Deku.Attribute.prop'

instance IsMethod (Types.Keyword "dialog") String where
  isMethod = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsMethod (Types.Keyword "post") String where
  isMethod = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsMethod (Types.Keyword "get") String where
  isMethod = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_method
  :: forall r v a
   . IsMethod v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (method :: a | r))
_method = Functor.map (Deku.Attribute.unsafeAttribute <<< { key: "method", value: _ } <<< isMethod)

_method_
  :: forall r v a. IsMethod v a => v -> FRP.Event.Event (Deku.Attribute.Attribute (method :: a | r))
_method_ = _method <<< Applicative.pure

class IsEnctype (v :: Type) (a :: Type) | v -> a where
  isEnctype :: v -> Deku.Attribute.AttributeValue

instance IsEnctype String String where
  isEnctype = Deku.Attribute.prop'

instance IsEnctype (Types.Keyword "text/plain") String where
  isEnctype = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsEnctype (Types.Keyword "multipart/form-data") String where
  isEnctype = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsEnctype (Types.Keyword "application/x-www-form-urlencoded") String where
  isEnctype = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_enctype
  :: forall r v a
   . IsEnctype v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (enctype :: a | r))
_enctype = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "enctype", value: _ } <<< isEnctype)

_enctype_
  :: forall r v a
   . IsEnctype v a
  => v
  -> FRP.Event.Event (Deku.Attribute.Attribute (enctype :: a | r))
_enctype_ = _enctype <<< Applicative.pure

class IsAutocomplete (v :: Type) (a :: Type) | v -> a where
  isAutocomplete :: v -> Deku.Attribute.AttributeValue

instance IsAutocomplete String String where
  isAutocomplete = Deku.Attribute.prop'

instance IsAutocomplete (Types.Keyword "impp") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "email") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "tel-extension") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "tel-local-suffix") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "tel-local-prefix") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "tel-local") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "tel-area-code") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "tel-national") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "tel-country-code") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "tel") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "photo") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "url") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "sex") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "bday-year") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "bday-month") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "bday-day") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "bday") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "language") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "transaction-amount") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "transaction-currency") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "cc-type") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "cc-csc") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "cc-exp-year") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "cc-exp-month") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "cc-exp") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "cc-number") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "cc-family-name") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "cc-additional-name") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "cc-given-name") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "cc-name") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "postal-code") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "country-name") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "country") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "address-level1") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "address-level2") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "address-level3") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "address-level4") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "address-line3") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "address-line2") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "address-line1") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "street-address") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "organization") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "one-time-code") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "current-password") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "new-password") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "username") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "organization-title") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "nickname") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "honorific-suffix") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "family-name") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "additional-name") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "given-name") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "honorific-prefix") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "name") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "on") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "off") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "pager") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "fax") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "mobile") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "work") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "home") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "billing") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocomplete (Types.Keyword "shipping") String where
  isAutocomplete = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_autocomplete
  :: forall r v a
   . IsAutocomplete v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (autocomplete :: a | r))
_autocomplete = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "autocomplete", value: _ } <<< isAutocomplete)

_autocomplete_
  :: forall r v a
   . IsAutocomplete v a
  => v
  -> FRP.Event.Event (Deku.Attribute.Attribute (autocomplete :: a | r))
_autocomplete_ = _autocomplete <<< Applicative.pure

class IsEntry (v :: Type) (a :: Type) | v -> a where
  isEntry :: v -> Deku.Attribute.AttributeValue

instance IsEntry (Types.Keyword "value") String where
  isEntry = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsEntry (Types.Keyword "name") String where
  isEntry = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_entry
  :: forall r v a
   . IsEntry v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (entry :: a | r))
_entry = Functor.map (Deku.Attribute.unsafeAttribute <<< { key: "entry", value: _ } <<< isEntry)

_entry_
  :: forall r v a. IsEntry v a => v -> FRP.Event.Event (Deku.Attribute.Attribute (entry :: a | r))
_entry_ = _entry <<< Applicative.pure

class IsHidden (v :: Type) (a :: Type) | v -> a where
  isHidden :: v -> Deku.Attribute.AttributeValue

instance IsHidden String String where
  isHidden = Deku.Attribute.prop'

instance IsHidden (Types.Keyword "hidden") String where
  isHidden = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsHidden (Types.Keyword "until-found") String where
  isHidden = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_hidden
  :: forall r v a
   . IsHidden v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (hidden :: a | r))
_hidden = Functor.map (Deku.Attribute.unsafeAttribute <<< { key: "hidden", value: _ } <<< isHidden)

_hidden_
  :: forall r v a. IsHidden v a => v -> FRP.Event.Event (Deku.Attribute.Attribute (hidden :: a | r))
_hidden_ = _hidden <<< Applicative.pure

class IsAutocapitalize (v :: Type) (a :: Type) | v -> a where
  isAutocapitalize :: v -> Deku.Attribute.AttributeValue

instance IsAutocapitalize String String where
  isAutocapitalize = Deku.Attribute.prop'

instance IsAutocapitalize (Types.Keyword "characters") String where
  isAutocapitalize = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocapitalize (Types.Keyword "words") String where
  isAutocapitalize = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocapitalize (Types.Keyword "sentences") String where
  isAutocapitalize = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocapitalize (Types.Keyword "on") String where
  isAutocapitalize = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocapitalize (Types.Keyword "none") String where
  isAutocapitalize = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsAutocapitalize (Types.Keyword "off") String where
  isAutocapitalize = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_autocapitalize
  :: forall r v a
   . IsAutocapitalize v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (autocapitalize :: a | r))
_autocapitalize = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "autocapitalize", value: _ } <<< isAutocapitalize)

_autocapitalize_
  :: forall r v a
   . IsAutocapitalize v a
  => v
  -> FRP.Event.Event (Deku.Attribute.Attribute (autocapitalize :: a | r))
_autocapitalize_ = _autocapitalize <<< Applicative.pure

class IsInputmode (v :: Type) (a :: Type) | v -> a where
  isInputmode :: v -> Deku.Attribute.AttributeValue

instance IsInputmode String String where
  isInputmode = Deku.Attribute.prop'

instance IsInputmode (Types.Keyword "search") String where
  isInputmode = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsInputmode (Types.Keyword "decimal") String where
  isInputmode = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsInputmode (Types.Keyword "numeric") String where
  isInputmode = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsInputmode (Types.Keyword "email") String where
  isInputmode = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsInputmode (Types.Keyword "url") String where
  isInputmode = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsInputmode (Types.Keyword "tel") String where
  isInputmode = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsInputmode (Types.Keyword "text") String where
  isInputmode = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsInputmode (Types.Keyword "none") String where
  isInputmode = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_inputmode
  :: forall r v a
   . IsInputmode v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (inputmode :: a | r))
_inputmode = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "inputmode", value: _ } <<< isInputmode)

_inputmode_
  :: forall r v a
   . IsInputmode v a
  => v
  -> FRP.Event.Event (Deku.Attribute.Attribute (inputmode :: a | r))
_inputmode_ = _inputmode <<< Applicative.pure

class IsEnterkeyhint (v :: Type) (a :: Type) | v -> a where
  isEnterkeyhint :: v -> Deku.Attribute.AttributeValue

instance IsEnterkeyhint String String where
  isEnterkeyhint = Deku.Attribute.prop'

instance IsEnterkeyhint (Types.Keyword "send") String where
  isEnterkeyhint = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsEnterkeyhint (Types.Keyword "search") String where
  isEnterkeyhint = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsEnterkeyhint (Types.Keyword "previous") String where
  isEnterkeyhint = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsEnterkeyhint (Types.Keyword "next") String where
  isEnterkeyhint = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsEnterkeyhint (Types.Keyword "go") String where
  isEnterkeyhint = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsEnterkeyhint (Types.Keyword "done") String where
  isEnterkeyhint = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsEnterkeyhint (Types.Keyword "enter") String where
  isEnterkeyhint = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_enterkeyhint
  :: forall r v a
   . IsEnterkeyhint v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (enterkeyhint :: a | r))
_enterkeyhint = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "enterkeyhint", value: _ } <<< isEnterkeyhint)

_enterkeyhint_
  :: forall r v a
   . IsEnterkeyhint v a
  => v
  -> FRP.Event.Event (Deku.Attribute.Attribute (enterkeyhint :: a | r))
_enterkeyhint_ = _enterkeyhint <<< Applicative.pure

class IsPopover (v :: Type) (a :: Type) | v -> a where
  isPopover :: v -> Deku.Attribute.AttributeValue

instance IsPopover String String where
  isPopover = Deku.Attribute.prop'

instance IsPopover (Types.Keyword "manual") String where
  isPopover = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsPopover (Types.Keyword "auto") String where
  isPopover = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_popover
  :: forall r v a
   . IsPopover v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (popover :: a | r))
_popover = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "popover", value: _ } <<< isPopover)

_popover_
  :: forall r v a
   . IsPopover v a
  => v
  -> FRP.Event.Event (Deku.Attribute.Attribute (popover :: a | r))
_popover_ = _popover <<< Applicative.pure

class IsPopovertargetaction (v :: Type) (a :: Type) | v -> a where
  isPopovertargetaction :: v -> Deku.Attribute.AttributeValue

instance IsPopovertargetaction String String where
  isPopovertargetaction = Deku.Attribute.prop'

instance IsPopovertargetaction (Types.Keyword "hide") String where
  isPopovertargetaction = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsPopovertargetaction (Types.Keyword "show") String where
  isPopovertargetaction = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsPopovertargetaction (Types.Keyword "toggle") String where
  isPopovertargetaction = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_popovertargetaction
  :: forall r v a
   . IsPopovertargetaction v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (popovertargetaction :: a | r))
_popovertargetaction = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "popovertargetaction", value: _ } <<<
      isPopovertargetaction
  )

_popovertargetaction_
  :: forall r v a
   . IsPopovertargetaction v a
  => v
  -> FRP.Event.Event (Deku.Attribute.Attribute (popovertargetaction :: a | r))
_popovertargetaction_ = _popovertargetaction <<< Applicative.pure

class IsSandbox (v :: Type) (a :: Type) | v -> a where
  isSandbox :: v -> Deku.Attribute.AttributeValue

instance IsSandbox String String where
  isSandbox = Deku.Attribute.prop'

instance IsSandbox (Types.Keyword "allow-top-navigation-to-custom-protocols") String where
  isSandbox = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsSandbox (Types.Keyword "allow-downloads") String where
  isSandbox = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsSandbox (Types.Keyword "allow-presentation") String where
  isSandbox = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsSandbox (Types.Keyword "allow-orientation-lock") String where
  isSandbox = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsSandbox (Types.Keyword "allow-modals") String where
  isSandbox = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsSandbox (Types.Keyword "allow-popups-to-escape-sandbox") String where
  isSandbox = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsSandbox (Types.Keyword "allow-scripts") String where
  isSandbox = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsSandbox (Types.Keyword "allow-pointer-lock") String where
  isSandbox = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsSandbox (Types.Keyword "allow-forms") String where
  isSandbox = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsSandbox (Types.Keyword "allow-same-origin") String where
  isSandbox = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsSandbox (Types.Keyword "allow-top-navigation-by-user-activation") String where
  isSandbox = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsSandbox (Types.Keyword "allow-top-navigation") String where
  isSandbox = Deku.Attribute.prop' <<< Data.Newtype.unwrap

instance IsSandbox (Types.Keyword "allow-popups") String where
  isSandbox = Deku.Attribute.prop' <<< Data.Newtype.unwrap

_sandbox
  :: forall r v a
   . IsSandbox v a
  => FRP.Event.Event v
  -> FRP.Event.Event (Deku.Attribute.Attribute (sandbox :: a | r))
_sandbox = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "sandbox", value: _ } <<< isSandbox)

_sandbox_
  :: forall r v a
   . IsSandbox v a
  => v
  -> FRP.Event.Event (Deku.Attribute.Attribute (sandbox :: a | r))
_sandbox_ = _sandbox <<< Applicative.pure

_version
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (version :: String | r))
_version = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "version", value: _ } <<< Deku.Attribute.prop')

_version_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (version :: String | r))
_version_ = _version <<< Applicative.pure

_manifest
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (manifest :: String | r))
_manifest = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "manifest", value: _ } <<< Deku.Attribute.prop')

_manifest_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (manifest :: String | r))
_manifest_ = _manifest <<< Applicative.pure

_profile
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (profile :: String | r))
_profile = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "profile", value: _ } <<< Deku.Attribute.prop')

_profile_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (profile :: String | r))
_profile_ = _profile <<< Applicative.pure

_target
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (target :: String | r))
_target = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "target", value: _ } <<< Deku.Attribute.prop')

_target_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (target :: String | r))
_target_ = _target <<< Applicative.pure

_href
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (href :: String | r))
_href = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "href", value: _ } <<< Deku.Attribute.prop')

_href_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (href :: String | r))
_href_ = _href <<< Applicative.pure

_urn
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (urn :: String | r))
_urn = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "urn", value: _ } <<< Deku.Attribute.prop')

_urn_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (urn :: String | r))
_urn_ = _urn <<< Applicative.pure

_rev
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (rev :: String | r))
_rev = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "rev", value: _ } <<< Deku.Attribute.prop')

_rev_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (rev :: String | r))
_rev_ = _rev <<< Applicative.pure

_methods
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (methods :: String | r))
_methods = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "methods", value: _ } <<< Deku.Attribute.prop')

_methods_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (methods :: String | r))
_methods_ = _methods <<< Applicative.pure

_charset
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (charset :: String | r))
_charset = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "charset", value: _ } <<< Deku.Attribute.prop')

_charset_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (charset :: String | r))
_charset_ = _charset <<< Applicative.pure

_disabled
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (disabled :: String | r))
_disabled = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "disabled", value: _ } <<< Deku.Attribute.prop')

_disabled_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (disabled :: String | r))
_disabled_ = _disabled <<< Applicative.pure

_color
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (color :: String | r))
_color = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "color", value: _ } <<< Deku.Attribute.prop')

_color_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (color :: String | r))
_color_ = _color <<< Applicative.pure

_blocking
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (blocking :: String | r))
_blocking = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "blocking", value: _ } <<< Deku.Attribute.prop')

_blocking_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (blocking :: String | r))
_blocking_ = _blocking <<< Applicative.pure

_as
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (as :: String | r))
_as = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "as", value: _ } <<< Deku.Attribute.prop')

_as_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (as :: String | r))
_as_ = _as <<< Applicative.pure

_sizes
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (sizes :: String | r))
_sizes = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "sizes", value: _ } <<< Deku.Attribute.prop')

_sizes_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (sizes :: String | r))
_sizes_ = _sizes <<< Applicative.pure

_imagesizes
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (imagesizes :: String | r))
_imagesizes = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "imagesizes", value: _ } <<< Deku.Attribute.prop')

_imagesizes_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (imagesizes :: String | r))
_imagesizes_ = _imagesizes <<< Applicative.pure

_imagesrcset
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (imagesrcset :: String | r))
_imagesrcset = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "imagesrcset", value: _ } <<< Deku.Attribute.prop')

_imagesrcset_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (imagesrcset :: String | r))
_imagesrcset_ = _imagesrcset <<< Applicative.pure

_title
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (title :: String | r))
_title = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "title", value: _ } <<< Deku.Attribute.prop')

_title_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (title :: String | r))
_title_ = _title <<< Applicative.pure

_referrerpolicy
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (referrerpolicy :: String | r))
_referrerpolicy = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "referrerpolicy", value: _ } <<< Deku.Attribute.prop')

_referrerpolicy_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (referrerpolicy :: String | r))
_referrerpolicy_ = _referrerpolicy <<< Applicative.pure

_hreflang
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (hreflang :: String | r))
_hreflang = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "hreflang", value: _ } <<< Deku.Attribute.prop')

_hreflang_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (hreflang :: String | r))
_hreflang_ = _hreflang <<< Applicative.pure

_integrity
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (integrity :: String | r))
_integrity = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "integrity", value: _ } <<< Deku.Attribute.prop')

_integrity_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (integrity :: String | r))
_integrity_ = _integrity <<< Applicative.pure

_media
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (media :: String | r))
_media = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "media", value: _ } <<< Deku.Attribute.prop')

_media_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (media :: String | r))
_media_ = _media <<< Applicative.pure

_scheme
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (scheme :: String | r))
_scheme = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "scheme", value: _ } <<< Deku.Attribute.prop')

_scheme_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (scheme :: String | r))
_scheme_ = _scheme <<< Applicative.pure

_content
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (content :: String | r))
_content = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "content", value: _ } <<< Deku.Attribute.prop')

_content_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (content :: String | r))
_content_ = _content <<< Applicative.pure

_vlink
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (vlink :: String | r))
_vlink = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "vlink", value: _ } <<< Deku.Attribute.prop')

_vlink_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (vlink :: String | r))
_vlink_ = _vlink <<< Applicative.pure

_topmargin
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (topmargin :: String | r))
_topmargin = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "topmargin", value: _ } <<< Deku.Attribute.prop')

_topmargin_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (topmargin :: String | r))
_topmargin_ = _topmargin <<< Applicative.pure

_text
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (text :: String | r))
_text = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "text", value: _ } <<< Deku.Attribute.prop')

_text_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (text :: String | r))
_text_ = _text <<< Applicative.pure

_rightmargin
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (rightmargin :: String | r))
_rightmargin = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "rightmargin", value: _ } <<< Deku.Attribute.prop')

_rightmargin_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (rightmargin :: String | r))
_rightmargin_ = _rightmargin <<< Applicative.pure

_marginwidth
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (marginwidth :: String | r))
_marginwidth = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "marginwidth", value: _ } <<< Deku.Attribute.prop')

_marginwidth_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (marginwidth :: String | r))
_marginwidth_ = _marginwidth <<< Applicative.pure

_marginheight
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (marginheight :: String | r))
_marginheight = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "marginheight", value: _ } <<< Deku.Attribute.prop')

_marginheight_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (marginheight :: String | r))
_marginheight_ = _marginheight <<< Applicative.pure

_link
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (link :: String | r))
_link = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "link", value: _ } <<< Deku.Attribute.prop')

_link_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (link :: String | r))
_link_ = _link <<< Applicative.pure

_leftmargin
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (leftmargin :: String | r))
_leftmargin = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "leftmargin", value: _ } <<< Deku.Attribute.prop')

_leftmargin_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (leftmargin :: String | r))
_leftmargin_ = _leftmargin <<< Applicative.pure

_bottommargin
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (bottommargin :: String | r))
_bottommargin = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "bottommargin", value: _ } <<< Deku.Attribute.prop')

_bottommargin_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (bottommargin :: String | r))
_bottommargin_ = _bottommargin <<< Applicative.pure

_bgcolor
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (bgcolor :: String | r))
_bgcolor = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "bgcolor", value: _ } <<< Deku.Attribute.prop')

_bgcolor_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (bgcolor :: String | r))
_bgcolor_ = _bgcolor <<< Applicative.pure

_alink
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (alink :: String | r))
_alink = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "alink", value: _ } <<< Deku.Attribute.prop')

_alink_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (alink :: String | r))
_alink_ = _alink <<< Applicative.pure

_align
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (align :: String | r))
_align = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "align", value: _ } <<< Deku.Attribute.prop')

_align_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (align :: String | r))
_align_ = _align <<< Applicative.pure

_width
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (width :: String | r))
_width = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "width", value: _ } <<< Deku.Attribute.prop')

_width_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (width :: String | r))
_width_ = _width <<< Applicative.pure

_size
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (size :: String | r))
_size = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "size", value: _ } <<< Deku.Attribute.prop')

_size_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (size :: String | r))
_size_ = _size <<< Applicative.pure

_noshade
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (noshade :: String | r))
_noshade = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "noshade", value: _ } <<< Deku.Attribute.prop')

_noshade_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (noshade :: String | r))
_noshade_ = _noshade <<< Applicative.pure

_cite
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (cite :: String | r))
_cite = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "cite", value: _ } <<< Deku.Attribute.prop')

_cite_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (cite :: String | r))
_cite_ = _cite <<< Applicative.pure

_compact
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (compact :: String | r))
_compact = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "compact", value: _ } <<< Deku.Attribute.prop')

_compact_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (compact :: String | r))
_compact_ = _compact <<< Applicative.pure

_start
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (start :: String | r))
_start = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "start", value: _ } <<< Deku.Attribute.prop')

_start_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (start :: String | r))
_start_ = _start <<< Applicative.pure

_reversed
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (reversed :: String | r))
_reversed = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "reversed", value: _ } <<< Deku.Attribute.prop')

_reversed_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (reversed :: String | r))
_reversed_ = _reversed <<< Applicative.pure

_label
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (label :: String | r))
_label = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "label", value: _ } <<< Deku.Attribute.prop')

_label_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (label :: String | r))
_label_ = _label <<< Applicative.pure

_value
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (value :: String | r))
_value = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "value", value: _ } <<< Deku.Attribute.prop')

_value_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (value :: String | r))
_value_ = _value <<< Applicative.pure

_coords
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (coords :: String | r))
_coords = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "coords", value: _ } <<< Deku.Attribute.prop')

_coords_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (coords :: String | r))
_coords_ = _coords <<< Applicative.pure

_ping
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ping :: String | r))
_ping = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "ping", value: _ } <<< Deku.Attribute.prop')

_ping_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ping :: String | r))
_ping_ = _ping <<< Applicative.pure

_download
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (download :: String | r))
_download = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "download", value: _ } <<< Deku.Attribute.prop')

_download_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (download :: String | r))
_download_ = _download <<< Applicative.pure

_datetime
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (datetime :: String | r))
_datetime = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "datetime", value: _ } <<< Deku.Attribute.prop')

_datetime_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (datetime :: String | r))
_datetime_ = _datetime <<< Applicative.pure

_clear
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (clear :: String | r))
_clear = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "clear", value: _ } <<< Deku.Attribute.prop')

_clear_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (clear :: String | r))
_clear_ = _clear <<< Applicative.pure

_height
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (height :: String | r))
_height = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "height", value: _ } <<< Deku.Attribute.prop')

_height_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (height :: String | r))
_height_ = _height <<< Applicative.pure

_src
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (src :: String | r))
_src = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "src", value: _ } <<< Deku.Attribute.prop')

_src_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (src :: String | r))
_src_ = _src <<< Applicative.pure

_srcset
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (srcset :: String | r))
_srcset = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "srcset", value: _ } <<< Deku.Attribute.prop')

_srcset_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (srcset :: String | r))
_srcset_ = _srcset <<< Applicative.pure

_vspace
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (vspace :: String | r))
_vspace = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "vspace", value: _ } <<< Deku.Attribute.prop')

_vspace_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (vspace :: String | r))
_vspace_ = _vspace <<< Applicative.pure

_hspace
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (hspace :: String | r))
_hspace = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "hspace", value: _ } <<< Deku.Attribute.prop')

_hspace_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (hspace :: String | r))
_hspace_ = _hspace <<< Applicative.pure

_border
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (border :: String | r))
_border = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "border", value: _ } <<< Deku.Attribute.prop')

_border_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (border :: String | r))
_border_ = _border <<< Applicative.pure

_lowsrc
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (lowsrc :: String | r))
_lowsrc = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "lowsrc", value: _ } <<< Deku.Attribute.prop')

_lowsrc_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (lowsrc :: String | r))
_lowsrc_ = _lowsrc <<< Applicative.pure

_longdesc
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (longdesc :: String | r))
_longdesc = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "longdesc", value: _ } <<< Deku.Attribute.prop')

_longdesc_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (longdesc :: String | r))
_longdesc_ = _longdesc <<< Applicative.pure

_usemap
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (usemap :: String | r))
_usemap = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "usemap", value: _ } <<< Deku.Attribute.prop')

_usemap_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (usemap :: String | r))
_usemap_ = _usemap <<< Applicative.pure

_ismap
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ismap :: String | r))
_ismap = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "ismap", value: _ } <<< Deku.Attribute.prop')

_ismap_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ismap :: String | r))
_ismap_ = _ismap <<< Applicative.pure

_alt
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (alt :: String | r))
_alt = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "alt", value: _ } <<< Deku.Attribute.prop')

_alt_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (alt :: String | r))
_alt_ = _alt <<< Applicative.pure

_scrolling
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (scrolling :: String | r))
_scrolling = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "scrolling", value: _ } <<< Deku.Attribute.prop')

_scrolling_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (scrolling :: String | r))
_scrolling_ = _scrolling <<< Applicative.pure

_framespacing
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (framespacing :: String | r))
_framespacing = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "framespacing", value: _ } <<< Deku.Attribute.prop')

_framespacing_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (framespacing :: String | r))
_framespacing_ = _framespacing <<< Applicative.pure

_frameborder
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (frameborder :: String | r))
_frameborder = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "frameborder", value: _ } <<< Deku.Attribute.prop')

_frameborder_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (frameborder :: String | r))
_frameborder_ = _frameborder <<< Applicative.pure

_allowtransparency
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (allowtransparency :: String | r))
_allowtransparency = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "allowtransparency", value: _ } <<<
      Deku.Attribute.prop'
  )

_allowtransparency_
  :: forall r
   . String
  -> FRP.Event.Event (Deku.Attribute.Attribute (allowtransparency :: String | r))
_allowtransparency_ = _allowtransparency <<< Applicative.pure

_allowfullscreen
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (allowfullscreen :: String | r))
_allowfullscreen = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "allowfullscreen", value: _ } <<< Deku.Attribute.prop')

_allowfullscreen_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (allowfullscreen :: String | r))
_allowfullscreen_ = _allowfullscreen <<< Applicative.pure

_allow
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (allow :: String | r))
_allow = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "allow", value: _ } <<< Deku.Attribute.prop')

_allow_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (allow :: String | r))
_allow_ = _allow <<< Applicative.pure

_srcdoc
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (srcdoc :: String | r))
_srcdoc = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "srcdoc", value: _ } <<< Deku.Attribute.prop')

_srcdoc_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (srcdoc :: String | r))
_srcdoc_ = _srcdoc <<< Applicative.pure

_typemustmatch
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (typemustmatch :: String | r))
_typemustmatch = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "typemustmatch", value: _ } <<< Deku.Attribute.prop')

_typemustmatch_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (typemustmatch :: String | r))
_typemustmatch_ = _typemustmatch <<< Applicative.pure

_standby
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (standby :: String | r))
_standby = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "standby", value: _ } <<< Deku.Attribute.prop')

_standby_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (standby :: String | r))
_standby_ = _standby <<< Applicative.pure

_declare
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (declare :: String | r))
_declare = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "declare", value: _ } <<< Deku.Attribute.prop')

_declare_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (declare :: String | r))
_declare_ = _declare <<< Applicative.pure

_codetype
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (codetype :: String | r))
_codetype = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "codetype", value: _ } <<< Deku.Attribute.prop')

_codetype_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (codetype :: String | r))
_codetype_ = _codetype <<< Applicative.pure

_codebase
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (codebase :: String | r))
_codebase = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "codebase", value: _ } <<< Deku.Attribute.prop')

_codebase_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (codebase :: String | r))
_codebase_ = _codebase <<< Applicative.pure

_code
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (code :: String | r))
_code = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "code", value: _ } <<< Deku.Attribute.prop')

_code_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (code :: String | r))
_code_ = _code <<< Applicative.pure

_classid
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (classid :: String | r))
_classid = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "classid", value: _ } <<< Deku.Attribute.prop')

_classid_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (classid :: String | r))
_classid_ = _classid <<< Applicative.pure

_archive
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (archive :: String | r))
_archive = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "archive", value: _ } <<< Deku.Attribute.prop')

_archive_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (archive :: String | r))
_archive_ = _archive <<< Applicative.pure

_dirname
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (dirname :: String | r))
_dirname = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "dirname", value: _ } <<< Deku.Attribute.prop')

_dirname_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (dirname :: String | r))
_dirname_ = _dirname <<< Applicative.pure

_form
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (form :: String | r))
_form = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "form", value: _ } <<< Deku.Attribute.prop')

_form_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (form :: String | r))
_form_ = _form <<< Applicative.pure

_data
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (data :: String | r))
_data = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "data", value: _ } <<< Deku.Attribute.prop')

_data_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (data :: String | r))
_data_ = _data <<< Applicative.pure

_muted
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (muted :: String | r))
_muted = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "muted", value: _ } <<< Deku.Attribute.prop')

_muted_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (muted :: String | r))
_muted_ = _muted <<< Applicative.pure

_controls
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (controls :: String | r))
_controls = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "controls", value: _ } <<< Deku.Attribute.prop')

_controls_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (controls :: String | r))
_controls_ = _controls <<< Applicative.pure

_autoplay
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (autoplay :: String | r))
_autoplay = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "autoplay", value: _ } <<< Deku.Attribute.prop')

_autoplay_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (autoplay :: String | r))
_autoplay_ = _autoplay <<< Applicative.pure

_loop
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (loop :: String | r))
_loop = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "loop", value: _ } <<< Deku.Attribute.prop')

_loop_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (loop :: String | r))
_loop_ = _loop <<< Applicative.pure

_playsinline
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (playsinline :: String | r))
_playsinline = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "playsinline", value: _ } <<< Deku.Attribute.prop')

_playsinline_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (playsinline :: String | r))
_playsinline_ = _playsinline <<< Applicative.pure

_poster
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (poster :: String | r))
_poster = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "poster", value: _ } <<< Deku.Attribute.prop')

_poster_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (poster :: String | r))
_poster_ = _poster <<< Applicative.pure

_default
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (default :: String | r))
_default = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "default", value: _ } <<< Deku.Attribute.prop')

_default_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (default :: String | r))
_default_ = _default <<< Applicative.pure

_srclang
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (srclang :: String | r))
_srclang = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "srclang", value: _ } <<< Deku.Attribute.prop')

_srclang_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (srclang :: String | r))
_srclang_ = _srclang <<< Applicative.pure

_nohref
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (nohref :: String | r))
_nohref = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "nohref", value: _ } <<< Deku.Attribute.prop')

_nohref_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (nohref :: String | r))
_nohref_ = _nohref <<< Applicative.pure

_rules
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (rules :: String | r))
_rules = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "rules", value: _ } <<< Deku.Attribute.prop')

_rules_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (rules :: String | r))
_rules_ = _rules <<< Applicative.pure

_frame
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (frame :: String | r))
_frame = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "frame", value: _ } <<< Deku.Attribute.prop')

_frame_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (frame :: String | r))
_frame_ = _frame <<< Applicative.pure

_cellspacing
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (cellspacing :: String | r))
_cellspacing = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "cellspacing", value: _ } <<< Deku.Attribute.prop')

_cellspacing_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (cellspacing :: String | r))
_cellspacing_ = _cellspacing <<< Applicative.pure

_cellpadding
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (cellpadding :: String | r))
_cellpadding = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "cellpadding", value: _ } <<< Deku.Attribute.prop')

_cellpadding_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (cellpadding :: String | r))
_cellpadding_ = _cellpadding <<< Applicative.pure

_bordercolor
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (bordercolor :: String | r))
_bordercolor = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "bordercolor", value: _ } <<< Deku.Attribute.prop')

_bordercolor_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (bordercolor :: String | r))
_bordercolor_ = _bordercolor <<< Applicative.pure

_summary
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (summary :: String | r))
_summary = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "summary", value: _ } <<< Deku.Attribute.prop')

_summary_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (summary :: String | r))
_summary_ = _summary <<< Applicative.pure

_datapagesize
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (datapagesize :: String | r))
_datapagesize = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "datapagesize", value: _ } <<< Deku.Attribute.prop')

_datapagesize_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (datapagesize :: String | r))
_datapagesize_ = _datapagesize <<< Applicative.pure

_span
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (span :: String | r))
_span = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "span", value: _ } <<< Deku.Attribute.prop')

_span_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (span :: String | r))
_span_ = _span <<< Applicative.pure

_valign
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (valign :: String | r))
_valign = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "valign", value: _ } <<< Deku.Attribute.prop')

_valign_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (valign :: String | r))
_valign_ = _valign <<< Applicative.pure

_charoff
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (charoff :: String | r))
_charoff = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "charoff", value: _ } <<< Deku.Attribute.prop')

_charoff_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (charoff :: String | r))
_charoff_ = _charoff <<< Applicative.pure

_char
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (char :: String | r))
_char = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "char", value: _ } <<< Deku.Attribute.prop')

_char_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (char :: String | r))
_char_ = _char <<< Applicative.pure

_nowrap
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (nowrap :: String | r))
_nowrap = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "nowrap", value: _ } <<< Deku.Attribute.prop')

_nowrap_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (nowrap :: String | r))
_nowrap_ = _nowrap <<< Applicative.pure

_axis
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (axis :: String | r))
_axis = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "axis", value: _ } <<< Deku.Attribute.prop')

_axis_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (axis :: String | r))
_axis_ = _axis <<< Applicative.pure

_abbr
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (abbr :: String | r))
_abbr = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "abbr", value: _ } <<< Deku.Attribute.prop')

_abbr_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (abbr :: String | r))
_abbr_ = _abbr <<< Applicative.pure

_headers
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (headers :: String | r))
_headers = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "headers", value: _ } <<< Deku.Attribute.prop')

_headers_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (headers :: String | r))
_headers_ = _headers <<< Applicative.pure

_rowspan
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (rowspan :: String | r))
_rowspan = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "rowspan", value: _ } <<< Deku.Attribute.prop')

_rowspan_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (rowspan :: String | r))
_rowspan_ = _rowspan <<< Applicative.pure

_colspan
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (colspan :: String | r))
_colspan = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "colspan", value: _ } <<< Deku.Attribute.prop')

_colspan_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (colspan :: String | r))
_colspan_ = _colspan <<< Applicative.pure

_accept
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (accept :: String | r))
_accept = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "accept", value: _ } <<< Deku.Attribute.prop')

_accept_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (accept :: String | r))
_accept_ = _accept <<< Applicative.pure

_formnovalidate
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (formnovalidate :: String | r))
_formnovalidate = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "formnovalidate", value: _ } <<< Deku.Attribute.prop')

_formnovalidate_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (formnovalidate :: String | r))
_formnovalidate_ = _formnovalidate <<< Applicative.pure

_novalidate
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (novalidate :: String | r))
_novalidate = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "novalidate", value: _ } <<< Deku.Attribute.prop')

_novalidate_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (novalidate :: String | r))
_novalidate_ = _novalidate <<< Applicative.pure

_formtarget
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (formtarget :: String | r))
_formtarget = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "formtarget", value: _ } <<< Deku.Attribute.prop')

_formtarget_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (formtarget :: String | r))
_formtarget_ = _formtarget <<< Applicative.pure

_formenctype
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (formenctype :: String | r))
_formenctype = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "formenctype", value: _ } <<< Deku.Attribute.prop')

_formenctype_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (formenctype :: String | r))
_formenctype_ = _formenctype <<< Applicative.pure

_formmethod
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (formmethod :: String | r))
_formmethod = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "formmethod", value: _ } <<< Deku.Attribute.prop')

_formmethod_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (formmethod :: String | r))
_formmethod_ = _formmethod <<< Applicative.pure

_formaction
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (formaction :: String | r))
_formaction = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "formaction", value: _ } <<< Deku.Attribute.prop')

_formaction_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (formaction :: String | r))
_formaction_ = _formaction <<< Applicative.pure

_action
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (action :: String | r))
_action = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "action", value: _ } <<< Deku.Attribute.prop')

_action_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (action :: String | r))
_action_ = _action <<< Applicative.pure

_acceptCharset
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (acceptCharset :: String | r))
_acceptCharset = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "accept-charset", value: _ } <<< Deku.Attribute.prop')

_acceptCharset_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (acceptCharset :: String | r))
_acceptCharset_ = _acceptCharset <<< Applicative.pure

_for
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (for :: String | r))
_for = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "for", value: _ } <<< Deku.Attribute.prop')

_for_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (for :: String | r))
_for_ = _for <<< Applicative.pure

_capture
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (capture :: String | r))
_capture = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "capture", value: _ } <<< Deku.Attribute.prop')

_capture_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (capture :: String | r))
_capture_ = _capture <<< Applicative.pure

_minlength
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (minlength :: String | r))
_minlength = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "minlength", value: _ } <<< Deku.Attribute.prop')

_minlength_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (minlength :: String | r))
_minlength_ = _minlength <<< Applicative.pure

_maxlength
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (maxlength :: String | r))
_maxlength = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "maxlength", value: _ } <<< Deku.Attribute.prop')

_maxlength_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (maxlength :: String | r))
_maxlength_ = _maxlength <<< Applicative.pure

_placeholder
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (placeholder :: String | r))
_placeholder = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "placeholder", value: _ } <<< Deku.Attribute.prop')

_placeholder_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (placeholder :: String | r))
_placeholder_ = _placeholder <<< Applicative.pure

_list
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (list :: String | r))
_list = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "list", value: _ } <<< Deku.Attribute.prop')

_list_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (list :: String | r))
_list_ = _list <<< Applicative.pure

_step
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (step :: String | r))
_step = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "step", value: _ } <<< Deku.Attribute.prop')

_step_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (step :: String | r))
_step_ = _step <<< Applicative.pure

_max
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (max :: String | r))
_max = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "max", value: _ } <<< Deku.Attribute.prop')

_max_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (max :: String | r))
_max_ = _max <<< Applicative.pure

_min
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (min :: String | r))
_min = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "min", value: _ } <<< Deku.Attribute.prop')

_min_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (min :: String | r))
_min_ = _min <<< Applicative.pure

_pattern
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (pattern :: String | r))
_pattern = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "pattern", value: _ } <<< Deku.Attribute.prop')

_pattern_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (pattern :: String | r))
_pattern_ = _pattern <<< Applicative.pure

_multiple
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (multiple :: String | r))
_multiple = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "multiple", value: _ } <<< Deku.Attribute.prop')

_multiple_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (multiple :: String | r))
_multiple_ = _multiple <<< Applicative.pure

_required
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (required :: String | r))
_required = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "required", value: _ } <<< Deku.Attribute.prop')

_required_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (required :: String | r))
_required_ = _required <<< Applicative.pure

_readonly
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (readonly :: String | r))
_readonly = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "readonly", value: _ } <<< Deku.Attribute.prop')

_readonly_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (readonly :: String | r))
_readonly_ = _readonly <<< Applicative.pure

_checked
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (checked :: String | r))
_checked = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "checked", value: _ } <<< Deku.Attribute.prop')

_checked_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (checked :: String | r))
_checked_ = _checked <<< Applicative.pure

_selected
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (selected :: String | r))
_selected = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "selected", value: _ } <<< Deku.Attribute.prop')

_selected_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (selected :: String | r))
_selected_ = _selected <<< Applicative.pure

_rows
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (rows :: String | r))
_rows = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "rows", value: _ } <<< Deku.Attribute.prop')

_rows_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (rows :: String | r))
_rows_ = _rows <<< Applicative.pure

_cols
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (cols :: String | r))
_cols = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "cols", value: _ } <<< Deku.Attribute.prop')

_cols_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (cols :: String | r))
_cols_ = _cols <<< Applicative.pure

_optimum
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (optimum :: String | r))
_optimum = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "optimum", value: _ } <<< Deku.Attribute.prop')

_optimum_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (optimum :: String | r))
_optimum_ = _optimum <<< Applicative.pure

_high
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (high :: String | r))
_high = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "high", value: _ } <<< Deku.Attribute.prop')

_high_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (high :: String | r))
_high_ = _high <<< Applicative.pure

_low
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (low :: String | r))
_low = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "low", value: _ } <<< Deku.Attribute.prop')

_low_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (low :: String | r))
_low_ = _low <<< Applicative.pure

_open
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (open :: String | r))
_open = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "open", value: _ } <<< Deku.Attribute.prop')

_open_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (open :: String | r))
_open_ = _open <<< Applicative.pure

_event
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (event :: String | r))
_event = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "event", value: _ } <<< Deku.Attribute.prop')

_event_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (event :: String | r))
_event_ = _event <<< Applicative.pure

_language
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (language :: String | r))
_language = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "language", value: _ } <<< Deku.Attribute.prop')

_language_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (language :: String | r))
_language_ = _language <<< Applicative.pure

_defer
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (defer :: String | r))
_defer = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "defer", value: _ } <<< Deku.Attribute.prop')

_defer_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (defer :: String | r))
_defer_ = _defer <<< Applicative.pure

_async
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (async :: String | r))
_async = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "async", value: _ } <<< Deku.Attribute.prop')

_async_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (async :: String | r))
_async_ = _async <<< Applicative.pure

_nomodule
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (nomodule :: String | r))
_nomodule = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "nomodule", value: _ } <<< Deku.Attribute.prop')

_nomodule_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (nomodule :: String | r))
_nomodule_ = _nomodule <<< Applicative.pure

_truespeed
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (truespeed :: String | r))
_truespeed = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "truespeed", value: _ } <<< Deku.Attribute.prop')

_truespeed_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (truespeed :: String | r))
_truespeed_ = _truespeed <<< Applicative.pure

_direction
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (direction :: String | r))
_direction = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "direction", value: _ } <<< Deku.Attribute.prop')

_direction_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (direction :: String | r))
_direction_ = _direction <<< Applicative.pure

_behavior
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (behavior :: String | r))
_behavior = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "behavior", value: _ } <<< Deku.Attribute.prop')

_behavior_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (behavior :: String | r))
_behavior_ = _behavior <<< Applicative.pure

_tabindex
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (tabindex :: String | r))
_tabindex = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "tabindex", value: _ } <<< Deku.Attribute.prop')

_tabindex_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (tabindex :: String | r))
_tabindex_ = _tabindex <<< Applicative.pure

_nonce
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (nonce :: String | r))
_nonce = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "nonce", value: _ } <<< Deku.Attribute.prop')

_nonce_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (nonce :: String | r))
_nonce_ = _nonce <<< Applicative.pure

_slot
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (slot :: String | r))
_slot = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "slot", value: _ } <<< Deku.Attribute.prop')

_slot_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (slot :: String | r))
_slot_ = _slot <<< Applicative.pure

_id
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (id :: String | r))
_id = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "id", value: _ } <<< Deku.Attribute.prop')

_id_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (id :: String | r))
_id_ = _id <<< Applicative.pure

_class
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (class :: String | r))
_class = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "class", value: _ } <<< Deku.Attribute.prop')

_class_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (class :: String | r))
_class_ = _class <<< Applicative.pure

_popovertarget
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (popovertarget :: String | r))
_popovertarget = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "popovertarget", value: _ } <<< Deku.Attribute.prop')

_popovertarget_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (popovertarget :: String | r))
_popovertarget_ = _popovertarget <<< Applicative.pure

_draggable
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (draggable :: String | r))
_draggable = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "draggable", value: _ } <<< Deku.Attribute.prop')

_draggable_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (draggable :: String | r))
_draggable_ = _draggable <<< Applicative.pure

_spellcheck
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (spellcheck :: String | r))
_spellcheck = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "spellcheck", value: _ } <<< Deku.Attribute.prop')

_spellcheck_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (spellcheck :: String | r))
_spellcheck_ = _spellcheck <<< Applicative.pure

_contenteditable
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (contenteditable :: String | r))
_contenteditable = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "contenteditable", value: _ } <<< Deku.Attribute.prop')

_contenteditable_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (contenteditable :: String | r))
_contenteditable_ = _contenteditable <<< Applicative.pure

_accesskey
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (accesskey :: String | r))
_accesskey = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "accesskey", value: _ } <<< Deku.Attribute.prop')

_accesskey_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (accesskey :: String | r))
_accesskey_ = _accesskey <<< Applicative.pure

_autofocus
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (autofocus :: String | r))
_autofocus = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "autofocus", value: _ } <<< Deku.Attribute.prop')

_autofocus_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (autofocus :: String | r))
_autofocus_ = _autofocus <<< Applicative.pure

_itemprop
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (itemprop :: String | r))
_itemprop = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "itemprop", value: _ } <<< Deku.Attribute.prop')

_itemprop_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (itemprop :: String | r))
_itemprop_ = _itemprop <<< Applicative.pure

_itemref
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (itemref :: String | r))
_itemref = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "itemref", value: _ } <<< Deku.Attribute.prop')

_itemref_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (itemref :: String | r))
_itemref_ = _itemref <<< Applicative.pure

_itemid
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (itemid :: String | r))
_itemid = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "itemid", value: _ } <<< Deku.Attribute.prop')

_itemid_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (itemid :: String | r))
_itemid_ = _itemid <<< Applicative.pure

_itemtype
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (itemtype :: String | r))
_itemtype = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "itemtype", value: _ } <<< Deku.Attribute.prop')

_itemtype_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (itemtype :: String | r))
_itemtype_ = _itemtype <<< Applicative.pure

_itemscope
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (itemscope :: String | r))
_itemscope = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "itemscope", value: _ } <<< Deku.Attribute.prop')

_itemscope_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (itemscope :: String | r))
_itemscope_ = _itemscope <<< Applicative.pure

_is
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (is :: String | r))
_is = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "is", value: _ } <<< Deku.Attribute.prop')

_is_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (is :: String | r))
_is_ = _is <<< Applicative.pure

_style
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (style :: String | r))
_style = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "style", value: _ } <<< Deku.Attribute.prop')

_style_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (style :: String | r))
_style_ = _style <<< Applicative.pure

_translate
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (translate :: String | r))
_translate = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "translate", value: _ } <<< Deku.Attribute.prop')

_translate_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (translate :: String | r))
_translate_ = _translate <<< Applicative.pure

_lang
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (lang :: String | r))
_lang = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "lang", value: _ } <<< Deku.Attribute.prop')

_lang_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (lang :: String | r))
_lang_ = _lang <<< Applicative.pure

_onAnimationcancel
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onAnimationcancel :: Types.EventEffect | r))
_onAnimationcancel = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "animationcancel", value: _ } <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onAnimationcancel_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onAnimationcancel :: Types.EventEffect | r))
_onAnimationcancel_ = _onAnimationcancel <<< Applicative.pure

_onAnimationend
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onAnimationend :: Types.EventEffect | r))
_onAnimationend = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "animationend", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onAnimationend_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onAnimationend :: Types.EventEffect | r))
_onAnimationend_ = _onAnimationend <<< Applicative.pure

_onAnimationiteration
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onAnimationiteration :: Types.EventEffect | r))
_onAnimationiteration = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "animationiteration", value: _ }
      <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onAnimationiteration_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onAnimationiteration :: Types.EventEffect | r))
_onAnimationiteration_ = _onAnimationiteration <<< Applicative.pure

_onAnimationstart
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onAnimationstart :: Types.EventEffect | r))
_onAnimationstart = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "animationstart", value: _ } <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onAnimationstart_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onAnimationstart :: Types.EventEffect | r))
_onAnimationstart_ = _onAnimationstart <<< Applicative.pure

_onTransitioncancel
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTransitioncancel :: Types.EventEffect | r))
_onTransitioncancel = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "transitioncancel", value: _ } <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onTransitioncancel_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTransitioncancel :: Types.EventEffect | r))
_onTransitioncancel_ = _onTransitioncancel <<< Applicative.pure

_onTransitionend
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTransitionend :: Types.EventEffect | r))
_onTransitionend = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "transitionend", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onTransitionend_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTransitionend :: Types.EventEffect | r))
_onTransitionend_ = _onTransitionend <<< Applicative.pure

_onTransitionstart
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTransitionstart :: Types.EventEffect | r))
_onTransitionstart = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "transitionstart", value: _ } <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onTransitionstart_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTransitionstart :: Types.EventEffect | r))
_onTransitionstart_ = _onTransitionstart <<< Applicative.pure

_onTransitionrun
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTransitionrun :: Types.EventEffect | r))
_onTransitionrun = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "transitionrun", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onTransitionrun_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTransitionrun :: Types.EventEffect | r))
_onTransitionrun_ = _onTransitionrun <<< Applicative.pure

_onSelectionchange
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSelectionchange :: Types.EventEffect | r))
_onSelectionchange = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "selectionchange", value: _ } <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onSelectionchange_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSelectionchange :: Types.EventEffect | r))
_onSelectionchange_ = _onSelectionchange <<< Applicative.pure

_onSelectstart
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSelectstart :: Types.EventEffect | r))
_onSelectstart = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "selectstart", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onSelectstart_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSelectstart :: Types.EventEffect | r))
_onSelectstart_ = _onSelectstart <<< Applicative.pure

_onTouchcancel
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTouchcancel :: Types.EventEffect | r))
_onTouchcancel = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "touchcancel", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onTouchcancel_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTouchcancel :: Types.EventEffect | r))
_onTouchcancel_ = _onTouchcancel <<< Applicative.pure

_onTouchmove
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTouchmove :: Types.EventEffect | r))
_onTouchmove = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "touchmove", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onTouchmove_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTouchmove :: Types.EventEffect | r))
_onTouchmove_ = _onTouchmove <<< Applicative.pure

_onTouchend
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTouchend :: Types.EventEffect | r))
_onTouchend = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "touchend", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onTouchend_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTouchend :: Types.EventEffect | r))
_onTouchend_ = _onTouchend <<< Applicative.pure

_onTouchstart
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTouchstart :: Types.EventEffect | r))
_onTouchstart = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "touchstart", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onTouchstart_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTouchstart :: Types.EventEffect | r))
_onTouchstart_ = _onTouchstart <<< Applicative.pure

_onLostpointercapture
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onLostpointercapture :: Types.EventEffect | r))
_onLostpointercapture = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "lostpointercapture", value: _ }
      <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onLostpointercapture_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onLostpointercapture :: Types.EventEffect | r))
_onLostpointercapture_ = _onLostpointercapture <<< Applicative.pure

_onGotpointercapture
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onGotpointercapture :: Types.EventEffect | r))
_onGotpointercapture = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "gotpointercapture", value: _ } <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onGotpointercapture_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onGotpointercapture :: Types.EventEffect | r))
_onGotpointercapture_ = _onGotpointercapture <<< Applicative.pure

_onPointerleave
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointerleave :: Types.EventEffect | r))
_onPointerleave = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "pointerleave", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onPointerleave_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointerleave :: Types.EventEffect | r))
_onPointerleave_ = _onPointerleave <<< Applicative.pure

_onPointerout
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointerout :: Types.EventEffect | r))
_onPointerout = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "pointerout", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onPointerout_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointerout :: Types.EventEffect | r))
_onPointerout_ = _onPointerout <<< Applicative.pure

_onPointercancel
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointercancel :: Types.EventEffect | r))
_onPointercancel = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "pointercancel", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onPointercancel_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointercancel :: Types.EventEffect | r))
_onPointercancel_ = _onPointercancel <<< Applicative.pure

_onPointerup
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointerup :: Types.EventEffect | r))
_onPointerup = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "pointerup", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onPointerup_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointerup :: Types.EventEffect | r))
_onPointerup_ = _onPointerup <<< Applicative.pure

_onPointerrawupdate
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointerrawupdate :: Types.EventEffect | r))
_onPointerrawupdate = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "pointerrawupdate", value: _ } <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onPointerrawupdate_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointerrawupdate :: Types.EventEffect | r))
_onPointerrawupdate_ = _onPointerrawupdate <<< Applicative.pure

_onPointermove
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointermove :: Types.EventEffect | r))
_onPointermove = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "pointermove", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onPointermove_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointermove :: Types.EventEffect | r))
_onPointermove_ = _onPointermove <<< Applicative.pure

_onPointerdown
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointerdown :: Types.EventEffect | r))
_onPointerdown = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "pointerdown", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onPointerdown_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointerdown :: Types.EventEffect | r))
_onPointerdown_ = _onPointerdown <<< Applicative.pure

_onPointerenter
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointerenter :: Types.EventEffect | r))
_onPointerenter = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "pointerenter", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onPointerenter_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointerenter :: Types.EventEffect | r))
_onPointerenter_ = _onPointerenter <<< Applicative.pure

_onPointerover
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointerover :: Types.EventEffect | r))
_onPointerover = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "pointerover", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onPointerover_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPointerover :: Types.EventEffect | r))
_onPointerover_ = _onPointerover <<< Applicative.pure

_onScrollend
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onScrollend :: Types.EventEffect | r))
_onScrollend = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "scrollend", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onScrollend_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onScrollend :: Types.EventEffect | r))
_onScrollend_ = _onScrollend <<< Applicative.pure

_onScroll
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onScroll :: Types.EventEffect | r))
_onScroll = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "scroll", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onScroll_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onScroll :: Types.EventEffect | r))
_onScroll_ = _onScroll <<< Applicative.pure

_onResize
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onResize :: Types.EventEffect | r))
_onResize = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "resize", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onResize_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onResize :: Types.EventEffect | r))
_onResize_ = _onResize <<< Applicative.pure

_onLoad
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onLoad :: Types.EventEffect | r))
_onLoad = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "load", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onLoad_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onLoad :: Types.EventEffect | r))
_onLoad_ = _onLoad <<< Applicative.pure

_onFocus
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onFocus :: Types.EventEffect | r))
_onFocus = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "focus", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onFocus_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onFocus :: Types.EventEffect | r))
_onFocus_ = _onFocus <<< Applicative.pure

_onError
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onError :: Types.EventEffect | r))
_onError = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "error", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onError_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onError :: Types.EventEffect | r))
_onError_ = _onError <<< Applicative.pure

_onBlur
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onBlur :: Types.EventEffect | r))
_onBlur = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "blur", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onBlur_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onBlur :: Types.EventEffect | r))
_onBlur_ = _onBlur <<< Applicative.pure

_onWheel
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onWheel :: Types.EventEffect | r))
_onWheel = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "wheel", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onWheel_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onWheel :: Types.EventEffect | r))
_onWheel_ = _onWheel <<< Applicative.pure

_onWebkittransitionend
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onWebkittransitionend :: Types.EventEffect | r))
_onWebkittransitionend = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "webkittransitionend", value: _ }
      <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onWebkittransitionend_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onWebkittransitionend :: Types.EventEffect | r))
_onWebkittransitionend_ = _onWebkittransitionend <<< Applicative.pure

_onWebkitanimationstart
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onWebkitanimationstart :: Types.EventEffect | r))
_onWebkitanimationstart = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "webkitanimationstart", value: _ }
      <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onWebkitanimationstart_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onWebkitanimationstart :: Types.EventEffect | r))
_onWebkitanimationstart_ = _onWebkitanimationstart <<< Applicative.pure

_onWebkitanimationiteration
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event
       (Deku.Attribute.Attribute (onWebkitanimationiteration :: Types.EventEffect | r))
_onWebkitanimationiteration = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "webkitanimationiteration", value: _ }
      <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onWebkitanimationiteration_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event
       (Deku.Attribute.Attribute (onWebkitanimationiteration :: Types.EventEffect | r))
_onWebkitanimationiteration_ = _onWebkitanimationiteration <<< Applicative.pure

_onWebkitanimationend
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onWebkitanimationend :: Types.EventEffect | r))
_onWebkitanimationend = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "webkitanimationend", value: _ }
      <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onWebkitanimationend_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onWebkitanimationend :: Types.EventEffect | r))
_onWebkitanimationend_ = _onWebkitanimationend <<< Applicative.pure

_onWaiting
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onWaiting :: Types.EventEffect | r))
_onWaiting = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "waiting", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onWaiting_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onWaiting :: Types.EventEffect | r))
_onWaiting_ = _onWaiting <<< Applicative.pure

_onVolumechange
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onVolumechange :: Types.EventEffect | r))
_onVolumechange = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "volumechange", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onVolumechange_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onVolumechange :: Types.EventEffect | r))
_onVolumechange_ = _onVolumechange <<< Applicative.pure

_onToggle
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onToggle :: Types.EventEffect | r))
_onToggle = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "toggle", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onToggle_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onToggle :: Types.EventEffect | r))
_onToggle_ = _onToggle <<< Applicative.pure

_onTimeupdate
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTimeupdate :: Types.EventEffect | r))
_onTimeupdate = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "timeupdate", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onTimeupdate_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onTimeupdate :: Types.EventEffect | r))
_onTimeupdate_ = _onTimeupdate <<< Applicative.pure

_onSuspend
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSuspend :: Types.EventEffect | r))
_onSuspend = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "suspend", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onSuspend_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSuspend :: Types.EventEffect | r))
_onSuspend_ = _onSuspend <<< Applicative.pure

_onSubmit
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSubmit :: Types.EventEffect | r))
_onSubmit = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "submit", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onSubmit_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSubmit :: Types.EventEffect | r))
_onSubmit_ = _onSubmit <<< Applicative.pure

_onStalled
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onStalled :: Types.EventEffect | r))
_onStalled = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "stalled", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onStalled_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onStalled :: Types.EventEffect | r))
_onStalled_ = _onStalled <<< Applicative.pure

_onSlotchange
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSlotchange :: Types.EventEffect | r))
_onSlotchange = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "slotchange", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onSlotchange_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSlotchange :: Types.EventEffect | r))
_onSlotchange_ = _onSlotchange <<< Applicative.pure

_onSelect
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSelect :: Types.EventEffect | r))
_onSelect = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "select", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onSelect_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSelect :: Types.EventEffect | r))
_onSelect_ = _onSelect <<< Applicative.pure

_onSeeking
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSeeking :: Types.EventEffect | r))
_onSeeking = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "seeking", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onSeeking_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSeeking :: Types.EventEffect | r))
_onSeeking_ = _onSeeking <<< Applicative.pure

_onSeeked
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSeeked :: Types.EventEffect | r))
_onSeeked = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "seeked", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onSeeked_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSeeked :: Types.EventEffect | r))
_onSeeked_ = _onSeeked <<< Applicative.pure

_onSecuritypolicyviolation
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSecuritypolicyviolation :: Types.EventEffect | r))
_onSecuritypolicyviolation = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "securitypolicyviolation", value: _ }
      <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onSecuritypolicyviolation_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onSecuritypolicyviolation :: Types.EventEffect | r))
_onSecuritypolicyviolation_ = _onSecuritypolicyviolation <<< Applicative.pure

_onReset
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onReset :: Types.EventEffect | r))
_onReset = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "reset", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onReset_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onReset :: Types.EventEffect | r))
_onReset_ = _onReset <<< Applicative.pure

_onRatechange
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onRatechange :: Types.EventEffect | r))
_onRatechange = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "ratechange", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onRatechange_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onRatechange :: Types.EventEffect | r))
_onRatechange_ = _onRatechange <<< Applicative.pure

_onProgress
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onProgress :: Types.EventEffect | r))
_onProgress = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "progress", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onProgress_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onProgress :: Types.EventEffect | r))
_onProgress_ = _onProgress <<< Applicative.pure

_onPlaying
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPlaying :: Types.EventEffect | r))
_onPlaying = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "playing", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onPlaying_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPlaying :: Types.EventEffect | r))
_onPlaying_ = _onPlaying <<< Applicative.pure

_onPlay
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPlay :: Types.EventEffect | r))
_onPlay = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "play", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onPlay_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPlay :: Types.EventEffect | r))
_onPlay_ = _onPlay <<< Applicative.pure

_onPause
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPause :: Types.EventEffect | r))
_onPause = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "pause", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onPause_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPause :: Types.EventEffect | r))
_onPause_ = _onPause <<< Applicative.pure

_onPaste
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPaste :: Types.EventEffect | r))
_onPaste = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "paste", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onPaste_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onPaste :: Types.EventEffect | r))
_onPaste_ = _onPaste <<< Applicative.pure

_onMouseup
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onMouseup :: Types.EventEffect | r))
_onMouseup = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "mouseup", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onMouseup_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onMouseup :: Types.EventEffect | r))
_onMouseup_ = _onMouseup <<< Applicative.pure

_onMouseover
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onMouseover :: Types.EventEffect | r))
_onMouseover = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "mouseover", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onMouseover_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onMouseover :: Types.EventEffect | r))
_onMouseover_ = _onMouseover <<< Applicative.pure

_onMouseout
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onMouseout :: Types.EventEffect | r))
_onMouseout = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "mouseout", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onMouseout_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onMouseout :: Types.EventEffect | r))
_onMouseout_ = _onMouseout <<< Applicative.pure

_onMousemove
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onMousemove :: Types.EventEffect | r))
_onMousemove = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "mousemove", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onMousemove_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onMousemove :: Types.EventEffect | r))
_onMousemove_ = _onMousemove <<< Applicative.pure

_onMouseleave
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onMouseleave :: Types.EventEffect | r))
_onMouseleave = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "mouseleave", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onMouseleave_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onMouseleave :: Types.EventEffect | r))
_onMouseleave_ = _onMouseleave <<< Applicative.pure

_onMouseenter
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onMouseenter :: Types.EventEffect | r))
_onMouseenter = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "mouseenter", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onMouseenter_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onMouseenter :: Types.EventEffect | r))
_onMouseenter_ = _onMouseenter <<< Applicative.pure

_onMousedown
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onMousedown :: Types.EventEffect | r))
_onMousedown = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "mousedown", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onMousedown_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onMousedown :: Types.EventEffect | r))
_onMousedown_ = _onMousedown <<< Applicative.pure

_onLoadstart
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onLoadstart :: Types.EventEffect | r))
_onLoadstart = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "loadstart", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onLoadstart_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onLoadstart :: Types.EventEffect | r))
_onLoadstart_ = _onLoadstart <<< Applicative.pure

_onLoadedmetadata
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onLoadedmetadata :: Types.EventEffect | r))
_onLoadedmetadata = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "loadedmetadata", value: _ } <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onLoadedmetadata_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onLoadedmetadata :: Types.EventEffect | r))
_onLoadedmetadata_ = _onLoadedmetadata <<< Applicative.pure

_onLoadeddata
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onLoadeddata :: Types.EventEffect | r))
_onLoadeddata = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "loadeddata", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onLoadeddata_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onLoadeddata :: Types.EventEffect | r))
_onLoadeddata_ = _onLoadeddata <<< Applicative.pure

_onKeyup
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onKeyup :: Types.EventEffect | r))
_onKeyup = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "keyup", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onKeyup_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onKeyup :: Types.EventEffect | r))
_onKeyup_ = _onKeyup <<< Applicative.pure

_onKeypress
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onKeypress :: Types.EventEffect | r))
_onKeypress = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "keypress", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onKeypress_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onKeypress :: Types.EventEffect | r))
_onKeypress_ = _onKeypress <<< Applicative.pure

_onKeydown
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onKeydown :: Types.EventEffect | r))
_onKeydown = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "keydown", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onKeydown_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onKeydown :: Types.EventEffect | r))
_onKeydown_ = _onKeydown <<< Applicative.pure

_onInvalid
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onInvalid :: Types.EventEffect | r))
_onInvalid = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "invalid", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onInvalid_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onInvalid :: Types.EventEffect | r))
_onInvalid_ = _onInvalid <<< Applicative.pure

_onInput
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onInput :: Types.EventEffect | r))
_onInput = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "input", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onInput_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onInput :: Types.EventEffect | r))
_onInput_ = _onInput <<< Applicative.pure

_onFormdata
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onFormdata :: Types.EventEffect | r))
_onFormdata = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "formdata", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onFormdata_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onFormdata :: Types.EventEffect | r))
_onFormdata_ = _onFormdata <<< Applicative.pure

_onEnded
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onEnded :: Types.EventEffect | r))
_onEnded = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "ended", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onEnded_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onEnded :: Types.EventEffect | r))
_onEnded_ = _onEnded <<< Applicative.pure

_onEmptied
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onEmptied :: Types.EventEffect | r))
_onEmptied = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "emptied", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onEmptied_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onEmptied :: Types.EventEffect | r))
_onEmptied_ = _onEmptied <<< Applicative.pure

_onDurationchange
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDurationchange :: Types.EventEffect | r))
_onDurationchange = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "durationchange", value: _ } <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onDurationchange_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDurationchange :: Types.EventEffect | r))
_onDurationchange_ = _onDurationchange <<< Applicative.pure

_onDrop
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDrop :: Types.EventEffect | r))
_onDrop = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "drop", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onDrop_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDrop :: Types.EventEffect | r))
_onDrop_ = _onDrop <<< Applicative.pure

_onDragstart
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDragstart :: Types.EventEffect | r))
_onDragstart = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "dragstart", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onDragstart_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDragstart :: Types.EventEffect | r))
_onDragstart_ = _onDragstart <<< Applicative.pure

_onDragover
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDragover :: Types.EventEffect | r))
_onDragover = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "dragover", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onDragover_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDragover :: Types.EventEffect | r))
_onDragover_ = _onDragover <<< Applicative.pure

_onDragleave
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDragleave :: Types.EventEffect | r))
_onDragleave = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "dragleave", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onDragleave_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDragleave :: Types.EventEffect | r))
_onDragleave_ = _onDragleave <<< Applicative.pure

_onDragenter
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDragenter :: Types.EventEffect | r))
_onDragenter = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "dragenter", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onDragenter_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDragenter :: Types.EventEffect | r))
_onDragenter_ = _onDragenter <<< Applicative.pure

_onDragend
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDragend :: Types.EventEffect | r))
_onDragend = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "dragend", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onDragend_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDragend :: Types.EventEffect | r))
_onDragend_ = _onDragend <<< Applicative.pure

_onDrag
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDrag :: Types.EventEffect | r))
_onDrag = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "drag", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onDrag_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDrag :: Types.EventEffect | r))
_onDrag_ = _onDrag <<< Applicative.pure

_onDblclick
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDblclick :: Types.EventEffect | r))
_onDblclick = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "dblclick", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onDblclick_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onDblclick :: Types.EventEffect | r))
_onDblclick_ = _onDblclick <<< Applicative.pure

_onCut
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onCut :: Types.EventEffect | r))
_onCut = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "cut", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onCut_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onCut :: Types.EventEffect | r))
_onCut_ = _onCut <<< Applicative.pure

_onCuechange
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onCuechange :: Types.EventEffect | r))
_onCuechange = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "cuechange", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onCuechange_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onCuechange :: Types.EventEffect | r))
_onCuechange_ = _onCuechange <<< Applicative.pure

_onCopy
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onCopy :: Types.EventEffect | r))
_onCopy = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "copy", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onCopy_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onCopy :: Types.EventEffect | r))
_onCopy_ = _onCopy <<< Applicative.pure

_onContextrestored
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onContextrestored :: Types.EventEffect | r))
_onContextrestored = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "contextrestored", value: _ } <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onContextrestored_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onContextrestored :: Types.EventEffect | r))
_onContextrestored_ = _onContextrestored <<< Applicative.pure

_onContextmenu
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onContextmenu :: Types.EventEffect | r))
_onContextmenu = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "contextmenu", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onContextmenu_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onContextmenu :: Types.EventEffect | r))
_onContextmenu_ = _onContextmenu <<< Applicative.pure

_onContextlost
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onContextlost :: Types.EventEffect | r))
_onContextlost = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "contextlost", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onContextlost_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onContextlost :: Types.EventEffect | r))
_onContextlost_ = _onContextlost <<< Applicative.pure

_onClose
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onClose :: Types.EventEffect | r))
_onClose = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "close", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onClose_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onClose :: Types.EventEffect | r))
_onClose_ = _onClose <<< Applicative.pure

_onClick
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onClick :: Types.EventEffect | r))
_onClick = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "click", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onClick_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onClick :: Types.EventEffect | r))
_onClick_ = _onClick <<< Applicative.pure

_onChange
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onChange :: Types.EventEffect | r))
_onChange = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "change", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onChange_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onChange :: Types.EventEffect | r))
_onChange_ = _onChange <<< Applicative.pure

_onCanplaythrough
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onCanplaythrough :: Types.EventEffect | r))
_onCanplaythrough = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "canplaythrough", value: _ } <<< Deku.Attribute.cb'
      <<< Deku.Attribute.cb
  )

_onCanplaythrough_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onCanplaythrough :: Types.EventEffect | r))
_onCanplaythrough_ = _onCanplaythrough <<< Applicative.pure

_onCanplay
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onCanplay :: Types.EventEffect | r))
_onCanplay = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "canplay", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onCanplay_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onCanplay :: Types.EventEffect | r))
_onCanplay_ = _onCanplay <<< Applicative.pure

_onCancel
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onCancel :: Types.EventEffect | r))
_onCancel = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "cancel", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onCancel_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onCancel :: Types.EventEffect | r))
_onCancel_ = _onCancel <<< Applicative.pure

_onBeforetoggle
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onBeforetoggle :: Types.EventEffect | r))
_onBeforetoggle = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "beforetoggle", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onBeforetoggle_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onBeforetoggle :: Types.EventEffect | r))
_onBeforetoggle_ = _onBeforetoggle <<< Applicative.pure

_onBeforematch
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onBeforematch :: Types.EventEffect | r))
_onBeforematch = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "beforematch", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onBeforematch_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onBeforematch :: Types.EventEffect | r))
_onBeforematch_ = _onBeforematch <<< Applicative.pure

_onBeforeinput
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onBeforeinput :: Types.EventEffect | r))
_onBeforeinput = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "beforeinput", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onBeforeinput_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onBeforeinput :: Types.EventEffect | r))
_onBeforeinput_ = _onBeforeinput <<< Applicative.pure

_onAuxclick
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onAuxclick :: Types.EventEffect | r))
_onAuxclick = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "auxclick", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onAuxclick_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onAuxclick :: Types.EventEffect | r))
_onAuxclick_ = _onAuxclick <<< Applicative.pure

_onAbort
  :: forall r
   . FRP.Event.Event Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onAbort :: Types.EventEffect | r))
_onAbort = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "abort", value: _ } <<< Deku.Attribute.cb' <<<
      Deku.Attribute.cb
  )

_onAbort_
  :: forall r
   . Types.EventEffect
  -> FRP.Event.Event (Deku.Attribute.Attribute (onAbort :: Types.EventEffect | r))
_onAbort_ = _onAbort <<< Applicative.pure

_ariaValuetext
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaValuetext :: String | r))
_ariaValuetext = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-valuetext", value: _ } <<< Deku.Attribute.prop')

_ariaValuetext_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaValuetext :: String | r))
_ariaValuetext_ = _ariaValuetext <<< Applicative.pure

_ariaValuenow
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaValuenow :: String | r))
_ariaValuenow = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-valuenow", value: _ } <<< Deku.Attribute.prop')

_ariaValuenow_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaValuenow :: String | r))
_ariaValuenow_ = _ariaValuenow <<< Applicative.pure

_ariaValuemin
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaValuemin :: String | r))
_ariaValuemin = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-valuemin", value: _ } <<< Deku.Attribute.prop')

_ariaValuemin_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaValuemin :: String | r))
_ariaValuemin_ = _ariaValuemin <<< Applicative.pure

_ariaValuemax
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaValuemax :: String | r))
_ariaValuemax = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-valuemax", value: _ } <<< Deku.Attribute.prop')

_ariaValuemax_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaValuemax :: String | r))
_ariaValuemax_ = _ariaValuemax <<< Applicative.pure

_ariaSort
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaSort :: String | r))
_ariaSort = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-sort", value: _ } <<< Deku.Attribute.prop')

_ariaSort_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaSort :: String | r))
_ariaSort_ = _ariaSort <<< Applicative.pure

_ariaSetsize
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaSetsize :: String | r))
_ariaSetsize = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-setsize", value: _ } <<< Deku.Attribute.prop')

_ariaSetsize_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaSetsize :: String | r))
_ariaSetsize_ = _ariaSetsize <<< Applicative.pure

_ariaSelected
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaSelected :: String | r))
_ariaSelected = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-selected", value: _ } <<< Deku.Attribute.prop')

_ariaSelected_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaSelected :: String | r))
_ariaSelected_ = _ariaSelected <<< Applicative.pure

_ariaRowspan
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaRowspan :: String | r))
_ariaRowspan = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-rowspan", value: _ } <<< Deku.Attribute.prop')

_ariaRowspan_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaRowspan :: String | r))
_ariaRowspan_ = _ariaRowspan <<< Applicative.pure

_ariaRowindextext
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaRowindextext :: String | r))
_ariaRowindextext = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "aria-rowindextext", value: _ } <<<
      Deku.Attribute.prop'
  )

_ariaRowindextext_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaRowindextext :: String | r))
_ariaRowindextext_ = _ariaRowindextext <<< Applicative.pure

_ariaRowindex
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaRowindex :: String | r))
_ariaRowindex = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-rowindex", value: _ } <<< Deku.Attribute.prop')

_ariaRowindex_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaRowindex :: String | r))
_ariaRowindex_ = _ariaRowindex <<< Applicative.pure

_ariaRowcount
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaRowcount :: String | r))
_ariaRowcount = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-rowcount", value: _ } <<< Deku.Attribute.prop')

_ariaRowcount_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaRowcount :: String | r))
_ariaRowcount_ = _ariaRowcount <<< Applicative.pure

_ariaRoledescription
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaRoledescription :: String | r))
_ariaRoledescription = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "aria-roledescription", value: _ } <<<
      Deku.Attribute.prop'
  )

_ariaRoledescription_
  :: forall r
   . String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaRoledescription :: String | r))
_ariaRoledescription_ = _ariaRoledescription <<< Applicative.pure

_ariaRequired
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaRequired :: String | r))
_ariaRequired = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-required", value: _ } <<< Deku.Attribute.prop')

_ariaRequired_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaRequired :: String | r))
_ariaRequired_ = _ariaRequired <<< Applicative.pure

_ariaReadonly
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaReadonly :: String | r))
_ariaReadonly = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-readonly", value: _ } <<< Deku.Attribute.prop')

_ariaReadonly_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaReadonly :: String | r))
_ariaReadonly_ = _ariaReadonly <<< Applicative.pure

_ariaPressed
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaPressed :: String | r))
_ariaPressed = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-pressed", value: _ } <<< Deku.Attribute.prop')

_ariaPressed_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaPressed :: String | r))
_ariaPressed_ = _ariaPressed <<< Applicative.pure

_ariaPosinset
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaPosinset :: String | r))
_ariaPosinset = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-posinset", value: _ } <<< Deku.Attribute.prop')

_ariaPosinset_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaPosinset :: String | r))
_ariaPosinset_ = _ariaPosinset <<< Applicative.pure

_ariaPlaceholder
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaPlaceholder :: String | r))
_ariaPlaceholder = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "aria-placeholder", value: _ } <<<
      Deku.Attribute.prop'
  )

_ariaPlaceholder_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaPlaceholder :: String | r))
_ariaPlaceholder_ = _ariaPlaceholder <<< Applicative.pure

_ariaOwns
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaOwns :: String | r))
_ariaOwns = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-owns", value: _ } <<< Deku.Attribute.prop')

_ariaOwns_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaOwns :: String | r))
_ariaOwns_ = _ariaOwns <<< Applicative.pure

_ariaOrientation
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaOrientation :: String | r))
_ariaOrientation = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "aria-orientation", value: _ } <<<
      Deku.Attribute.prop'
  )

_ariaOrientation_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaOrientation :: String | r))
_ariaOrientation_ = _ariaOrientation <<< Applicative.pure

_ariaMultiselectable
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaMultiselectable :: String | r))
_ariaMultiselectable = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "aria-multiselectable", value: _ } <<<
      Deku.Attribute.prop'
  )

_ariaMultiselectable_
  :: forall r
   . String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaMultiselectable :: String | r))
_ariaMultiselectable_ = _ariaMultiselectable <<< Applicative.pure

_ariaMultiline
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaMultiline :: String | r))
_ariaMultiline = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-multiline", value: _ } <<< Deku.Attribute.prop')

_ariaMultiline_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaMultiline :: String | r))
_ariaMultiline_ = _ariaMultiline <<< Applicative.pure

_ariaModal
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaModal :: String | r))
_ariaModal = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-modal", value: _ } <<< Deku.Attribute.prop')

_ariaModal_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaModal :: String | r))
_ariaModal_ = _ariaModal <<< Applicative.pure

_ariaLive
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaLive :: String | r))
_ariaLive = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-live", value: _ } <<< Deku.Attribute.prop')

_ariaLive_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaLive :: String | r))
_ariaLive_ = _ariaLive <<< Applicative.pure

_ariaLevel
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaLevel :: String | r))
_ariaLevel = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-level", value: _ } <<< Deku.Attribute.prop')

_ariaLevel_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaLevel :: String | r))
_ariaLevel_ = _ariaLevel <<< Applicative.pure

_ariaLabelledby
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaLabelledby :: String | r))
_ariaLabelledby = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-labelledby", value: _ } <<< Deku.Attribute.prop')

_ariaLabelledby_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaLabelledby :: String | r))
_ariaLabelledby_ = _ariaLabelledby <<< Applicative.pure

_ariaLabel
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaLabel :: String | r))
_ariaLabel = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-label", value: _ } <<< Deku.Attribute.prop')

_ariaLabel_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaLabel :: String | r))
_ariaLabel_ = _ariaLabel <<< Applicative.pure

_ariaKeyshortcuts
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaKeyshortcuts :: String | r))
_ariaKeyshortcuts = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "aria-keyshortcuts", value: _ } <<<
      Deku.Attribute.prop'
  )

_ariaKeyshortcuts_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaKeyshortcuts :: String | r))
_ariaKeyshortcuts_ = _ariaKeyshortcuts <<< Applicative.pure

_ariaInvalid
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaInvalid :: String | r))
_ariaInvalid = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-invalid", value: _ } <<< Deku.Attribute.prop')

_ariaInvalid_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaInvalid :: String | r))
_ariaInvalid_ = _ariaInvalid <<< Applicative.pure

_ariaHidden
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaHidden :: String | r))
_ariaHidden = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-hidden", value: _ } <<< Deku.Attribute.prop')

_ariaHidden_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaHidden :: String | r))
_ariaHidden_ = _ariaHidden <<< Applicative.pure

_ariaHaspopup
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaHaspopup :: String | r))
_ariaHaspopup = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-haspopup", value: _ } <<< Deku.Attribute.prop')

_ariaHaspopup_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaHaspopup :: String | r))
_ariaHaspopup_ = _ariaHaspopup <<< Applicative.pure

_ariaFlowto
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaFlowto :: String | r))
_ariaFlowto = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-flowto", value: _ } <<< Deku.Attribute.prop')

_ariaFlowto_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaFlowto :: String | r))
_ariaFlowto_ = _ariaFlowto <<< Applicative.pure

_ariaExpanded
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaExpanded :: String | r))
_ariaExpanded = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-expanded", value: _ } <<< Deku.Attribute.prop')

_ariaExpanded_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaExpanded :: String | r))
_ariaExpanded_ = _ariaExpanded <<< Applicative.pure

_ariaErrormessage
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaErrormessage :: String | r))
_ariaErrormessage = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "aria-errormessage", value: _ } <<<
      Deku.Attribute.prop'
  )

_ariaErrormessage_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaErrormessage :: String | r))
_ariaErrormessage_ = _ariaErrormessage <<< Applicative.pure

_ariaDisabled
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaDisabled :: String | r))
_ariaDisabled = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-disabled", value: _ } <<< Deku.Attribute.prop')

_ariaDisabled_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaDisabled :: String | r))
_ariaDisabled_ = _ariaDisabled <<< Applicative.pure

_ariaDetails
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaDetails :: String | r))
_ariaDetails = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-details", value: _ } <<< Deku.Attribute.prop')

_ariaDetails_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaDetails :: String | r))
_ariaDetails_ = _ariaDetails <<< Applicative.pure

_ariaDescription
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaDescription :: String | r))
_ariaDescription = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "aria-description", value: _ } <<<
      Deku.Attribute.prop'
  )

_ariaDescription_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaDescription :: String | r))
_ariaDescription_ = _ariaDescription <<< Applicative.pure

_ariaDescribedby
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaDescribedby :: String | r))
_ariaDescribedby = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "aria-describedby", value: _ } <<<
      Deku.Attribute.prop'
  )

_ariaDescribedby_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaDescribedby :: String | r))
_ariaDescribedby_ = _ariaDescribedby <<< Applicative.pure

_ariaCurrent
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaCurrent :: String | r))
_ariaCurrent = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-current", value: _ } <<< Deku.Attribute.prop')

_ariaCurrent_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaCurrent :: String | r))
_ariaCurrent_ = _ariaCurrent <<< Applicative.pure

_ariaControls
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaControls :: String | r))
_ariaControls = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-controls", value: _ } <<< Deku.Attribute.prop')

_ariaControls_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaControls :: String | r))
_ariaControls_ = _ariaControls <<< Applicative.pure

_ariaColspan
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaColspan :: String | r))
_ariaColspan = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-colspan", value: _ } <<< Deku.Attribute.prop')

_ariaColspan_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaColspan :: String | r))
_ariaColspan_ = _ariaColspan <<< Applicative.pure

_ariaColindextext
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaColindextext :: String | r))
_ariaColindextext = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "aria-colindextext", value: _ } <<<
      Deku.Attribute.prop'
  )

_ariaColindextext_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaColindextext :: String | r))
_ariaColindextext_ = _ariaColindextext <<< Applicative.pure

_ariaColindex
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaColindex :: String | r))
_ariaColindex = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-colindex", value: _ } <<< Deku.Attribute.prop')

_ariaColindex_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaColindex :: String | r))
_ariaColindex_ = _ariaColindex <<< Applicative.pure

_ariaColcount
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaColcount :: String | r))
_ariaColcount = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-colcount", value: _ } <<< Deku.Attribute.prop')

_ariaColcount_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaColcount :: String | r))
_ariaColcount_ = _ariaColcount <<< Applicative.pure

_ariaChecked
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaChecked :: String | r))
_ariaChecked = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-checked", value: _ } <<< Deku.Attribute.prop')

_ariaChecked_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaChecked :: String | r))
_ariaChecked_ = _ariaChecked <<< Applicative.pure

_ariaBusy
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaBusy :: String | r))
_ariaBusy = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-busy", value: _ } <<< Deku.Attribute.prop')

_ariaBusy_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaBusy :: String | r))
_ariaBusy_ = _ariaBusy <<< Applicative.pure

_ariaAutocomplete
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaAutocomplete :: String | r))
_ariaAutocomplete = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "aria-autocomplete", value: _ } <<<
      Deku.Attribute.prop'
  )

_ariaAutocomplete_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaAutocomplete :: String | r))
_ariaAutocomplete_ = _ariaAutocomplete <<< Applicative.pure

_ariaAtomic
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaAtomic :: String | r))
_ariaAtomic = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "aria-atomic", value: _ } <<< Deku.Attribute.prop')

_ariaAtomic_
  :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (ariaAtomic :: String | r))
_ariaAtomic_ = _ariaAtomic <<< Applicative.pure

_ariaActivedescendant
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaActivedescendant :: String | r))
_ariaActivedescendant = Functor.map
  ( Deku.Attribute.unsafeAttribute <<< { key: "aria-activedescendant", value: _ } <<<
      Deku.Attribute.prop'
  )

_ariaActivedescendant_
  :: forall r
   . String
  -> FRP.Event.Event (Deku.Attribute.Attribute (ariaActivedescendant :: String | r))
_ariaActivedescendant_ = _ariaActivedescendant <<< Applicative.pure

_role
  :: forall r
   . FRP.Event.Event String
  -> FRP.Event.Event (Deku.Attribute.Attribute (role :: String | r))
_role = Functor.map
  (Deku.Attribute.unsafeAttribute <<< { key: "role", value: _ } <<< Deku.Attribute.prop')

_role_ :: forall r. String -> FRP.Event.Event (Deku.Attribute.Attribute (role :: String | r))
_role_ = _role <<< Applicative.pure

__anonymous :: Types.Keyword "anonymous"
__anonymous = Types.Keyword "anonymous"

__useCredentials :: Types.Keyword "use-credentials"
__useCredentials = Types.Keyword "use-credentials"

__lazy :: Types.Keyword "lazy"
__lazy = Types.Keyword "lazy"

__eager :: Types.Keyword "eager"
__eager = Types.Keyword "eager"

__high :: Types.Keyword "high"
__high = Types.Keyword "high"

__low :: Types.Keyword "low"
__low = Types.Keyword "low"

__auto :: Types.Keyword "auto"
__auto = Types.Keyword "auto"

__ltr :: Types.Keyword "ltr"
__ltr = Types.Keyword "ltr"

__rtl :: Types.Keyword "rtl"
__rtl = Types.Keyword "rtl"

__applicationName :: Types.Keyword "application-name"
__applicationName = Types.Keyword "application-name"

__author :: Types.Keyword "author"
__author = Types.Keyword "author"

__description :: Types.Keyword "description"
__description = Types.Keyword "description"

__generator :: Types.Keyword "generator"
__generator = Types.Keyword "generator"

__keywords :: Types.Keyword "keywords"
__keywords = Types.Keyword "keywords"

__referrer :: Types.Keyword "referrer"
__referrer = Types.Keyword "referrer"

__themeColor :: Types.Keyword "theme-color"
__themeColor = Types.Keyword "theme-color"

__colorScheme :: Types.Keyword "color-scheme"
__colorScheme = Types.Keyword "color-scheme"

__contentLanguage :: Types.Keyword "content-language"
__contentLanguage = Types.Keyword "content-language"

__contentType :: Types.Keyword "content-type"
__contentType = Types.Keyword "content-type"

__defaultStyle :: Types.Keyword "default-style"
__defaultStyle = Types.Keyword "default-style"

__refresh :: Types.Keyword "refresh"
__refresh = Types.Keyword "refresh"

__setCookie :: Types.Keyword "set-cookie"
__setCookie = Types.Keyword "set-cookie"

__xUaCompatible :: Types.Keyword "x-ua-compatible"
__xUaCompatible = Types.Keyword "x-ua-compatible"

__contentSecurityPolicy :: Types.Keyword "content-security-policy"
__contentSecurityPolicy = Types.Keyword "content-security-policy"

__x1 :: Types.Keyword "1"
__x1 = Types.Keyword "1"

__a :: Types.Keyword "a"
__a = Types.Keyword "a"

__xA :: Types.Keyword "A"
__xA = Types.Keyword "A"

__i :: Types.Keyword "i"
__i = Types.Keyword "i"

__xI :: Types.Keyword "I"
__xI = Types.Keyword "I"

__alternate :: Types.Keyword "alternate"
__alternate = Types.Keyword "alternate"

__bookmark :: Types.Keyword "bookmark"
__bookmark = Types.Keyword "bookmark"

__canonical :: Types.Keyword "canonical"
__canonical = Types.Keyword "canonical"

__dnsPrefetch :: Types.Keyword "dns-prefetch"
__dnsPrefetch = Types.Keyword "dns-prefetch"

__external :: Types.Keyword "external"
__external = Types.Keyword "external"

__help :: Types.Keyword "help"
__help = Types.Keyword "help"

__icon :: Types.Keyword "icon"
__icon = Types.Keyword "icon"

__license :: Types.Keyword "license"
__license = Types.Keyword "license"

__manifest :: Types.Keyword "manifest"
__manifest = Types.Keyword "manifest"

__modulepreload :: Types.Keyword "modulepreload"
__modulepreload = Types.Keyword "modulepreload"

__nofollow :: Types.Keyword "nofollow"
__nofollow = Types.Keyword "nofollow"

__noopener :: Types.Keyword "noopener"
__noopener = Types.Keyword "noopener"

__noreferrer :: Types.Keyword "noreferrer"
__noreferrer = Types.Keyword "noreferrer"

__opener :: Types.Keyword "opener"
__opener = Types.Keyword "opener"

__pingback :: Types.Keyword "pingback"
__pingback = Types.Keyword "pingback"

__preconnect :: Types.Keyword "preconnect"
__preconnect = Types.Keyword "preconnect"

__prefetch :: Types.Keyword "prefetch"
__prefetch = Types.Keyword "prefetch"

__preload :: Types.Keyword "preload"
__preload = Types.Keyword "preload"

__search :: Types.Keyword "search"
__search = Types.Keyword "search"

__stylesheet :: Types.Keyword "stylesheet"
__stylesheet = Types.Keyword "stylesheet"

__tag :: Types.Keyword "tag"
__tag = Types.Keyword "tag"

__next :: Types.Keyword "next"
__next = Types.Keyword "next"

__prev :: Types.Keyword "prev"
__prev = Types.Keyword "prev"

__sync :: Types.Keyword "sync"
__sync = Types.Keyword "sync"

__async :: Types.Keyword "async"
__async = Types.Keyword "async"

__subtitles :: Types.Keyword "subtitles"
__subtitles = Types.Keyword "subtitles"

__captions :: Types.Keyword "captions"
__captions = Types.Keyword "captions"

__descriptions :: Types.Keyword "descriptions"
__descriptions = Types.Keyword "descriptions"

__chapters :: Types.Keyword "chapters"
__chapters = Types.Keyword "chapters"

__metadata :: Types.Keyword "metadata"
__metadata = Types.Keyword "metadata"

__none :: Types.Keyword "none"
__none = Types.Keyword "none"

__circleState :: Types.Keyword "circle state"
__circleState = Types.Keyword "circle state"

__defaultState :: Types.Keyword "default state"
__defaultState = Types.Keyword "default state"

__polygonState :: Types.Keyword "polygon state"
__polygonState = Types.Keyword "polygon state"

__rectangleState :: Types.Keyword "rectangle state"
__rectangleState = Types.Keyword "rectangle state"

__row :: Types.Keyword "row"
__row = Types.Keyword "row"

__col :: Types.Keyword "col"
__col = Types.Keyword "col"

__rowgroup :: Types.Keyword "rowgroup"
__rowgroup = Types.Keyword "rowgroup"

__colgroup :: Types.Keyword "colgroup"
__colgroup = Types.Keyword "colgroup"

__hidden :: Types.Keyword "hidden"
__hidden = Types.Keyword "hidden"

__text :: Types.Keyword "text"
__text = Types.Keyword "text"

__tel :: Types.Keyword "tel"
__tel = Types.Keyword "tel"

__url :: Types.Keyword "url"
__url = Types.Keyword "url"

__email :: Types.Keyword "email"
__email = Types.Keyword "email"

__password :: Types.Keyword "password"
__password = Types.Keyword "password"

__date :: Types.Keyword "date"
__date = Types.Keyword "date"

__month :: Types.Keyword "month"
__month = Types.Keyword "month"

__week :: Types.Keyword "week"
__week = Types.Keyword "week"

__time :: Types.Keyword "time"
__time = Types.Keyword "time"

__datetimeLocal :: Types.Keyword "datetime-local"
__datetimeLocal = Types.Keyword "datetime-local"

__number :: Types.Keyword "number"
__number = Types.Keyword "number"

__range :: Types.Keyword "range"
__range = Types.Keyword "range"

__color :: Types.Keyword "color"
__color = Types.Keyword "color"

__checkbox :: Types.Keyword "checkbox"
__checkbox = Types.Keyword "checkbox"

__radio :: Types.Keyword "radio"
__radio = Types.Keyword "radio"

__file :: Types.Keyword "file"
__file = Types.Keyword "file"

__submit :: Types.Keyword "submit"
__submit = Types.Keyword "submit"

__image :: Types.Keyword "image"
__image = Types.Keyword "image"

__reset :: Types.Keyword "reset"
__reset = Types.Keyword "reset"

__button :: Types.Keyword "button"
__button = Types.Keyword "button"

__soft :: Types.Keyword "soft"
__soft = Types.Keyword "soft"

__hard :: Types.Keyword "hard"
__hard = Types.Keyword "hard"

__get :: Types.Keyword "get"
__get = Types.Keyword "get"

__post :: Types.Keyword "post"
__post = Types.Keyword "post"

__dialog :: Types.Keyword "dialog"
__dialog = Types.Keyword "dialog"

__applicationXWwwFormUrlencoded :: Types.Keyword "application/x-www-form-urlencoded"
__applicationXWwwFormUrlencoded = Types.Keyword "application/x-www-form-urlencoded"

__multipartFormData :: Types.Keyword "multipart/form-data"
__multipartFormData = Types.Keyword "multipart/form-data"

__textPlain :: Types.Keyword "text/plain"
__textPlain = Types.Keyword "text/plain"

__shipping :: Types.Keyword "shipping"
__shipping = Types.Keyword "shipping"

__billing :: Types.Keyword "billing"
__billing = Types.Keyword "billing"

__home :: Types.Keyword "home"
__home = Types.Keyword "home"

__work :: Types.Keyword "work"
__work = Types.Keyword "work"

__mobile :: Types.Keyword "mobile"
__mobile = Types.Keyword "mobile"

__fax :: Types.Keyword "fax"
__fax = Types.Keyword "fax"

__pager :: Types.Keyword "pager"
__pager = Types.Keyword "pager"

__off :: Types.Keyword "off"
__off = Types.Keyword "off"

__on :: Types.Keyword "on"
__on = Types.Keyword "on"

__name :: Types.Keyword "name"
__name = Types.Keyword "name"

__honorificPrefix :: Types.Keyword "honorific-prefix"
__honorificPrefix = Types.Keyword "honorific-prefix"

__givenName :: Types.Keyword "given-name"
__givenName = Types.Keyword "given-name"

__additionalName :: Types.Keyword "additional-name"
__additionalName = Types.Keyword "additional-name"

__familyName :: Types.Keyword "family-name"
__familyName = Types.Keyword "family-name"

__honorificSuffix :: Types.Keyword "honorific-suffix"
__honorificSuffix = Types.Keyword "honorific-suffix"

__nickname :: Types.Keyword "nickname"
__nickname = Types.Keyword "nickname"

__organizationTitle :: Types.Keyword "organization-title"
__organizationTitle = Types.Keyword "organization-title"

__username :: Types.Keyword "username"
__username = Types.Keyword "username"

__newPassword :: Types.Keyword "new-password"
__newPassword = Types.Keyword "new-password"

__currentPassword :: Types.Keyword "current-password"
__currentPassword = Types.Keyword "current-password"

__oneTimeCode :: Types.Keyword "one-time-code"
__oneTimeCode = Types.Keyword "one-time-code"

__organization :: Types.Keyword "organization"
__organization = Types.Keyword "organization"

__streetAddress :: Types.Keyword "street-address"
__streetAddress = Types.Keyword "street-address"

__addressLine1 :: Types.Keyword "address-line1"
__addressLine1 = Types.Keyword "address-line1"

__addressLine2 :: Types.Keyword "address-line2"
__addressLine2 = Types.Keyword "address-line2"

__addressLine3 :: Types.Keyword "address-line3"
__addressLine3 = Types.Keyword "address-line3"

__addressLevel4 :: Types.Keyword "address-level4"
__addressLevel4 = Types.Keyword "address-level4"

__addressLevel3 :: Types.Keyword "address-level3"
__addressLevel3 = Types.Keyword "address-level3"

__addressLevel2 :: Types.Keyword "address-level2"
__addressLevel2 = Types.Keyword "address-level2"

__addressLevel1 :: Types.Keyword "address-level1"
__addressLevel1 = Types.Keyword "address-level1"

__country :: Types.Keyword "country"
__country = Types.Keyword "country"

__countryName :: Types.Keyword "country-name"
__countryName = Types.Keyword "country-name"

__postalCode :: Types.Keyword "postal-code"
__postalCode = Types.Keyword "postal-code"

__ccName :: Types.Keyword "cc-name"
__ccName = Types.Keyword "cc-name"

__ccGivenName :: Types.Keyword "cc-given-name"
__ccGivenName = Types.Keyword "cc-given-name"

__ccAdditionalName :: Types.Keyword "cc-additional-name"
__ccAdditionalName = Types.Keyword "cc-additional-name"

__ccFamilyName :: Types.Keyword "cc-family-name"
__ccFamilyName = Types.Keyword "cc-family-name"

__ccNumber :: Types.Keyword "cc-number"
__ccNumber = Types.Keyword "cc-number"

__ccExp :: Types.Keyword "cc-exp"
__ccExp = Types.Keyword "cc-exp"

__ccExpMonth :: Types.Keyword "cc-exp-month"
__ccExpMonth = Types.Keyword "cc-exp-month"

__ccExpYear :: Types.Keyword "cc-exp-year"
__ccExpYear = Types.Keyword "cc-exp-year"

__ccCsc :: Types.Keyword "cc-csc"
__ccCsc = Types.Keyword "cc-csc"

__ccType :: Types.Keyword "cc-type"
__ccType = Types.Keyword "cc-type"

__transactionCurrency :: Types.Keyword "transaction-currency"
__transactionCurrency = Types.Keyword "transaction-currency"

__transactionAmount :: Types.Keyword "transaction-amount"
__transactionAmount = Types.Keyword "transaction-amount"

__language :: Types.Keyword "language"
__language = Types.Keyword "language"

__bday :: Types.Keyword "bday"
__bday = Types.Keyword "bday"

__bdayDay :: Types.Keyword "bday-day"
__bdayDay = Types.Keyword "bday-day"

__bdayMonth :: Types.Keyword "bday-month"
__bdayMonth = Types.Keyword "bday-month"

__bdayYear :: Types.Keyword "bday-year"
__bdayYear = Types.Keyword "bday-year"

__sex :: Types.Keyword "sex"
__sex = Types.Keyword "sex"

__photo :: Types.Keyword "photo"
__photo = Types.Keyword "photo"

__telCountryCode :: Types.Keyword "tel-country-code"
__telCountryCode = Types.Keyword "tel-country-code"

__telNational :: Types.Keyword "tel-national"
__telNational = Types.Keyword "tel-national"

__telAreaCode :: Types.Keyword "tel-area-code"
__telAreaCode = Types.Keyword "tel-area-code"

__telLocal :: Types.Keyword "tel-local"
__telLocal = Types.Keyword "tel-local"

__telLocalPrefix :: Types.Keyword "tel-local-prefix"
__telLocalPrefix = Types.Keyword "tel-local-prefix"

__telLocalSuffix :: Types.Keyword "tel-local-suffix"
__telLocalSuffix = Types.Keyword "tel-local-suffix"

__telExtension :: Types.Keyword "tel-extension"
__telExtension = Types.Keyword "tel-extension"

__impp :: Types.Keyword "impp"
__impp = Types.Keyword "impp"

__value :: Types.Keyword "value"
__value = Types.Keyword "value"

__untilFound :: Types.Keyword "until-found"
__untilFound = Types.Keyword "until-found"

__sentences :: Types.Keyword "sentences"
__sentences = Types.Keyword "sentences"

__words :: Types.Keyword "words"
__words = Types.Keyword "words"

__characters :: Types.Keyword "characters"
__characters = Types.Keyword "characters"

__numeric :: Types.Keyword "numeric"
__numeric = Types.Keyword "numeric"

__decimal :: Types.Keyword "decimal"
__decimal = Types.Keyword "decimal"

__enter :: Types.Keyword "enter"
__enter = Types.Keyword "enter"

__done :: Types.Keyword "done"
__done = Types.Keyword "done"

__go :: Types.Keyword "go"
__go = Types.Keyword "go"

__previous :: Types.Keyword "previous"
__previous = Types.Keyword "previous"

__send :: Types.Keyword "send"
__send = Types.Keyword "send"

__manual :: Types.Keyword "manual"
__manual = Types.Keyword "manual"

__toggle :: Types.Keyword "toggle"
__toggle = Types.Keyword "toggle"

__show :: Types.Keyword "show"
__show = Types.Keyword "show"

__hide :: Types.Keyword "hide"
__hide = Types.Keyword "hide"

__allowPopups :: Types.Keyword "allow-popups"
__allowPopups = Types.Keyword "allow-popups"

__allowTopNavigation :: Types.Keyword "allow-top-navigation"
__allowTopNavigation = Types.Keyword "allow-top-navigation"

__allowTopNavigationByUserActivation :: Types.Keyword "allow-top-navigation-by-user-activation"
__allowTopNavigationByUserActivation = Types.Keyword "allow-top-navigation-by-user-activation"

__allowSameOrigin :: Types.Keyword "allow-same-origin"
__allowSameOrigin = Types.Keyword "allow-same-origin"

__allowForms :: Types.Keyword "allow-forms"
__allowForms = Types.Keyword "allow-forms"

__allowPointerLock :: Types.Keyword "allow-pointer-lock"
__allowPointerLock = Types.Keyword "allow-pointer-lock"

__allowScripts :: Types.Keyword "allow-scripts"
__allowScripts = Types.Keyword "allow-scripts"

__allowPopupsToEscapeSandbox :: Types.Keyword "allow-popups-to-escape-sandbox"
__allowPopupsToEscapeSandbox = Types.Keyword "allow-popups-to-escape-sandbox"

__allowModals :: Types.Keyword "allow-modals"
__allowModals = Types.Keyword "allow-modals"

__allowOrientationLock :: Types.Keyword "allow-orientation-lock"
__allowOrientationLock = Types.Keyword "allow-orientation-lock"

__allowPresentation :: Types.Keyword "allow-presentation"
__allowPresentation = Types.Keyword "allow-presentation"

__allowDownloads :: Types.Keyword "allow-downloads"
__allowDownloads = Types.Keyword "allow-downloads"

__allowTopNavigationToCustomProtocols :: Types.Keyword "allow-top-navigation-to-custom-protocols"
__allowTopNavigationToCustomProtocols = Types.Keyword "allow-top-navigation-to-custom-protocols"
